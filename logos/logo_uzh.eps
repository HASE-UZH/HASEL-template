%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: logo_uzh.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: fluri
%%CreationDate: 4/11/08
%%BoundingBox: 0 0 243 57
%%HiResBoundingBox: 0 0 242.6172 56.4092
%%CropBox: 0 0 242.6172 56.4092
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-04-11T09:03:34+02:00</xap:CreateDate>
         <xap:ModifyDate>2008-04-11T09:03:34+02:00</xap:ModifyDate>
         <xap:MetadataDate>2008-04-11T09:03:34+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>60</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAPAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwjzb+ZcOm3raLoVt&#xA;+lddDLHMtWFtatIKqJ3jWSRpCPiWGJGkI3oBvirCvONh5tt/Lk+u+cdYnfmUgs9Ft3e1hmnnISGH&#xA;0LSaHj+8avKW5mHEVKinHCrJNH/J/wDL28023vre2iuIb2JJ45biw0uaQrIoZSWltJGrQ+OBWMX3&#xA;lbyxpfnu38qeXr6fTNRlt/WkuIHNokc0lWggAsntY6yxwSk+pDIBRdjyGFDIYvNfnvyjcpbeZrdt&#xA;Z0t2CR3sSp9cUU6qYlSK6/1fTilO5WN6Ypeh6Vq2m6vp8Go6ZcJd2VyvOGeM1Ujp8wQdiDuDscCo&#xA;vFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWEfmX5tvdNgt9D&#xA;0VmGu6qDxljUSPbWwdY3nCn4TI8kiRQhiAZGFdgcVYPaXD+XZk8teWtMS58wOwge5uDOkc6ygi9j&#xA;tLtIyfVhYxvPcMCzNUsvFRwKGO/nnpep+X/y28o+WLu/F3d/pCS4lKgKiwRRujrGxVPhiW6CivxH&#xA;qBtspeoflPrenf4I0W201vrNs19eWETnknCON7iePqvxfuY1H04q8c80a1pP/QxF1rBuSbOyv7CF&#xA;ZOLHhNbtDBeLw48/hWJh0oeq1qMVelecdG1Ty1rN/wCYmmhuNM1iWaTW2uQIrFLeOKGKztpoudOb&#xA;PUm5CtJtxVSWVMVSzy95itfLsln5s0eWSfyT5hZnvRLyrHwYxSTsGJ/f27IfWbrLEC5+OJmdV7ar&#xA;BgGUgqRUEdCMCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvEZ&#xA;vMWnRXfmfz1qs0kduryW2lTW8YmkRITPZWrxoWTdPRubgqWFRKD2GFDLvyb0GK18uLrFVZtU/eQN&#xA;Dyjhe3DH07gW9THFJcLR5OHX4eRZgSUpYd/zk41qsWg/Wrm4tYGh1JGe1j9WU8o4V4gc4/tV4/T9&#xA;BVQvlXW7nTfLfleOCfmZPOUsc8jn05DBMsvrOVq/wh7gKfioKqD1xQwjzBqGnx/mN5hQ38637ahf&#xA;Us/QrAVkubaCnqCUUZltyw+D9g+I4qvqy9s7W9tJrS7iWa2nQxzROKqysKEHAl5JaaReadf6n5Yv&#xA;2W6juXW20J7qeONV+qwme2VbURJGIn9Uwv6bs7jlz6niUMu/KbUjdeUksS0jnR5WsEkl/vGtwiT2&#xA;bPUk8jaTw8q98CW/zJ8wavo03lFdNuPQGqeYrPT74cEf1LaaKZnj+NW41Ma/EtD74qrfmvrmqaD+&#xA;XWvaxpM/1bUbK2MltPxSTi3JRXjIGQ9e4xVMdN8x6fFoujy6vqFvb3moWiTqJ5I4WlZIBNOyKSte&#xA;C1ZuI+Eb9MVRGh+afLWvpK+h6raaosB4zm0njn4EkgcvTLUrxNK9e2KpD5Yu49Jn1uXWvNlrqUV7&#xA;rcsGno80aC0klNY9NqXNZkB+x9r2xVlF/qmm6dEkuoXcNnFLIsMclxIkStLIaIilyAWY9B1OKoHW&#xA;PN/lTRbmG11jWbLTrm4/uILq4ihdwdqhXZTSu1cVRt5q2l2SW73l5BbJdyLDatNIkYlldSyxxliO&#xA;TMqkgDegxVBL5x8pNpMmsDWrE6RE5ik1H6xF9XEg6r6vLhX2riqVeZtWsNf8iajdeXfNNpp0TKAn&#xA;mOKaOSC3ZHVnLSBwg2+E1bviqVeZvzV0TyhfeWdDvr+zu7vUHig1K7lu4oTbxekG+tSoeXwyH7JY&#xA;ge+Ksy0vzDoGrPKmlanaag8CxSTrazxzFEnXnCziNm4iRfiQn7Q3GKq1tqem3V1dWltdwz3Vkype&#xA;28ciPJCzryUSopJQsu45dsVb1DUdP02zkvdRuobOzhFZrm4kWKJB0qzuQo+k4qgtI81+WNZs5r3S&#xA;dWs7+0txW5nt545EiABP7wqTw2FfixV5R5MuvI/mv83/ADFqd9rEGpalY3dtH5Uhj1D4PRitfUkN&#xA;tBFIFmAbkX+FhsT44q9b8wWOrX+kXFppGpto+oScPQ1JYY7kxcXVm/dTVRuSgrv0rXFXj3nxvzc8&#xA;u3eh6Tp/5gy6jrvmC8FrY2Z0rTo1WJRynuJGCMeES7mgxV7QuqaY2pPpa3kDalHEJ5LESIZ1hJ4i&#xA;QxV5hC23KlMVaGr6SZ7y3F7AbjT1STUIfVTnbpIpZGmWtYwyqSC1KgYqlN95m8valp99Y6X5hso7&#xA;+XTpruG4iuIpDBAUot4eLf3aGRW5dPfFVXyxOln5P0+bUNah1RIbVGuNd5oIZ6LvPz5FOLda8sVY&#xA;/wCcPO3lfWfy984Dy/rlnf3Vpo2oSMLK5jlkj420lH/dsWA5dGxVE+SfOnlb9B+XdGn1uz/Tsmm2&#xA;VbB7mP6yztboaFC3Ms1a06nFXlcVrqcn5d+XbXTp9Qgmufqt7LPpq1m5vo9oZOf93EI/9JkZjJLG&#xA;oG/LlSpQ980e0js9IsbSNucdvbxRI+24RAoO23btgS84/OVPL51jyy2sReuqJqTW0HqTxK8ghjKK&#xA;zwEMoMgXfthCvJW8l2csdrf2WsXVrp2u6qdHsYIbu8RRJK3pqJFoaIxehNT9rp1xQuv9L8uaVo99&#xA;YXTPceYLbWHhub4z3jszR3EKgHkQknOshLMtdvfFX1VgS8p8/wCm2P8AytTy1ew2dtcapI1oksss&#xA;hjkgt47lm9RQk8TSMxJVV9Nl2PLoFJVOPy4jEHmPzXbJX0VniKDsojkuLZU+axWyfRTEoUfziZVn&#xA;8gliAP8AF2nCp8TFcAYEon89P/JR+Z/+YM/8TXFWE+fdF07WtU/J3TNRi9axuPU9eEmgdUs4n4N4&#xA;q3GjDuNsKp9daJpOh/nr5bbRrSLTl1PSL+K+itUWKOVbdo2i5IgC1Unr7DArFrvQZtY/L381Vtai&#xA;/wBO81X+p2Dj7SzWUdtOOPuVRl+nFWQ6vrUHnrzb+W1jb/HYtAfNt/Gu4QQxBLSvXpcSkGvSnjir&#xA;CPKWr6Fqs3m7U/MHkbWfNN5rWp3cDX9tYw3UMVpEfSht4ZJJUZGjA/ZFem+wxVWudD1S+/KX8tPL&#xA;3mm1ubaQeabawube6DRzNaD62saMNmUGCibHpirL/wA1PJf1CfyjqWieWI9W8s+XLm6n1TyzZRxp&#xA;6nrxKkU6W4AWVoWUtSlT8qnFUP5u13yPrX5Dea7vyhDDaWZif65ZRQLavDdckEizQqF4ybCvj4nF&#xA;Vv5laLo1x5k/K+Sewt5pLu/SK7eSJGMsa2w4pISPjUdgcKppcQWPlH879PmhjjstH8z6NLaMiBY4&#xA;UudLImU0ACqBbkqBgVGfkVDLd+WNQ803C0ufNep3eqb/AGlgaQxQJv8AsrHHVfniqA/MOztvMX5u&#xA;+S/LGqIJ9Eht7zVp7J/iinniXhD6qnYiPcj5kYqoeZdD0fyz+cXk270ezhs4PMsd/petWcCLHDcR&#xA;xwCSJnjUBCyt1JG42xVEflfoGhW/5h+fpINNtYpLHUbdLJ0hjVoFezXmsRC/AG5GvHrhV6o7oiM7&#xA;sFRQSzE0AA3JJOBXlX5ZqfOnnPV/zLuVJ09OWj+U0boLSFiJ7kDxmkrQ9QKriqI07/1o7V//AAGb&#xA;f/qLxVCwf8p1+b//AGy9L/6gbnFUv/L7yjoOkfkBNqdrZQrquo+X7qW81HgDcSCWBnEbSn4+CgKA&#xA;tabdMVSOO3i1zy1+S/ky+Y/oXWoZLrUoAxVZl020WZIXoQSrs+4xV6P568o+VtG/L7zhd6RpFnp1&#xA;xJoN/BJLawRwlo1tpCFb0wtQD44q8983eRvK2kf843RahZ6dAmq21jYajHqgjUXQupHhd5fWA51P&#xA;Mjr02xVD3Gi/WfINzobR28t55e1GOJ/raQSJHFEW0lhxuY546iCCKRXIHDmjMwUHCh7X5I1e31fy&#xA;ppt9bgCMxejRWEicrdjC/CQVDpyjPFwSGG4JBwJYx+aNpqF3q+hQWSRTSSW+qKbWWOR/WrbL+7Ux&#xA;zWzKWFVB5ihINRTCFYjYaXrmqWUiywfWh5cuJNesHi0+d0mvLeZitvE6X8POXlEpEZWlCN8ShJ/M&#xA;UOuz6FqN/cCH0m1iUTObaWGVJZLi2YxkG5kReRAPEqxHEjlvir6JwJeV+Zoze/mpby6nbG30/R44&#xA;7i2vbiz5wtHagXc0kd0rxvGysQvR1+EgheXxFCb/AJTwTSxa7q86lJb6+9Nga/btokS5H0XpuF+j&#xA;EpTH8zfJM3m/y2tlZ3QsdXsbmHUdHvWFVivLYkxswG9CGKmnStd+mBWGa35c/Obzzp6eWvM0GlaL&#xA;oMrxHWb2xmlmmuYonDmOBGH7sOVFeR/pirKfN3kzUtT84eSNU08RJp/lye6ku0ZirCOWARRiNaGu&#xA;48cVRGseVtTu/wAy/L3mSIx/o7S7K+t7kMxEnO54cOK03HwGu+Ku8h+VL/RW81jUhE8Wt67ealbI&#xA;p5g21xHEiiQED4v3ZqMVY1+Tn5Wa35O1TWbrWJ4rmPiunaAY2LNHp0U8syq9VWhZpRtv0xVTXyx+&#xA;aHkzWNbbyVb6dq+ha5dyailnfSvby2d1PQy0IHF4mIqBWvy7qp1r3lbzjruk+S21JrM6xo+tWmqa&#xA;ybdnWD04UmVxByBY09VQAfvxVNvON5+YlpPZy+U9P0/U7akgv7a8nkt5uR4+mYnCslB8XLl7UxVg&#xA;qflV5uufI3nlNQezXzT50l9d7a3Zls4AtBHHzK1Lfa5NTc+PXFU9/MXyb5mv7TypqWgJb3OseV7u&#xA;O5+pXEhiimT0vTkUSAGhBpTFWO/85AWGsX35XaZf3XpWPmm3u7ZYYrd2dTPeA2ssET03BWYmp/lx&#xA;V6t5d0aDRNA03R4Kejp1rDaoRtUQoEr9NK4qxX8xvJvmHUdU0PzT5Vlt4/Mnl55vSgvOQguba5Th&#xA;NA7LUqTT4T2P34qgNB8reedb892HnDznFaacmh288GiaPZStcFZLpQk08spVV+JPhAX/AG1U78ne&#xA;VtT0jzT5w1S7MZttcvYLiy4MS3CK3WJuYIFDyGKr/wA0tG80a35F1TSPLMkUOq38YtxLM5jUQuwE&#xA;3xKGIJj5Dp3xVi2hQ/nZoejWej6b5d8vw2NhCkFvH9duSQqClSfT3J6k9zhVFeafLPnyx892/nfy&#xA;pa2WoXVxpg0vVtLupmgHwyesksMtG6N8JB7DpvUBUL5Q8h+f7bUfPOp+ZJrKa9822kCwi1eT04ZI&#xA;YZolhAda8EWVRy706YqyDRfKOrWf5QxeU5jF+lU0Z9PJViYvWaBox8VK8eR60xVj17+VGvz/AJde&#xA;UrGyvYdP85eUUhl067NZLf1kQJJE/wANTHIBueP0YqjWtfze8xeW/MmkeY9P0jT477SbuysRaTTS&#xA;SPdzxNGjMzVVIaNv+1iqI83+Rtb1b8mG8nWph/S506ztKu5EPqW5i5/HQmn7s02xVj35q6TrWi6x&#xA;PrOjSRxwa+gt7hZ4EuoPrhVI2ilhchSt7BEiD/i2KNa/GcKpNba/+ec0ZS11mwkeK3N21vFY27Fb&#xA;UIrLLVZynFuXFQrciVbbbFChcXH5z3l/pOpfpuwnlrMug3CWUYS59Rlhk9KsyjdDzHqBfhBI32xV&#xA;ILnzt+bXla4TR7HUoLm4lncT21vppmaO7kmaL6uSJGUys67ANxoVNfiGKoh7T8ydY8viVdasbjQt&#xA;cvkura7SzCpc30oEiJH++WQFpF9PdQvMEE4qyWTV/wA/I5L2OTWbJX0tBLqgNhD/AKPEV5rI5E1H&#xA;DIGYenyPwnatAVUE/mH83by6t9L1DU7S/g1JYza2kVpFH9ZM45wciskjLFxHrTK6qfSUg0LKCq9v&#xA;8u6Jb6HodlpMDtIlnEsZmf7cj9ZJX/ypHJdvc4EpjirsVdirsVdirsVdirsVdirsVdirENe/Liz1&#xA;3zhpfmHUdSvJbbR3S4stEDqLMXUdeFwy05FlrUb9R86qsvxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ko&#xA;XVNLsNV06407UIFuLK6QxzwuKhlP6iOoI6HfFXlt7/i/yFbXtlNdy3Xl65jlFtrnFS1s8oIWS4rR&#xA;Y51ZgTI37mU7uYnLM5VNvLttrGorSPz7PcTzKZUtJLW3hlCtGq81T7bLyqeSEx7/AAUoGxQ85/Oe&#xA;DzBYeZdLE+ofXU06GG5S4e7jsp2mea5dH4ejItE9EVINNgPh5AYqz7R/LvnF/K1nqF15tGiwNbRu&#xA;sSIssEERihWMerIYP5CxqOrkV2BxVQbzbq+mXtxpumanceZdSvlT6lH9XC+mFFGeJeXxI/2vWk4w&#xA;js7EcCqyXyN5Gk0iSTV9XkF15gugwdwxkS3SQhnjjdgGdnYAyykAuQNlRVVQlmGKuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVzUoeVONN69KYq8f8AMP8Ayqnl&#xA;J+hPrXL1v336D9D9Hevv9v67/uH9Sta8virWuFXnPmj6j60f6e+rcOMfH9Mcuf1erU9P6n/o/Hlz&#xA;p+xWv+VhQyjRP0Tysv0/+mKUX6p9R+p14U+D0/R/3L8eP2fS2/l7YFeueSf8D/o+X/Cf1b0ef+me&#xA;h/f+rv8A71c/33qf8ZfiwJZFirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVf//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3936BB7E3809DD11A379A7D6D9EC90AC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3A36BB7E3809DD11A379A7D6D9EC90AC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1d522cb5-7c3d-11d9-ba35-000d933beb96</stRef:instanceID>
            <stRef:documentID>uuid:1d5224f7-7c3d-11d9-ba35-000d933beb96</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.038889</stDim:w>
            <stDim:h>209.902778</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=0</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>0</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=25</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>63</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=75</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>191</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=0 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=0 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=13 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=38 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>37.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=25 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=50 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=75 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>75.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=13 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>12.500000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=38 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>37.500000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=13 Y=25 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>12.500000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=25 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=38 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>37.500000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE Process Magenta CVC</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -56.4092 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 56.4092 li
242.617 56.4092 li
242.617 0 li
cp
clp
[1 0 0 1 0 0 ]ct
65.4043 17.0767 mo
67.0161 17.0767 li
67.0161 28.5166 li
67.0161 31.2466 67.5361 33.8984 70.7861 33.8984 cv
74.1924 33.8984 74.5562 30.9604 74.5562 28.5166 cv
74.5562 17.0767 li
76.1685 17.0767 li
76.1685 28.5425 li
76.1685 32.1304 74.998 35.4067 70.7861 35.4067 cv
66.5742 35.4067 65.4043 32.4424 65.4043 28.5425 cv
65.4043 17.0767 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
80.0161 26.0728 mo
80.0161 24.6948 79.938 23.3428 79.9121 21.9644 cv
81.3159 21.9644 li
81.3682 22.5625 81.394 22.9526 81.4199 23.9146 cv
81.4722 23.9146 li
81.7842 23.3428 82.6421 21.7827 84.8521 21.7827 cv
88.5181 21.7827 88.5181 25.4487 88.5181 26.3325 cv
88.5181 35.2246 li
87.0098 35.2246 li
87.0098 26.2808 li
87.0098 25.3706 87.0098 23.1865 84.54 23.1865 cv
82.6938 23.1865 81.5239 24.9287 81.5239 26.9824 cv
81.5239 35.2246 li
80.0161 35.2246 li
80.0161 26.0728 li
cp
f
92.1841 21.9644 mo
93.6919 21.9644 li
93.6919 35.2246 li
92.1841 35.2246 li
92.1841 21.9644 li
cp
92.0278 16.6865 mo
93.8477 16.6865 li
93.8477 19.0264 li
92.0278 19.0264 li
92.0278 16.6865 li
cp
f
95.876 21.9644 mo
97.4878 21.9644 li
100.634 33.5088 li
100.686 33.5088 li
103.936 21.9644 li
105.444 21.9644 li
101.57 35.2246 li
99.75 35.2246 li
95.876 21.9644 li
cp
f
114.128 27.6846 mo
114.128 24.1748 112.646 23.1865 111.424 23.1865 cv
109.37 23.1865 108.408 25.9688 108.408 27.6846 cv
114.128 27.6846 li
cp
108.408 29.0884 mo
108.408 34.0024 111.554 34.0024 112.152 34.0024 cv
113.01 34.0024 114.258 33.5864 115.012 32.9106 cv
115.09 34.6528 li
114.466 34.9907 113.582 35.4067 111.996 35.4067 cv
106.796 35.4067 106.796 29.9204 106.796 28.5947 cv
106.796 23.6025 109.266 21.7827 111.502 21.7827 cv
115.35 21.7827 115.74 25.8647 115.74 29.0884 cv
108.408 29.0884 li
cp
f
118.574 26.0728 mo
118.574 24.6948 118.496 23.3428 118.47 21.9644 cv
119.874 21.9644 li
119.899 22.7446 119.952 23.5244 119.978 24.0708 cv
120.03 24.0708 li
120.992 22.1724 122.109 21.7827 123.565 21.7827 cv
123.565 23.3945 li
121.174 23.3945 120.082 24.4346 120.082 26.8784 cv
120.082 35.2246 li
118.574 35.2246 li
118.574 26.0728 li
cp
f
131.288 23.7324 mo
130.534 23.4468 129.884 23.1865 129.025 23.1865 cv
127.466 23.1865 126.764 24.3564 126.764 25.2925 cv
126.764 26.5146 127.231 26.7744 129.025 27.7627 cv
130.846 28.7505 132.25 29.4268 132.25 31.5586 cv
132.25 33.9507 130.56 35.4067 128.324 35.4067 cv
126.686 35.4067 125.75 35.0684 124.97 34.7827 cv
125.178 33.0928 li
125.62 33.4048 126.972 34.0024 128.193 34.0024 cv
129.624 34.0024 130.638 32.9106 130.638 31.7148 cv
130.638 30.4404 129.832 29.9204 128.271 29.1406 cv
126.036 28.0225 125.151 27.3208 125.151 25.4487 cv
125.151 22.9526 127.284 21.7827 129.052 21.7827 cv
129.936 21.7827 131.001 22.0166 131.496 22.1724 cv
131.288 23.7324 li
cp
f
135.083 21.9644 mo
136.591 21.9644 li
136.591 35.2246 li
135.083 35.2246 li
135.083 21.9644 li
cp
134.927 16.6865 mo
136.748 16.6865 li
136.748 19.0264 li
134.927 19.0264 li
134.927 16.6865 li
cp
f
142.441 18.8447 mo
142.441 21.9644 li
145.145 21.9644 li
145.145 23.3687 li
142.441 23.3687 li
142.441 32.0005 li
142.441 33.0664 142.623 34.0024 143.897 34.0024 cv
144.599 34.0024 144.859 33.8467 145.145 33.7168 cv
145.145 35.2246 li
144.781 35.3545 144.105 35.4067 143.403 35.4067 cv
141.453 35.4067 140.933 33.8984 140.933 32.4165 cv
140.933 23.3687 li
138.957 23.3687 li
138.957 21.9644 li
140.933 21.9644 li
140.933 19.3125 li
142.441 18.8447 li
cp
f
150.553 32.9888 mo
150.605 32.9888 li
153.569 21.9644 li
155.077 21.9644 li
150.735 37.6948 li
150.241 39.4888 149.825 40.9966 147.719 40.9966 cv
147.303 40.9966 147.069 40.9448 146.705 40.8408 cv
146.783 39.3066 li
147.043 39.4888 147.511 39.5928 147.849 39.5928 cv
148.577 39.5928 148.967 38.8906 149.201 38.0586 cv
149.877 35.5366 li
145.977 21.9644 li
147.589 21.9644 li
150.553 32.9888 li
cp
f
170.963 28.5947 mo
170.963 27.5288 170.963 23.1865 167.609 23.1865 cv
164.255 23.1865 164.255 27.5288 164.255 28.5947 cv
164.255 29.6606 164.255 34.0024 167.609 34.0024 cv
170.963 34.0024 170.963 29.6606 170.963 28.5947 cv
cp
162.643 28.5947 mo
162.643 25.2666 163.735 21.7827 167.609 21.7827 cv
171.483 21.7827 172.575 25.2666 172.575 28.5947 cv
172.575 31.9224 171.483 35.4067 167.609 35.4067 cv
163.735 35.4067 162.643 31.9224 162.643 28.5947 cv
cp
f
176.084 23.3687 mo
174.031 23.3687 li
174.031 21.9644 li
176.084 21.9644 li
176.084 19.1304 li
176.084 17.1284 176.63 15.4126 179.334 15.4126 cv
179.854 15.4126 180.219 15.4907 180.479 15.5425 cv
180.479 17.0508 li
180.219 16.9468 179.803 16.8164 179.283 16.8164 cv
177.957 16.8164 177.593 17.7788 177.593 18.8447 cv
177.593 21.9644 li
179.933 21.9644 li
179.933 23.3687 li
177.593 23.3687 li
177.593 35.2246 li
176.084 35.2246 li
176.084 23.3687 li
cp
f
187.55 33.6128 mo
195.324 18.5845 li
187.81 18.5845 li
187.81 17.0767 li
197.04 17.0767 li
197.04 18.6367 li
189.24 33.7168 li
197.222 33.7168 li
197.222 35.2246 li
187.55 35.2246 li
187.55 33.6128 li
cp
f
208.428 31.1167 mo
208.428 32.4946 208.505 33.8467 208.532 35.2246 cv
207.127 35.2246 li
207.076 34.6265 207.05 34.2368 207.023 33.2744 cv
206.972 33.2744 li
206.815 33.8467 205.802 35.4067 203.592 35.4067 cv
200.706 35.4067 199.926 33.3267 199.926 31.2207 cv
199.926 21.9644 li
201.434 21.9644 li
201.434 30.9087 li
201.434 31.8184 201.434 34.0024 203.903 34.0024 cv
205.75 34.0024 206.919 32.2607 206.919 30.2065 cv
206.919 21.9644 li
208.428 21.9644 li
208.428 31.1167 li
cp
f
211.963 26.0728 mo
211.963 24.6948 211.885 23.3428 211.859 21.9644 cv
213.264 21.9644 li
213.29 22.7446 213.341 23.5244 213.368 24.0708 cv
213.419 24.0708 li
214.381 22.1724 215.5 21.7827 216.956 21.7827 cv
216.956 23.3945 li
214.563 23.3945 213.472 24.4346 213.472 26.8784 cv
213.472 35.2246 li
211.963 35.2246 li
211.963 26.0728 li
cp
f
219.321 21.9644 mo
220.83 21.9644 li
220.83 35.2246 li
219.321 35.2246 li
219.321 21.9644 li
cp
219.166 16.6865 mo
220.985 16.6865 li
220.985 19.0264 li
219.166 19.0264 li
219.166 16.6865 li
cp
f
231.671 23.9668 mo
231.073 23.4727 230.06 23.2905 229.279 23.2905 cv
227.251 23.2905 225.405 24.6948 225.405 28.2046 cv
225.405 33.0664 228.083 33.8984 229.513 33.8984 cv
230.111 33.8984 231.307 33.7168 231.75 33.1968 cv
231.879 34.9126 li
231.229 35.1987 230.241 35.4067 229.305 35.4067 cv
226.471 35.4067 223.793 33.2227 223.793 28.6465 cv
223.793 24.5908 225.587 21.7827 229.279 21.7827 cv
230.345 21.7827 231.125 21.9907 231.75 22.2505 cv
231.671 23.9668 li
cp
f
234.115 15.7246 mo
235.623 15.7246 li
235.623 23.9146 li
235.675 23.9146 li
235.935 23.3428 236.845 21.7827 238.951 21.7827 cv
242.617 21.7827 242.617 25.4487 242.617 26.3325 cv
242.617 35.2246 li
241.109 35.2246 li
241.109 26.2808 li
241.109 25.3706 241.109 23.1865 238.639 23.1865 cv
236.793 23.1865 235.623 24.9287 235.623 26.9824 cv
235.623 35.2246 li
234.115 35.2246 li
234.115 15.7246 li
cp
f
35.1724 13.376 mo
35.1709 11.6299 li
35.1724 9.90137 li
35.1724 13.376 li
cp
19.8721 17.9253 mo
19.8721 15.4043 li
20.0054 15.4043 li
20.0054 17.9253 li
19.8721 17.9253 li
cp
21.7295 16.4927 mo
21.7358 16.9409 21.7329 17.2881 21.7305 17.4277 cv
22.0679 17.4277 li
22.4038 17.4277 li
22.4028 17.3716 22.4019 17.2817 22.4019 17.1665 cv
21.9746 17.1665 li
21.9746 16.2983 li
21.9746 16.2983 21.9565 16.0488 22.1973 15.8145 cv
22.1489 15.7627 22.1016 15.7295 22.0679 15.7129 cv
21.9595 15.7661 21.7222 15.9692 21.7295 16.4927 cv
cp
21.5967 16.4946 mo
21.5923 16.1621 21.7026 15.7012 22.0679 15.5698 cv
22.4316 15.7012 22.543 16.1621 22.5376 16.4946 cv
22.5293 17.083 22.5391 17.5601 22.5391 17.5601 cv
22.0679 17.5601 li
21.5952 17.5601 li
21.5952 17.5601 21.6045 17.083 21.5967 16.4946 cv
cp
21.4043 16.2598 mo
21.4111 16.7583 21.4063 17.5552 21.4048 17.79 cv
22.0679 17.79 li
22.73 17.79 li
22.729 17.5552 22.7236 16.7583 22.731 16.2598 cv
22.7388 15.7412 22.2168 15.3193 22.0684 15.2412 cv
21.9189 15.3193 21.3975 15.7412 21.4043 16.2598 cv
cp
21.2715 16.2617 mo
21.2651 15.8672 21.6646 15.2422 22.0684 15.0977 cv
22.4712 15.2422 22.8696 15.8672 22.8643 16.2617 cv
22.856 16.8496 22.8647 17.9233 22.8647 17.9233 cv
22.0679 17.9233 li
21.271 17.9233 li
21.271 17.9233 21.2798 16.8496 21.2715 16.2617 cv
cp
24.1577 17.9331 mo
24.1577 15.4126 li
24.291 15.4126 li
24.291 17.9331 li
24.1577 17.9331 li
cp
34.1201 16.4927 mo
34.126 16.9409 34.123 17.2881 34.1211 17.4277 cv
34.4575 17.4277 li
34.7944 17.4277 li
34.7935 17.3716 34.7925 17.2817 34.792 17.1665 cv
34.3657 17.1665 li
34.3657 16.2983 li
34.3657 16.2983 34.3477 16.0488 34.5879 15.8145 cv
34.5396 15.7627 34.4922 15.7295 34.4575 15.7129 cv
34.3496 15.7661 34.1128 15.9692 34.1201 16.4927 cv
cp
33.9873 16.4946 mo
33.9819 16.1621 34.0928 15.7012 34.4575 15.5698 cv
34.8228 15.7012 34.9331 16.1621 34.9287 16.4946 cv
34.9204 17.083 34.9302 17.5601 34.9302 17.5601 cv
34.4575 17.5601 li
33.9858 17.5601 li
33.9858 17.5601 33.9951 17.083 33.9873 16.4946 cv
cp
33.7954 16.2598 mo
33.8018 16.7583 33.7969 17.5552 33.7959 17.79 cv
34.4575 17.79 li
35.1211 17.79 li
35.1191 17.5552 35.1147 16.7583 35.1216 16.2598 cv
35.1284 15.7412 34.6074 15.3193 34.458 15.2412 cv
34.3096 15.3193 33.7876 15.7412 33.7954 16.2598 cv
cp
33.6616 16.2617 mo
33.6563 15.8672 34.0557 15.2422 34.458 15.0977 cv
34.8623 15.2422 35.2607 15.8672 35.2544 16.2617 cv
35.2461 16.8496 35.2554 17.9233 35.2554 17.9233 cv
34.4575 17.9233 li
33.6611 17.9233 li
33.6611 17.9233 33.6699 16.8496 33.6616 16.2617 cv
cp
36.5483 17.9331 mo
36.5483 15.4126 li
36.6812 15.4126 li
36.6812 17.9331 li
36.5483 17.9331 li
cp
32.2627 17.9253 mo
32.2627 15.4043 li
32.396 15.4043 li
32.396 17.9253 li
32.2627 17.9253 li
cp
32.1938 23.1489 mo
32.1938 19.7456 li
32.3276 19.7456 li
32.3276 23.1489 li
32.1938 23.1489 li
cp
33.9473 21.2388 mo
33.957 21.8682 33.9512 22.3462 33.9487 22.5161 cv
34.4561 22.5161 li
34.9644 22.5161 li
34.9634 22.4448 34.9619 22.3154 34.9614 22.1436 cv
34.3247 22.1436 li
34.3247 20.9775 li
34.3247 20.9775 34.3379 20.6235 34.6636 20.3125 cv
34.5859 20.2334 34.5098 20.187 34.4561 20.165 cv
34.2969 20.2324 33.9365 20.5088 33.9473 21.2388 cv
cp
33.8145 21.2407 mo
33.8071 20.7974 33.9697 20.1885 34.4561 20.0229 cv
34.9434 20.1885 35.1055 20.7974 35.0991 21.2407 cv
35.0869 22.0303 35.1006 22.6499 35.1006 22.6499 cv
34.4561 22.6499 li
33.8125 22.6499 li
33.8125 22.6499 33.8257 22.0303 33.8145 21.2407 cv
cp
33.4839 20.9258 mo
33.4941 21.6118 33.4863 22.7212 33.4844 23.0039 cv
34.4561 23.0039 li
35.4297 23.0039 li
35.4277 22.7212 35.4199 21.6118 35.4302 20.9258 cv
35.4409 20.2046 34.6606 19.6216 34.457 19.5308 cv
34.2539 19.6216 33.4731 20.2046 33.4839 20.9258 cv
cp
33.3506 20.9268 mo
33.3428 20.3955 33.9194 19.5703 34.457 19.3877 cv
34.9956 19.5703 35.5713 20.3955 35.564 20.9268 cv
35.5522 21.7178 35.564 23.1377 35.564 23.1377 cv
34.4561 23.1377 li
33.3501 23.1377 li
33.3501 23.1377 33.3623 21.7178 33.3506 20.9268 cv
cp
36.5903 23.1509 mo
36.5903 19.748 li
36.7231 19.748 li
36.7231 23.1509 li
36.5903 23.1509 li
cp
19.8042 23.1489 mo
19.8042 19.7456 li
19.937 19.7456 li
19.937 23.1489 li
19.8042 23.1489 li
cp
21.5566 21.2388 mo
21.5659 21.8682 21.561 22.3462 21.5576 22.5161 cv
22.0659 22.5161 li
22.5742 22.5161 li
22.5728 22.4448 22.5713 22.3154 22.5703 22.1436 cv
21.9336 22.1436 li
21.9336 20.9775 li
21.9336 20.9775 21.9473 20.6235 22.2734 20.3125 cv
22.1953 20.2334 22.1191 20.187 22.0659 20.165 cv
21.9067 20.2324 21.5454 20.5088 21.5566 21.2388 cv
cp
21.4238 21.2407 mo
21.417 20.7974 21.5786 20.1885 22.0659 20.0229 cv
22.5532 20.1885 22.7148 20.7974 22.7085 21.2407 cv
22.6968 22.0303 22.71 22.6499 22.71 22.6499 cv
22.0659 22.6499 li
21.4219 22.6499 li
21.4219 22.6499 21.4355 22.0303 21.4238 21.2407 cv
cp
21.0933 20.9258 mo
21.103 21.6118 21.0962 22.7212 21.0933 23.0039 cv
22.0659 23.0039 li
23.0396 23.0039 li
23.0371 22.7212 23.0298 21.6118 23.04 20.9258 cv
23.0508 20.2046 22.27 19.6216 22.0674 19.5308 cv
21.8643 19.6216 21.082 20.2046 21.0933 20.9258 cv
cp
20.9604 20.9268 mo
20.9521 20.3955 21.5288 19.5703 22.0674 19.3877 cv
22.6045 19.5703 23.1812 20.3955 23.1729 20.9268 cv
23.1611 21.7178 23.1733 23.1377 23.1733 23.1377 cv
22.0659 23.1377 li
20.9595 23.1377 li
20.9595 23.1377 20.9717 21.7178 20.9604 20.9268 cv
cp
24.1992 23.1509 mo
24.1992 19.748 li
24.3325 19.748 li
24.3325 23.1509 li
24.1992 23.1509 li
cp
28.0117 20.5771 mo
28.0117 20.0327 li
28.2446 19.8232 li
28.478 20.0327 li
28.478 20.5771 li
28.0117 20.5771 li
cp
28.0059 22.3799 mo
28.0059 22.3799 28.0059 22.1455 28.2437 22.1455 cv
28.4814 22.1455 28.4814 22.3799 28.4814 22.3799 cv
28.4814 23.3159 li
28.0059 23.3159 li
28.0059 22.3799 li
cp
34.7124 26.335 mo
34.7124 27.7437 li
34.0483 27.7437 li
34.3696 27.3989 li
34.3696 26.5918 li
34.0483 26.335 li
34.7124 26.335 li
cp
22.2832 26.335 mo
22.2832 27.7437 li
21.6187 27.7437 li
21.9404 27.3989 li
21.9404 26.5918 li
21.6187 26.335 li
22.2832 26.335 li
cp
28.7188 31.3003 mo
28.541 31.5225 li
28.3525 31.3149 li
28.5298 31.0903 li
28.7188 31.3003 li
cp
29.019 30.9448 mo
28.8408 31.168 li
28.6519 30.959 li
28.8306 30.7354 li
29.019 30.9448 li
cp
28.4194 30.9448 mo
28.2402 31.168 li
28.0527 30.959 li
28.2295 30.7354 li
28.4194 30.9448 li
cp
28.7188 30.5928 mo
28.541 30.8154 li
28.3525 30.6035 li
28.5298 30.3813 li
28.7188 30.5928 li
cp
29.019 30.2373 mo
28.8408 30.4609 li
28.6519 30.2495 li
28.8306 30.0264 li
29.019 30.2373 li
cp
28.4194 30.2373 mo
28.2402 30.4609 li
28.0527 30.2495 li
28.2295 30.0264 li
28.4194 30.2373 li
cp
28.7188 29.8813 mo
28.541 30.105 li
28.3525 29.8955 li
28.5298 29.6729 li
28.7188 29.8813 li
cp
29.019 29.5283 mo
28.8408 29.7505 li
28.6519 29.5425 li
28.8306 29.3179 li
29.019 29.5283 li
cp
28.4194 29.5283 mo
28.2402 29.7505 li
28.0527 29.5425 li
28.2295 29.3179 li
28.4194 29.5283 li
cp
29.019 28.8198 mo
28.8408 29.0435 li
28.6519 28.832 li
28.8306 28.6084 li
29.019 28.8198 li
cp
28.4194 28.8198 mo
28.2402 29.0435 li
28.0527 28.832 li
28.2295 28.6084 li
28.4194 28.8198 li
cp
28.7188 28.4658 mo
28.541 28.6875 li
28.3525 28.4785 li
28.5298 28.2554 li
28.7188 28.4658 li
cp
28.7188 29.1743 mo
28.541 29.3965 li
28.3525 29.187 li
28.5298 28.9644 li
28.7188 29.1743 li
cp
28.6938 31.6113 mo
28.8286 31.4434 li
28.9785 31.6113 li
29.1133 31.6113 li
29.1133 31.4917 li
28.9526 31.3149 li
29.1133 31.1108 li
29.1133 30.7842 li
28.9526 30.6035 li
29.1133 30.4014 li
29.1133 30.0742 li
28.9526 29.8955 li
29.1133 29.6943 li
29.1133 29.3657 li
28.9526 29.187 li
29.1133 28.9849 li
29.1133 28.6572 li
28.9526 28.4785 li
29.0654 28.3354 li
29.0435 28.2715 29.0112 28.2163 28.9722 28.1699 cv
28.8408 28.333 li
28.6519 28.125 li
28.7437 28.0103 li
28.6118 27.9604 28.4619 27.9619 28.3301 28.0122 cv
28.4194 28.1104 li
28.2402 28.333 li
28.0986 28.1763 li
28.061 28.2231 28.0293 28.2773 28.0068 28.3398 cv
28.1191 28.4658 li
27.9678 28.6548 li
27.9678 29.0059 li
28.1191 29.1743 li
27.9678 29.3628 li
27.9678 29.7148 li
28.1191 29.8813 li
27.9678 30.0713 li
27.9678 30.4229 li
28.1191 30.5928 li
27.9678 30.7817 li
27.9678 31.1323 li
28.1191 31.3003 li
27.9678 31.4888 li
27.9678 31.6113 li
28.0938 31.6113 li
28.2295 31.4448 li
28.3789 31.6113 li
28.6938 31.6113 li
cp
28.2197 27.854 mo
27.8188 27.8818 27.4629 28.1357 27.4629 28.5903 cv
27.4629 32.0835 li
29.1133 32.0835 li
29.1133 31.7959 li
27.7827 31.7959 li
27.7827 28.563 li
27.7871 28.1958 27.9766 27.9585 28.2197 27.854 cv
cp
28.29 27.6655 mo
28.7813 27.6636 29.3022 27.9629 29.2988 28.5903 cv
29.2988 32.2705 li
27.2773 32.2705 li
27.2773 28.5903 li
27.2773 27.9702 27.7993 27.667 28.29 27.6655 cv
cp
34.7124 30.7754 mo
34.7124 32.1855 li
34.0483 32.1855 li
34.3696 31.8408 li
34.3696 31.0322 li
34.0483 30.7754 li
34.7124 30.7754 li
cp
22.2832 30.7754 mo
22.2832 32.1855 li
21.6187 32.1855 li
21.9404 31.8408 li
21.9404 31.0322 li
21.6187 30.7754 li
22.2832 30.7754 li
cp
34.728 34.7974 mo
34.728 36.207 li
34.064 36.207 li
34.3853 35.8623 li
34.3853 35.0537 li
34.064 34.7974 li
34.728 34.7974 li
cp
22.2832 34.8062 mo
22.2832 36.2158 li
21.6187 36.2158 li
21.9404 35.8701 li
21.9404 35.0625 li
21.6187 34.8062 li
22.2832 34.8062 li
cp
30.6821 36.5542 mo
29.582 36.5542 li
29.5825 35.1064 li
29.5835 34.4717 30.6787 34.4707 30.6821 35.1064 cv
30.6821 36.5542 li
cp
30.4966 36.3687 mo
30.4966 36.0957 li
30.0449 36.0957 li
30.0449 35.1045 li
30.0449 34.9448 30.144 34.854 30.2578 34.8306 cv
30.0459 34.7739 29.7686 34.8652 29.7686 35.1064 cv
29.7676 36.3687 li
30.4966 36.3687 li
cp
26.9072 36.561 mo
25.8071 36.561 li
25.8076 35.1133 li
25.8081 34.4785 26.9038 34.4785 26.9077 35.1133 cv
26.9072 36.561 li
cp
26.7217 36.3755 mo
26.7217 36.1035 li
26.2695 36.1035 li
26.2695 35.1113 li
26.2695 34.9517 26.3687 34.8604 26.4819 34.8369 cv
26.2705 34.7808 25.9932 34.8726 25.9927 35.1143 cv
25.9927 36.3755 li
26.7217 36.3755 li
cp
40.5757 48.9922 mo
39.666 48.9922 li
39.666 48.9272 li
39.8057 48.9136 39.9077 48.9028 39.9077 48.7417 cv
39.9077 47.4839 li
39.9077 47.3125 39.7856 47.3057 39.666 47.2988 cv
39.666 47.2334 li
40.5757 47.2334 li
40.5757 47.2988 li
40.4526 47.3037 40.3286 47.3057 40.3286 47.4839 cv
40.3286 48.7417 li
40.3286 48.9092 40.4326 48.9165 40.5757 48.9272 cv
40.5757 48.9922 li
cp
39.2266 48.9922 mo
38.3154 48.9922 li
38.3154 48.9272 li
38.457 48.9136 38.5576 48.9028 38.5576 48.7417 cv
38.5576 47.4839 li
38.5576 47.3125 38.4355 47.3057 38.3154 47.2988 cv
38.3154 47.2334 li
39.2266 47.2334 li
39.2266 47.2988 li
39.1035 47.3037 38.979 47.3057 38.979 47.4839 cv
38.979 48.7417 li
38.979 48.9092 39.0835 48.9165 39.2266 48.9272 cv
39.2266 48.9922 li
cp
37.8374 47.2988 mo
37.6006 47.3198 37.5518 47.3901 37.1406 47.9663 cv
37.6138 48.7017 li
37.7515 48.9165 37.793 48.9233 37.8662 48.9272 cv
37.8662 48.9922 li
36.9824 48.9922 li
36.9824 48.9272 li
37.1172 48.9209 37.1899 48.9136 37.1899 48.8442 cv
37.1899 48.8174 37.1616 48.7495 37.1357 48.7095 cv
36.873 48.2881 li
36.7739 48.4189 li
36.5581 48.7095 36.5298 48.769 36.5298 48.8174 cv
36.5298 48.9092 36.6494 48.9209 36.7402 48.9272 cv
36.7402 48.9922 li
36.0898 48.9922 li
36.0898 48.9272 li
36.1777 48.9136 36.2671 48.9014 36.3604 48.7817 cv
36.8159 48.2065 li
36.3008 47.4492 li
36.2456 47.3696 36.2017 47.3037 36.0933 47.2988 cv
36.0933 47.2334 li
36.9922 47.2334 li
36.9922 47.2988 li
36.8389 47.3086 36.7876 47.3086 36.7876 47.3843 cv
36.7876 47.4194 36.7954 47.4341 36.8257 47.4795 cv
37.0781 47.8711 li
37.3745 47.46 37.3745 47.46 37.3745 47.3901 cv
37.3745 47.3086 37.3027 47.3057 37.1875 47.2988 cv
37.1875 47.2334 li
37.8374 47.2334 li
37.8374 47.2988 li
cp
35.6738 47.2988 mo
35.4375 47.3198 35.3877 47.3901 34.9766 47.9663 cv
35.4507 48.7017 li
35.5884 48.9165 35.6299 48.9233 35.7017 48.9272 cv
35.7017 48.9922 li
34.8184 48.9922 li
34.8184 48.9272 li
34.9536 48.9209 35.0269 48.9136 35.0269 48.8442 cv
35.0269 48.8174 34.998 48.7495 34.9717 48.7095 cv
34.709 48.2881 li
34.6104 48.4189 li
34.394 48.7095 34.3657 48.769 34.3657 48.8174 cv
34.3657 48.9092 34.4858 48.9209 34.5767 48.9272 cv
34.5767 48.9922 li
33.9263 48.9922 li
33.9263 48.9272 li
34.0151 48.9136 34.103 48.9014 34.1973 48.7817 cv
34.6519 48.2065 li
34.1362 47.4492 li
34.0825 47.3696 34.0386 47.3037 33.9287 47.2988 cv
33.9287 47.2334 li
34.8291 47.2334 li
34.8291 47.2988 li
34.6753 47.3086 34.6226 47.3086 34.6226 47.3843 cv
34.6226 47.4194 34.6309 47.4341 34.6621 47.4795 cv
34.9146 47.8711 li
35.2114 47.46 35.2114 47.46 35.2114 47.3901 cv
35.2114 47.3086 35.1377 47.3057 35.0239 47.2988 cv
35.0239 47.2334 li
35.6738 47.2334 li
35.6738 47.2988 li
cp
33.5107 47.2988 mo
33.2734 47.3198 33.2241 47.3901 32.814 47.9663 cv
33.2866 48.7017 li
33.4243 48.9165 33.4658 48.9233 33.5391 48.9272 cv
33.5391 48.9922 li
32.6548 48.9922 li
32.6548 48.9272 li
32.79 48.9209 32.8628 48.9136 32.8628 48.8442 cv
32.8628 48.8174 32.834 48.7495 32.8081 48.7095 cv
32.5449 48.2881 li
32.4468 48.4189 li
32.2314 48.7095 32.2021 48.769 32.2021 48.8174 cv
32.2021 48.9092 32.3218 48.9209 32.4136 48.9272 cv
32.4136 48.9922 li
31.7632 48.9922 li
31.7632 48.9272 li
31.8516 48.9136 31.9399 48.9014 32.0337 48.7817 cv
32.4888 48.2065 li
31.9736 47.4492 li
31.9189 47.3696 31.8745 47.3037 31.7656 47.2988 cv
31.7656 47.2334 li
32.6655 47.2334 li
32.6655 47.2988 li
32.5122 47.3086 32.46 47.3086 32.46 47.3843 cv
32.46 47.4194 32.4683 47.4341 32.499 47.4795 cv
32.751 47.8711 li
33.0479 47.46 33.0479 47.46 33.0479 47.3901 cv
33.0479 47.3086 32.9746 47.3057 32.8608 47.2988 cv
32.8608 47.2334 li
33.5107 47.2334 li
33.5107 47.2988 li
cp
22.7974 48.6621 mo
22.6074 48.8779 22.4048 49.041 22.0713 49.041 cv
21.4663 49.041 21.1377 48.6152 21.1377 48.1284 cv
21.1377 47.6001 21.5122 47.1938 22.0586 47.1938 cv
22.2925 47.1938 22.4932 47.3242 22.5605 47.3242 cv
22.6309 47.3242 22.6543 47.2681 22.6802 47.2031 cv
22.75 47.2031 li
22.75 47.812 li
22.6851 47.812 li
22.5938 47.5845 22.3755 47.2808 22.0791 47.2808 cv
21.7002 47.2808 21.5981 47.6782 21.5981 48.1187 cv
21.5981 48.2734 21.6138 48.5239 21.7095 48.6899 cv
21.8193 48.8779 22.0249 48.9165 22.1055 48.9165 cv
22.3081 48.9165 22.5034 48.8389 22.7197 48.5972 cv
22.7974 48.6621 li
cp
20.8159 48.6621 mo
20.6255 48.8779 20.4229 49.041 20.0898 49.041 cv
19.4839 49.041 19.1563 48.6152 19.1563 48.1284 cv
19.1563 47.6001 19.5313 47.1938 20.0767 47.1938 cv
20.311 47.1938 20.5112 47.3242 20.5791 47.3242 cv
20.6494 47.3242 20.6724 47.2681 20.6987 47.2031 cv
20.7686 47.2031 li
20.7686 47.812 li
20.7036 47.812 li
20.6128 47.5845 20.3945 47.2808 20.0977 47.2808 cv
19.7183 47.2808 19.6172 47.6782 19.6172 48.1187 cv
19.6172 48.2734 19.6323 48.5239 19.7285 48.6899 cv
19.8374 48.8779 20.043 48.9165 20.124 48.9165 cv
20.3267 48.9165 20.522 48.8389 20.7373 48.5972 cv
20.8159 48.6621 li
cp
16.98 48.9922 mo
16.98 48.9272 li
17.144 48.9272 17.1953 48.8525 17.1953 48.7563 cv
17.1953 47.4722 li
17.1953 47.3135 17.0815 47.3086 16.98 47.2988 cv
16.98 47.2334 li
17.7729 47.2334 li
18.501 47.2334 18.7378 47.6855 18.7378 48.0864 cv
18.7378 48.5659 18.4565 48.9707 17.8022 48.9922 cv
16.98 48.9922 li
cp
17.6172 47.4448 mo
17.6172 48.7495 li
17.6172 48.8545 17.6406 48.9014 17.7651 48.9014 cv
18.0566 48.9014 18.2856 48.7363 18.2856 48.1133 cv
18.2856 47.876 18.2261 47.3242 17.7783 47.3242 cv
17.6118 47.3242 17.6143 47.3872 17.6172 47.4448 cv
cp
16.5981 48.9922 mo
15.7344 48.9922 li
15.7344 48.9272 li
15.8901 48.9111 15.9658 48.9028 15.9658 48.7329 cv
15.9658 47.4204 li
15.3105 48.9922 li
15.2397 48.9922 li
14.5898 47.46 li
14.5854 48.6689 li
14.5854 48.8525 14.6318 48.9136 14.8477 48.9272 cv
14.8477 48.9922 li
14.2393 48.9922 li
14.2393 48.9272 li
14.4419 48.9092 14.4751 48.8711 14.4751 48.7183 cv
14.4751 47.4839 li
14.4751 47.3491 14.4292 47.3125 14.2446 47.2988 cv
14.2446 47.2334 li
14.9023 47.2334 li
15.4229 48.4609 li
15.9424 47.2334 li
16.5981 47.2334 li
16.5981 47.2988 li
16.4517 47.3086 16.3687 47.3135 16.3687 47.5381 cv
16.3687 48.6885 li
16.3687 48.896 16.4258 48.9028 16.5981 48.9272 cv
16.5981 48.9922 li
cp
24.7788 48.6621 mo
24.5884 48.8779 24.3857 49.041 24.0522 49.041 cv
23.4468 49.041 23.1196 48.6152 23.1196 48.1284 cv
23.1196 47.6001 23.4941 47.1938 24.04 47.1938 cv
24.2744 47.1938 24.4736 47.3242 24.542 47.3242 cv
24.6118 47.3242 24.6353 47.2681 24.6616 47.2031 cv
24.7314 47.2031 li
24.7314 47.812 li
24.6665 47.812 li
24.5762 47.5845 24.3574 47.2808 24.0605 47.2808 cv
23.6816 47.2808 23.5801 47.6782 23.5801 48.1187 cv
23.5801 48.2734 23.5952 48.5239 23.6919 48.6899 cv
23.8008 48.8779 24.0059 48.9165 24.0874 48.9165 cv
24.2896 48.9165 24.4844 48.8389 24.7007 48.5972 cv
24.7788 48.6621 li
cp
41.9258 48.9922 mo
41.0146 48.9922 li
41.0146 48.9272 li
41.1553 48.9136 41.2568 48.9028 41.2568 48.7417 cv
41.2568 47.4839 li
41.2568 47.3125 41.1348 47.3057 41.0146 47.2988 cv
41.0146 47.2334 li
41.9258 47.2334 li
41.9258 47.2988 li
41.8027 47.3037 41.6782 47.3057 41.6782 47.4839 cv
41.6782 48.7417 li
41.6782 48.9092 41.7822 48.9165 41.9258 48.9272 cv
41.9258 48.9922 li
cp
28.8452 45.8179 mo
28.8027 45.8027 28.7632 45.7803 28.7349 45.7432 cv
28.6626 45.644 28.6758 45.4941 28.5703 45.5166 cv
28.3315 45.5664 28.0767 45.5537 27.8721 45.5103 cv
27.7437 45.4834 27.7393 45.7305 27.5654 45.8203 cv
27.5522 45.9375 27.624 45.981 27.5679 46.1064 cv
27.5313 46.1885 27.4087 46.1343 27.4453 46.0522 cv
27.4839 45.9648 27.3599 45.7529 27.4819 45.709 cv
27.6587 45.6475 27.6191 45.3193 27.9004 45.3789 cv
28.0894 45.4194 28.3257 45.4302 28.5425 45.3848 cv
28.7813 45.3364 28.7534 45.5405 28.8428 45.6636 cv
28.8784 45.7109 29.0947 45.7251 28.9707 45.8716 cv
28.9619 45.8818 28.9585 45.8892 28.9575 45.8916 cv
28.9614 45.9302 29.0698 45.9863 29.0093 46.1021 cv
28.9678 46.1816 28.8491 46.1191 28.8906 46.0396 cv
28.856 45.9551 28.7842 45.9185 28.8452 45.8179 cv
cp
28.397 46.5176 mo
28.4541 46.5381 28.5063 46.5479 28.562 46.5737 cv
28.6865 46.6313 28.6494 46.7236 28.6812 46.8101 cv
28.7139 46.9009 28.5791 46.9492 28.5469 46.8599 cv
28.5317 46.8188 28.5308 46.7778 28.5234 46.7363 cv
28.5186 46.7148 28.5137 46.709 28.5005 46.7041 cv
28.4507 46.6797 28.4028 46.6709 28.3496 46.6538 cv
28.2598 46.6226 28.3066 46.4863 28.397 46.5176 cv
cp
28.1538 46.6538 mo
28.1016 46.6709 28.0532 46.6797 28.0024 46.7041 cv
27.9761 46.7158 27.9771 46.7627 27.9736 46.7876 cv
27.9707 46.8081 27.9668 46.8335 27.957 46.8599 cv
27.9248 46.9492 27.7905 46.9009 27.8228 46.8101 cv
27.8545 46.7236 27.8169 46.6313 27.9419 46.5737 cv
27.9976 46.5479 28.0498 46.5381 28.1069 46.5176 cv
28.1968 46.4863 28.2441 46.6226 28.1538 46.6538 cv
cp
28.2324 46.4478 mo
28.1011 46.4468 li
27.9824 46.4453 28.0347 46.21 28.0381 46.0562 cv
27.9907 45.9897 27.8306 46.0405 27.8271 46.0664 cv
27.8125 46.1611 27.6714 46.1396 27.6855 46.0454 cv
27.7192 45.8276 28.186 45.8276 28.1812 46.0405 cv
28.1748 46.3047 li
28.2295 46.3047 li
28.2866 46.3047 li
28.2798 46.0405 li
28.2754 45.8276 28.7422 45.8276 28.7754 46.0454 cv
28.79 46.1396 28.6484 46.1611 28.6343 46.0664 cv
28.6299 46.0405 28.4707 45.9897 28.4229 46.0562 cv
28.4272 46.21 28.4785 46.4453 28.3599 46.4468 cv
28.2324 46.4478 li
cp
48.1763 33.7832 mo
48.5503 32.1836 li
48.6646 32.209 li
48.6304 32.4614 48.6069 32.644 48.8896 32.709 cv
51.1016 33.228 li
51.4028 33.2993 51.4619 33.0854 51.5254 32.8784 cv
51.6392 32.9053 li
51.2651 34.5059 li
51.1514 34.4775 li
51.1924 34.2612 51.2388 34.0425 50.9287 33.9697 cv
48.7168 33.4507 li
48.4243 33.3838 48.3677 33.5615 48.2905 33.8091 cv
48.1763 33.7832 li
cp
50.9146 31.5518 mo
51.2505 31.5034 51.8174 31.2808 51.8755 30.73 cv
51.9019 30.4878 51.7886 30.2139 51.4858 30.1826 cv
51.2344 30.1567 51.1221 30.2344 50.8843 30.6055 cv
50.4697 31.2544 li
50.3735 31.4063 50.0654 31.7295 49.5566 31.6768 cv
49.1465 31.6313 48.6128 31.2739 48.7051 30.415 cv
48.752 29.9722 48.9331 29.7778 48.9487 29.6328 cv
48.9595 29.5347 48.8779 29.5034 48.8052 29.4775 cv
48.8193 29.3413 li
49.9717 29.4629 li
49.958 29.5986 li
49.4761 29.6426 48.9204 29.8574 48.8569 30.4502 cv
48.7969 31.0098 49.2573 31.083 49.3174 31.0884 cv
49.6304 31.1235 49.7651 30.9155 49.9424 30.6279 cv
50.125 30.3306 li
50.5928 29.5728 50.9941 29.6167 51.2085 29.6396 cv
51.4937 29.6699 52.1123 29.8813 52.0186 30.7686 cv
51.9785 31.1411 51.8008 31.3442 51.7861 31.48 cv
51.7744 31.5869 51.8418 31.6191 51.9282 31.6509 cv
51.9136 31.791 li
50.9009 31.6831 li
50.9146 31.5518 li
cp
48.9214 25.6987 mo
48.9673 25.9785 49.0068 26.1079 49.3154 26.0928 cv
51.5371 25.9883 li
51.8491 25.7095 51.8589 25.6348 51.8569 25.5732 cv
51.9727 25.5674 li
52.0205 26.5576 li
50.0947 28.2793 li
50.0967 28.2891 li
51.5161 28.2212 li
51.7979 28.2085 51.9497 28.1455 51.9595 27.7642 cv
52.0771 27.7568 li
52.1245 28.7651 li
52.0078 28.7725 li
51.9492 28.4355 51.8398 28.4126 51.6147 28.4238 cv
48.8545 28.5532 li
48.8477 28.4229 li
51.2896 26.2168 li
51.2896 26.207 li
49.4146 26.2944 li
49.0771 26.312 48.9922 26.4126 48.9712 26.7617 cv
48.8545 26.7676 li
48.8042 25.7031 li
48.9214 25.6987 li
cp
51.2056 21.7334 mo
51.7842 24.3804 li
50.8633 24.5801 li
50.8369 24.4658 li
51.4653 24.2188 51.5088 23.8677 51.374 23.249 cv
51.3184 22.9976 51.2817 22.9175 51.085 22.9604 cv
50.022 23.1929 li
50.1128 23.6338 50.2832 23.8438 50.8667 23.7886 cv
50.8931 23.9077 li
49.3433 24.2451 li
49.3174 24.1265 li
49.8779 23.9458 49.9648 23.6816 49.8652 23.2285 cv
48.7563 23.4707 li
48.5542 23.5156 48.5186 23.6138 48.583 23.9131 cv
48.6816 24.3618 48.9028 24.8037 49.6587 24.9409 cv
49.687 25.0684 li
48.6934 25.0933 li
48.106 22.4111 li
48.2212 22.3862 li
48.3066 22.6421 48.3506 22.7808 48.6348 22.7188 cv
50.8545 22.2339 li
51.1567 22.1675 51.1235 21.9722 51.0913 21.7583 cv
51.2056 21.7334 li
cp
48.5371 21.7788 mo
48.0483 21.6069 47.6382 21.377 47.4146 20.8179 cv
47.0083 19.8037 47.5024 18.9692 48.3174 18.6421 cv
49.2012 18.2881 50.1323 18.6421 50.4985 19.5586 cv
50.6553 19.9492 50.5767 20.3696 50.6221 20.4839 cv
50.6694 20.6016 50.7769 20.603 50.9028 20.603 cv
50.9502 20.7207 li
49.9307 21.1309 li
49.8862 21.022 li
50.2051 20.7173 50.5679 20.1465 50.3691 19.6504 cv
50.1138 19.0137 49.3794 19.1118 48.6426 19.4053 cv
48.3823 19.5112 47.9741 19.7056 47.7598 19.9775 cv
47.52 20.2866 47.5923 20.6567 47.6465 20.7915 cv
47.7822 21.1318 48.0444 21.4058 48.5938 21.605 cv
48.5371 21.7788 li
cp
46.6289 18.8145 mo
45.8208 17.3853 li
45.9229 17.3281 li
46.0674 17.5376 46.1743 17.6865 46.4277 17.5444 cv
48.4053 16.4248 li
48.6743 16.2725 48.5737 16.0762 48.4805 15.8809 cv
48.582 15.8242 li
49.3901 17.2549 li
49.2886 17.311 li
49.1719 17.1245 49.0566 16.9312 48.7793 17.0874 cv
46.8018 18.2041 li
46.54 18.353 46.6201 18.5234 46.731 18.7578 cv
46.6289 18.8145 li
cp
45.728 16.9253 mo
45.6348 16.9976 li
45.0483 16.2334 li
45.6196 14.5674 li
45.5425 14.4663 li
44.813 15.0288 li
44.5161 15.2583 44.5679 15.3481 44.7236 15.6182 cv
44.6299 15.6904 li
43.6631 14.4336 li
43.7559 14.3623 li
43.98 14.5913 44.0483 14.6567 44.3501 14.4253 cv
45.9937 13.1611 li
46.3135 12.9146 46.2324 12.793 46.0845 12.5693 cv
46.1772 12.4976 li
47.0986 13.6953 li
47.2993 13.9551 47.876 14.7686 47.2515 15.2485 cv
46.7939 15.6011 46.3838 15.3066 46.166 15.1538 cv
45.6812 16.7183 li
45.6543 16.8218 45.6938 16.8809 45.728 16.9253 cv
cp
46.6104 13.6455 mo
45.6616 14.375 li
46.0405 14.8604 46.2705 14.9907 46.7544 14.6196 cv
47.1304 14.3281 47.1729 14.0542 46.9438 13.7559 cv
46.7856 13.5508 46.7397 13.5752 46.6104 13.6455 cv
cp
45.5059 11.9341 mo
45.2905 11.7871 45.1768 11.7529 44.9673 11.9805 cv
43.9531 13.0815 li
43.7646 13.2866 43.4331 13.5493 43.146 13.5713 cv
42.8013 13.5977 42.4414 13.3853 42.2339 13.1963 cv
42.0815 13.0562 41.7759 12.7363 41.7329 12.3325 cv
41.7051 12.0649 41.7271 11.8608 42.0703 11.4883 cv
43.1323 10.3345 li
43.3994 10.0459 43.3164 9.95459 43.1416 9.75635 cv
43.2212 9.66992 li
44.3877 10.7446 li
44.3086 10.832 li
44.0713 10.6333 43.9604 10.5376 43.6807 10.8418 cv
42.6191 11.9946 li
42.438 12.1895 41.9995 12.6685 42.4971 13.125 cv
43.1035 13.6855 43.5977 13.1631 43.8013 12.9414 cv
44.7705 11.8882 li
44.9644 11.6792 45.0308 11.5229 44.7466 11.2354 cv
44.8262 11.1494 li
45.5854 11.8491 li
45.5059 11.9341 li
cp
40.3062 11.4883 mo
38.9058 10.5664 li
38.9707 10.4688 li
39.2725 10.6343 39.3716 10.6875 39.5884 10.3589 cv
40.9463 8.2915 li
40.6621 8.12598 40.2451 7.88135 39.7544 8.45654 cv
39.6406 8.38135 li
40.1699 7.60156 li
42.5229 9.14795 li
42.0132 9.94238 li
41.8989 9.8667 li
42.2334 9.18896 41.8428 8.90234 41.582 8.70898 cv
40.2236 10.7759 li
40.0049 11.1104 40.0938 11.1787 40.3711 11.3901 cv
40.3062 11.4883 li
cp
16.3984 8.69531 mo
16.147 8.46729 15.6157 8.16846 15.1523 8.47266 cv
14.9482 8.60791 14.8101 8.86719 14.9775 9.12207 cv
15.1172 9.33447 15.2476 9.37109 15.6865 9.31934 cv
16.4497 9.22656 li
16.6274 9.20605 17.0747 9.23828 17.3555 9.66699 cv
17.582 10.0122 17.6426 10.6523 16.9204 11.1265 cv
16.5479 11.3696 16.2842 11.3535 16.1626 11.4326 cv
16.0801 11.4863 16.1069 11.5703 16.1323 11.6436 cv
16.0181 11.7183 li
15.3823 10.7485 li
15.4966 10.6743 li
15.8345 11.0186 16.353 11.3135 16.8521 10.9854 cv
17.3218 10.6768 17.0869 10.2749 17.0537 10.2241 cv
16.8809 9.96045 16.6343 9.98877 16.2993 10.0342 cv
15.9546 10.0806 li
15.0728 10.1992 14.8511 9.86133 14.7324 9.68164 cv
14.5757 9.44141 14.3472 8.82813 15.0928 8.33887 cv
15.4063 8.13281 15.6763 8.1416 15.7896 8.06689 cv
15.8794 8.00635 15.8608 7.93457 15.832 7.84912 cv
15.9492 7.77002 li
16.5083 8.62256 li
16.3984 8.69531 li
cp
15.6602 11.6958 mo
15.7373 11.7842 li
14.5991 12.793 li
14.5215 12.7041 li
14.7241 12.4937 14.7837 12.4351 14.6807 12.3198 cv
14.5977 12.2246 14.2549 12.064 14.1064 11.9946 cv
13.3159 12.6943 li
13.4414 13.0347 13.5122 13.2275 13.562 13.2856 cv
13.6807 13.4189 13.8589 13.2798 13.9844 13.1802 cv
14.062 13.2681 li
13.3486 13.9004 li
13.271 13.812 li
13.4355 13.6162 13.3789 13.4536 13.251 13.0962 cv
12.3267 10.479 li
12.4253 10.3926 li
14.8447 11.5474 li
15.3359 11.7832 15.4976 11.8535 15.6602 11.6958 cv
cp
13.2476 12.5107 mo
13.9321 11.9028 li
12.8213 11.3633 li
13.2476 12.5107 li
cp
13.1431 14.1885 mo
12.0537 15.4614 li
11.9653 15.3853 li
12.1665 15.1064 12.2324 15.0151 11.9331 14.7598 cv
10.0537 13.1499 li
9.85449 13.4121 9.55811 13.7954 10.0674 14.3545 cv
9.979 14.4585 li
9.27148 13.8335 li
11.1021 11.6938 li
11.8257 12.3013 li
11.7368 12.4043 li
11.105 11.9873 10.7734 12.3394 10.5483 12.5732 cv
12.4272 14.1812 li
12.7305 14.4409 12.8105 14.3623 13.0542 14.1133 cv
13.1431 14.1885 li
cp
11.4937 16.2075 mo
10.5889 17.5796 li
10.4907 17.5151 li
10.6113 17.2896 10.6963 17.1265 10.4536 16.9653 cv
8.55762 15.7139 li
8.29932 15.5435 8.16992 15.7236 8.03955 15.8955 cv
7.94141 15.8306 li
8.84619 14.4604 li
8.94385 14.5244 li
8.83057 14.7144 8.71094 14.9043 8.97705 15.0791 cv
10.8726 16.3315 li
11.123 16.498 11.2378 16.3481 11.396 16.1426 cv
11.4937 16.2075 li
cp
8.25146 17.1685 mo
7.92041 17.0938 7.31201 17.0981 7.06006 17.5918 cv
6.94971 17.8096 6.95801 18.1055 7.22949 18.2437 cv
7.45557 18.3584 7.58838 18.3247 7.94238 18.0635 cv
8.56104 17.6045 li
8.7041 17.4976 9.1084 17.3042 9.56494 17.5366 cv
9.93262 17.7241 10.3022 18.25 9.91016 19.019 cv
9.70801 19.4175 9.46973 19.5327 9.40381 19.6606 cv
9.35938 19.75 9.42285 19.8071 9.48193 19.8599 cv
9.41992 19.981 li
8.3877 19.4551 li
8.44873 19.332 li
8.91406 19.4648 9.51025 19.4648 9.78076 18.9316 cv
10.0361 18.4307 9.6333 18.1992 9.57861 18.1714 cv
9.29883 18.0278 9.09766 18.1733 8.83008 18.3799 cv
8.55371 18.5918 li
7.84619 19.1323 7.48682 18.9487 7.29395 18.8516 cv
7.03955 18.7212 6.53662 18.3003 6.94189 17.5054 cv
7.11182 17.1714 7.35059 17.0464 7.41162 16.9243 cv
7.46094 16.8281 7.40918 16.7739 7.33984 16.7139 cv
7.40332 16.5874 li
8.31152 17.0508 li
8.25146 17.1685 li
cp
9.05029 20.229 mo
9.16113 20.2671 li
8.86084 21.1816 li
7.1626 21.6445 li
7.12256 21.7666 li
7.99658 22.0527 li
8.35352 22.1704 8.39941 22.0762 8.53613 21.7954 cv
8.64746 21.8306 li
8.15283 23.3394 li
8.0415 23.3032 li
8.10498 22.9878 8.12061 22.8945 7.75928 22.7759 cv
5.78906 22.1284 li
5.40576 22.0024 5.35107 22.1367 5.25 22.3862 cv
5.13867 22.3486 li
5.60986 20.9126 li
5.71289 20.6006 6.05859 19.6655 6.80713 19.9126 cv
7.35645 20.0923 7.34326 20.5986 7.34082 20.8628 cv
8.90527 20.3848 li
9.00586 20.3477 9.03174 20.2822 9.05029 20.229 cv
cp
5.84375 21.3457 mo
6.98047 21.7192 li
7.16797 21.1338 7.14648 20.8672 6.56592 20.6782 cv
6.11621 20.5313 5.86426 20.6489 5.74707 21.0063 cv
5.66699 21.2524 5.71289 21.2773 5.84375 21.3457 cv
cp
4.49854 26.0864 mo
4.91357 23.4102 li
5.8457 23.5557 li
5.82813 23.6709 li
5.15283 23.6768 4.98535 23.9863 4.88916 24.6133 cv
4.84912 24.8687 4.85449 24.9546 5.05469 24.9854 cv
6.12939 25.1533 li
6.20361 24.7085 6.11963 24.4531 5.55518 24.2939 cv
5.57422 24.1733 li
7.14111 24.416 li
7.12256 24.5366 li
6.53467 24.5044 6.35938 24.7173 6.2876 25.1782 cv
7.40967 25.3511 li
7.61377 25.3828 7.68311 25.3032 7.72998 25.002 cv
7.80029 24.5479 7.75342 24.0566 7.09814 23.6553 cv
7.11816 23.5244 li
8.0542 23.8604 li
7.63428 26.5732 li
7.51709 26.5557 li
7.53076 26.2871 7.53906 26.1416 7.25146 26.0972 cv
5.00781 25.7495 li
4.70117 25.7007 4.66113 25.894 4.61426 26.105 cv
4.49854 26.0864 li
cp
4.57227 26.5386 mo
4.60352 26.7969 4.69287 26.8579 4.95508 26.9639 cv
7.7041 28.0479 li
7.70313 28.1733 li
4.88623 29.3618 li
4.604 29.4819 4.58984 29.5522 4.55615 29.7534 cv
4.43896 29.7534 li
4.44678 28.1753 li
4.56396 28.1763 li
4.58154 28.4736 4.58105 28.5796 4.75928 28.5815 cv
4.84814 28.5825 5.0459 28.4893 5.16357 28.4424 cv
6.6499 27.8354 li
5.1084 27.231 li
5.00098 27.1885 4.87939 27.1377 4.78564 27.1357 cv
4.60205 27.1348 4.58252 27.271 4.56738 27.5381 cv
4.4502 27.5381 li
4.45508 26.5386 li
4.57227 26.5386 li
cp
7.66162 29.8125 mo
7.84961 31.4448 li
7.73291 31.4575 li
7.68066 31.209 7.64111 31.0303 7.35205 31.0635 cv
5.09619 31.3237 li
4.7876 31.3594 4.8042 31.5796 4.81543 31.7959 cv
4.69873 31.8096 li
4.50977 30.1763 li
4.62646 30.1631 li
4.66064 30.3813 4.69141 30.6055 5.00928 30.5679 cv
7.26465 30.3081 li
7.56348 30.2725 7.55566 30.0845 7.54541 29.8252 cv
7.66162 29.8125 li
cp
8.46191 34.7183 mo
8.36377 34.4517 8.30176 34.3315 8.00049 34.4048 cv
5.8374 34.9268 li
5.58447 35.2578 5.58838 35.3345 5.60303 35.3921 cv
5.48828 35.4199 li
5.25684 34.457 li
6.82373 32.4043 li
6.8208 32.3965 li
5.43799 32.7285 li
5.16504 32.7954 5.02734 32.8862 5.08887 33.2617 cv
4.97559 33.2896 li
4.73926 32.3081 li
4.85303 32.2803 li
4.97266 32.5986 5.08496 32.6011 5.30322 32.5479 cv
7.99121 31.9014 li
8.02197 32.0278 li
6.03809 34.6543 li
6.04004 34.665 li
7.86523 34.2251 li
8.19385 34.1455 8.25684 34.0278 8.2124 33.6826 cv
8.32617 33.6548 li
8.57568 34.6904 li
8.46191 34.7183 li
cp
5.74609 35.8311 mo
5.87842 36.0557 5.96729 36.1367 6.25391 36.019 cv
7.63818 35.4502 li
7.89453 35.3433 8.30566 35.2461 8.57568 35.3477 cv
8.89893 35.4678 9.13721 35.812 9.24463 36.0723 cv
9.32275 36.2632 9.46436 36.6821 9.33252 37.0664 cv
9.24463 37.3218 9.13916 37.4976 8.67139 37.6904 cv
7.22119 38.2847 li
6.85645 38.4365 6.89404 38.5527 6.96826 38.8057 cv
6.85938 38.8501 li
6.25635 37.3828 li
6.36475 37.3374 li
6.49561 37.6191 6.55518 37.7529 6.93701 37.5957 cv
8.38721 37.0005 li
8.63379 36.897 9.23291 36.6519 8.97607 36.0254 cv
8.6626 35.2622 7.99414 35.5259 7.7168 35.6416 cv
6.39307 36.1851 li
6.12744 36.2944 6.00244 36.4067 6.13818 36.7876 cv
6.0293 36.8311 li
5.63721 35.877 li
5.74609 35.8311 li
cp
49.438 36.9629 mo
49.7754 36.998 50.3794 36.9194 50.5708 36.4004 cv
50.6548 36.1714 50.6123 35.8809 50.3262 35.7759 cv
50.0884 35.6875 49.9609 35.7349 49.6392 36.0371 cv
49.0786 36.5645 li
48.9487 36.6875 48.5708 36.9292 48.0903 36.75 cv
47.7031 36.6074 47.2739 36.1304 47.5732 35.3193 cv
47.7271 34.8994 47.9507 34.7573 48 34.6206 cv
48.0352 34.5293 47.9634 34.4766 47.8999 34.4341 cv
47.9473 34.3057 li
49.0342 34.707 li
48.9873 34.8359 li
48.5098 34.7593 47.9185 34.8306 47.7119 35.3896 cv
47.5171 35.9199 47.9448 36.1021 48.0015 36.1226 cv
48.2969 36.2314 48.4785 36.0645 48.7207 35.8281 cv
48.9707 35.584 li
49.6099 34.9644 49.9888 35.1045 50.1904 35.1792 cv
50.459 35.2773 51.0078 35.6377 50.6987 36.4736 cv
50.5688 36.8242 50.3477 36.98 50.2998 37.106 cv
50.2627 37.208 50.3203 37.2539 50.396 37.3071 cv
50.3481 37.439 li
49.3921 37.0869 li
49.438 36.9629 li
cp
35.1724 13.376 mo
35.1724 9.90137 li
35.1709 11.6299 li
35.1694 9.8667 li
35.1694 9.73096 35.1611 9.62256 35.1182 9.53857 cv
34.9673 9.23926 34.6631 8.86719 34.4526 8.58447 cv
34.2407 8.86621 33.9316 9.24072 33.7822 9.53857 cv
33.7388 9.62256 33.7305 9.73096 33.7305 9.8667 cv
33.7305 13.376 li
33.9502 13.376 li
33.9502 10.1343 li
33.9478 10.0547 33.9419 9.80957 33.9897 9.73584 cv
34.0654 9.61963 34.3887 9.10156 34.3887 9.10156 cv
34.4189 9.05273 34.4697 9.05176 34.501 9.10156 cv
34.501 9.10156 34.8267 9.61963 34.9028 9.73584 cv
34.9507 9.80957 34.9443 10.0586 34.9424 10.1367 cv
34.9424 13.376 li
35.1694 13.376 li
35.1709 11.6299 li
35.1724 13.376 li
cp
34.083 13.376 mo
34.5596 13.376 li
34.5596 9.44336 li
34.4448 9.26318 li
34.3486 9.4165 34.1572 9.72217 34.1016 9.80859 cv
34.0786 9.86914 34.0811 10.0723 34.083 10.1333 cv
34.083 13.376 li
cp
33.3447 8.87793 mo
33.4521 9.06543 33.5708 9.27734 33.6372 9.41455 cv
33.8101 9.09277 34.1577 8.66504 34.3789 8.37451 cv
34.4204 8.32031 34.4854 8.32031 34.5259 8.37451 cv
34.5259 8.37451 34.686 8.58643 34.8599 8.82568 cv
35.0142 9.03857 35.1865 9.28223 35.2627 9.41553 cv
35.4077 9.08936 35.6426 8.73193 35.8237 8.43115 cv
35.9375 8.2417 36.0986 8.61963 36.2319 8.8584 cv
36.2319 8.22607 li
32.668 8.22607 li
32.668 8.85205 li
32.7563 8.70605 32.8452 8.56348 32.9243 8.43115 cv
33.0415 8.23682 33.2095 8.64209 33.3447 8.87793 cv
cp
36.4185 9.18799 mo
36.4888 9.31836 36.5483 9.43262 36.5747 9.5 cv
36.625 9.62354 36.6299 9.77002 36.6299 9.90137 cv
36.6299 13.376 li
37.4614 13.376 li
37.4614 13.5605 li
37.1885 13.5605 li
37.1885 14.1426 li
37.3994 14.1421 li
37.6211 14.1421 37.3711 14.5283 37.3677 14.5371 cv
37.3418 14.5957 37.3076 14.7144 37.2563 14.7837 cv
37.2563 18.2305 li
37.3994 18.2305 li
37.5918 18.2305 37.4268 18.4907 37.4048 18.5405 cv
37.3833 18.5889 37.3359 18.7578 37.27 18.855 cv
37.2827 23.52 li
37.5044 23.52 li
37.6826 23.52 37.562 23.7231 37.4653 23.9312 cv
37.395 24.0825 37.3447 24.2163 37.2798 24.2163 cv
37.2783 29.0879 li
37.5044 29.0879 li
37.689 29.0879 37.5244 29.354 37.4756 29.4678 cv
37.4053 29.6299 37.3491 29.7832 37.2798 29.7832 cv
37.2783 33.3975 li
37.4385 33.3975 li
37.6548 33.3975 37.4365 33.9229 37.2783 34.0605 cv
37.2783 40.1899 li
51.3701 40.1899 li
53.2114 36.623 54.2515 32.5771 54.2515 28.2939 cv
54.2515 13.9263 42.6289 2.30469 28.2607 2.30469 cv
13.9414 2.30469 2.27002 13.9263 2.27002 28.2939 cv
2.27002 32.5771 3.31494 36.623 5.16162 40.1899 cv
19.209 40.1899 li
19.209 34.0938 li
19.1841 34.0938 19.1333 34.0605 19.1235 34.0381 cv
18.9702 33.6914 18.7715 33.3975 18.9829 33.3975 cv
19.209 33.3975 li
19.209 29.7852 li
19.1841 29.7852 19.1333 29.7534 19.1235 29.731 cv
18.9702 29.3843 18.7715 29.0898 18.9829 29.0898 cv
19.209 29.0898 li
19.209 24.2393 li
19.1841 24.2393 19.1333 24.2065 19.1235 24.1841 cv
18.9702 23.8369 18.7715 23.5425 18.9829 23.5425 cv
19.2559 23.5425 li
19.2617 18.9121 li
19.1553 18.8354 19.0679 18.5229 19.0503 18.4834 cv
19.0225 18.4189 18.9121 18.2329 19.0825 18.2329 cv
19.2422 18.2329 li
19.3232 18.2329 li
19.3169 14.8403 li
19.3076 14.8403 li
19.1978 14.8403 19.1216 14.5566 19.1196 14.5503 cv
19.1182 14.5498 18.8569 14.1445 19.0825 14.1445 cv
19.3267 14.1445 li
19.3379 13.5605 li
19.0513 13.5605 li
19.0513 13.376 li
19.8833 13.376 li
19.8833 9.90137 li
19.8833 9.77002 19.8877 9.62354 19.9375 9.5 cv
19.9795 9.39502 20.0327 9.28516 20.0918 9.17578 cv
20.0918 8.04053 li
20.4463 8.04053 li
20.4463 7.67285 li
20.2432 7.67285 li
20.2432 7.4873 li
20.4463 7.4873 li
20.4463 7.18164 li
20.4463 6.77637 20.6387 6.1167 21.0654 5.53076 cv
21.332 5.1626 21.5908 4.86035 21.9551 4.59912 cv
21.9551 4.24609 li
21.8643 4.20605 21.8008 4.11523 21.8008 4.00879 cv
21.8008 3.90381 21.8643 3.81299 21.9551 3.77295 cv
21.9551 3.54932 li
22.1641 3.54932 li
22.1641 3.77295 li
22.2544 3.81299 22.3184 3.90381 22.3184 4.00879 cv
22.3184 4.11523 22.2544 4.20605 22.1641 4.24609 cv
22.1641 4.59473 li
22.5298 4.85742 22.7949 5.16162 23.0635 5.53076 cv
23.4893 6.1167 23.6821 6.77637 23.6821 7.18164 cv
23.6821 7.4873 li
23.876 7.4873 li
23.876 7.67285 li
23.6821 7.67285 li
23.6821 8.04053 li
24.0273 8.04053 li
24.0273 9.18799 li
24.0986 9.31836 24.1577 9.43262 24.1846 9.5 cv
24.2344 9.62354 24.2393 9.77002 24.2393 9.90137 cv
24.2393 13.376 li
25.0713 13.376 li
25.0713 13.5605 li
24.7979 13.5605 li
24.7979 14.1426 li
25.0088 14.1421 li
25.2246 14.1421 24.9937 14.5005 24.9849 14.5186 cv
24.959 14.5771 24.9214 14.709 24.8662 14.7837 cv
24.8662 18.2305 li
25.0088 18.2305 li
25.2295 18.2305 24.9819 18.6152 24.9771 18.624 cv
24.9541 18.6777 24.9229 18.7847 24.8774 18.855 cv
24.8843 18.855 li
24.8916 23.5405 li
25.0454 23.5405 li
25.1841 23.5405 25.1348 23.6841 25.0713 23.8193 cv
25.7393 23.8193 li
25.7261 23.8062 li
26.3892 23.1865 27.0146 22.5049 27.5723 21.7778 cv
27.5723 19.6094 li
27.3262 19.6094 li
27.3262 19.6094 27.5093 19.1216 27.6685 18.7871 cv
27.8286 18.0278 28.0693 16.7319 28.0986 15.8428 cv
28.1152 15.3394 28.1504 12.6665 28.1577 12.0962 cv
28.0596 12.0596 27.9893 11.9644 27.9893 11.8535 cv
27.9893 11.7104 28.105 11.5952 28.248 11.5952 cv
28.3911 11.5952 28.5068 11.7104 28.5068 11.8535 cv
28.5068 11.9668 28.4326 12.064 28.3301 12.0981 cv
28.3374 12.6753 28.373 15.3408 28.3887 15.8428 cv
28.418 16.7319 28.6587 18.0278 28.8188 18.7871 cv
28.9785 19.1216 29.1616 19.6094 29.1616 19.6094 cv
28.9155 19.6094 li
28.9155 21.7729 li
28.9434 21.8091 28.9722 21.8467 29.0015 21.8843 cv
29.4199 22.4136 30.0225 23.1162 30.7617 23.8062 cv
30.7485 23.8193 li
31.4194 23.8193 li
31.3389 23.6426 31.3071 23.5229 31.4419 23.5229 cv
31.647 23.5229 li
31.6523 18.9121 li
31.5698 18.8535 31.5161 18.6528 31.5122 18.6455 cv
31.4517 18.5063 31.2729 18.2329 31.4731 18.2329 cv
31.7144 18.2329 li
31.707 14.8403 li
31.6982 14.8403 li
31.5923 14.8403 31.5239 14.5825 31.5176 14.5684 cv
31.4536 14.4238 31.2715 14.1445 31.4731 14.1445 cv
31.7168 14.1445 li
31.728 13.5605 li
31.4419 13.5605 li
31.4419 13.376 li
32.2739 13.376 li
32.2739 9.90137 li
32.2739 9.77002 32.2778 9.62354 32.3286 9.5 cv
32.3701 9.39502 32.4238 9.28516 32.4824 9.17578 cv
32.4824 8.04053 li
32.8364 8.04053 li
32.8364 7.67285 li
32.6338 7.67285 li
32.6338 7.4873 li
32.8364 7.4873 li
32.8364 7.18164 li
32.8364 6.77637 33.0288 6.1167 33.4556 5.53076 cv
33.7231 5.1626 33.9814 4.86035 34.3457 4.59912 cv
34.3457 4.24609 li
34.2544 4.20605 34.1919 4.11523 34.1919 4.00879 cv
34.1919 3.90381 34.2544 3.81299 34.3457 3.77295 cv
34.3457 3.54932 li
34.5542 3.54932 li
34.5542 3.77295 li
34.6455 3.81299 34.7085 3.90381 34.7085 4.00879 cv
34.7085 4.11523 34.6455 4.20605 34.5542 4.24609 cv
34.5542 4.59473 li
34.9209 4.85742 35.1855 5.16064 35.4536 5.53076 cv
35.8804 6.1167 36.0728 6.77637 36.0728 7.18164 cv
36.0728 7.4873 li
36.2661 7.4873 li
36.2661 7.67285 li
36.0728 7.67285 li
36.0728 8.04053 li
36.4185 8.04053 li
36.4185 9.18799 li
cp
33.022 8.04053 mo
33.7554 8.04053 li
33.7554 7.67285 li
33.022 7.67285 li
33.022 8.04053 li
cp
33.9404 8.04053 mo
34.9644 8.04053 li
34.9644 7.67285 li
33.9404 7.67285 li
33.9404 8.04053 li
cp
34.9644 7.4873 mo
34.9644 7.17773 li
34.9644 7.17773 34.9658 6.99414 34.9546 6.74902 cv
34.9434 6.50439 34.9194 6.19824 34.8667 5.94873 cv
34.7939 5.60254 34.6392 5.23145 34.4526 4.8833 cv
34.2656 5.23145 34.1108 5.60254 34.0381 5.94873 cv
33.9336 6.44629 33.9404 7.17627 33.9404 7.17773 cv
33.9404 7.4873 li
34.9644 7.4873 li
cp
35.1494 8.04053 mo
35.8872 8.04053 li
35.8872 7.67285 li
35.1494 7.67285 li
35.1494 8.04053 li
cp
35.8872 7.4873 mo
35.8872 7.18164 li
35.8872 6.82227 35.7104 6.19922 35.3042 5.63965 cv
35.127 5.39697 34.9253 5.14795 34.6895 4.93799 cv
34.8486 5.25439 34.981 5.58984 35.0488 5.90967 cv
35.1343 6.31885 35.1543 6.76074 35.1494 7.17871 cv
35.1494 7.4873 li
35.8872 7.4873 li
cp
33.5454 9.90137 mo
33.5454 9.76709 33.5391 9.6543 33.5044 9.56885 cv
33.3784 9.25488 33.1753 8.95313 33.0034 8.66162 cv
32.8306 8.95313 32.6255 9.25488 32.5005 9.56885 cv
32.4653 9.6543 32.459 9.76709 32.459 9.90137 cv
32.459 13.376 li
32.6299 13.376 li
32.6299 10.1665 li
32.6289 10.0938 32.6235 9.85059 32.6563 9.77881 cv
32.7095 9.66406 32.937 9.15186 32.937 9.15186 cv
32.9663 9.08594 33.0293 9.08594 33.0591 9.15186 cv
33.0591 9.15186 33.2886 9.66406 33.3418 9.77881 cv
33.3745 9.85156 33.3696 10.0967 33.3682 10.168 cv
33.3682 13.376 li
33.5454 13.376 li
33.5454 9.90137 li
cp
32.9297 13.376 mo
33.2354 13.376 li
33.2354 10.1655 li
33.2354 10.1655 33.2368 10.0913 33.2349 10.0103 cv
33.2339 9.9541 33.2354 9.89063 33.2212 9.83545 cv
33.1846 9.75732 33.0708 9.50293 32.9985 9.34229 cv
32.9297 9.49756 li
32.9297 13.376 li
cp
35.3584 13.376 mo
36.1338 13.376 li
36.1338 10.1655 li
36.1338 10.1655 36.1362 10.0913 36.1338 10.0103 cv
36.1328 9.9541 36.1343 9.89063 36.1196 9.83545 cv
36.0664 9.71973 35.8633 9.29395 35.8633 9.29395 cv
35.8252 9.21436 35.9453 9.15625 35.9829 9.23633 cv
35.9829 9.23633 36.187 9.66406 36.2407 9.77881 cv
36.2729 9.85156 36.269 10.0967 36.2671 10.168 cv
36.2671 13.376 li
36.4443 13.376 li
36.4443 9.90137 li
36.4443 9.76709 36.4385 9.6543 36.4028 9.56885 cv
36.3589 9.45898 36.3052 9.35059 36.2471 9.24365 cv
36.2319 9.24365 li
36.2319 9.21582 li
36.1279 9.02686 36.0098 8.84229 35.9028 8.66162 cv
35.7295 8.95313 35.5249 9.25488 35.3989 9.56885 cv
35.3643 9.6543 35.3584 9.76709 35.3584 9.90137 cv
35.3584 13.376 li
cp
20.6318 8.04053 mo
21.3643 8.04053 li
21.3643 7.67285 li
20.6318 7.67285 li
20.6318 8.04053 li
cp
21.5503 8.04053 mo
22.5742 8.04053 li
22.5742 7.67285 li
21.5503 7.67285 li
21.5503 8.04053 li
cp
22.5742 7.4873 mo
22.5742 7.17773 li
22.5742 7.17773 22.5757 6.99414 22.5645 6.74902 cv
22.5532 6.50439 22.5288 6.19824 22.4771 5.94873 cv
22.4033 5.60254 22.248 5.23145 22.0615 4.8833 cv
21.8755 5.23145 21.7197 5.60254 21.6475 5.94873 cv
21.5435 6.44629 21.5503 7.17627 21.5503 7.17773 cv
21.5503 7.4873 li
22.5742 7.4873 li
cp
22.7593 8.04053 mo
23.4971 8.04053 li
23.4971 7.67285 li
22.7593 7.67285 li
22.7593 8.04053 li
cp
23.4971 7.4873 mo
23.4971 7.18164 li
23.4971 6.82227 23.3203 6.19922 22.9136 5.63965 cv
22.7368 5.39697 22.5352 5.14795 22.2988 4.93799 cv
22.458 5.25439 22.5903 5.58984 22.6577 5.90967 cv
22.7437 6.31885 22.7632 6.76074 22.7593 7.17871 cv
22.7593 7.4873 li
23.4971 7.4873 li
cp
20.2773 8.85205 mo
20.3652 8.70605 20.4551 8.56348 20.5342 8.43115 cv
20.6509 8.23682 20.8184 8.64209 20.9536 8.87793 cv
21.0615 9.06543 21.1797 9.27734 21.2471 9.41455 cv
21.4194 9.09277 21.7676 8.66504 21.9878 8.37451 cv
22.0298 8.32031 22.0947 8.32031 22.1362 8.37451 cv
22.1362 8.37451 22.2954 8.58643 22.4692 8.82568 cv
22.623 9.03857 22.7959 9.28223 22.8721 9.41553 cv
23.0171 9.08936 23.252 8.73193 23.4326 8.43115 cv
23.5469 8.2417 23.7085 8.61963 23.8418 8.8584 cv
23.8418 8.22607 li
20.2773 8.22607 li
20.2773 8.85205 li
cp
22.9673 13.376 mo
23.7437 13.376 li
23.7437 10.1655 li
23.7437 10.1655 23.7451 10.0913 23.7437 10.0103 cv
23.7422 9.9541 23.7437 9.89063 23.7295 9.83545 cv
23.6758 9.71973 23.4727 9.29395 23.4727 9.29395 cv
23.4346 9.21436 23.5547 9.15625 23.5933 9.23633 cv
23.5933 9.23633 23.7969 9.66406 23.8501 9.77881 cv
23.8828 9.85156 23.8779 10.0967 23.8765 10.168 cv
23.8765 13.376 li
24.0537 13.376 li
24.0537 9.90137 li
24.0537 9.76709 24.0474 9.6543 24.0127 9.56885 cv
23.9683 9.45898 23.915 9.35059 23.8564 9.24365 cv
23.8418 9.24365 li
23.8418 9.21582 li
23.7373 9.02686 23.6187 8.84229 23.5117 8.66162 cv
23.3389 8.95313 23.1338 9.25488 23.0088 9.56885 cv
22.9731 9.6543 22.9673 9.76709 22.9673 9.90137 cv
22.9673 13.376 li
cp
21.3403 13.376 mo
21.5596 13.376 li
21.5596 10.1343 li
21.5566 10.0547 21.5518 9.80957 21.5991 9.73584 cv
21.6748 9.61963 21.9976 9.10156 21.9976 9.10156 cv
22.0288 9.05273 22.0791 9.05176 22.1104 9.10156 cv
22.1104 9.10156 22.4365 9.61963 22.5122 9.73584 cv
22.5596 9.80957 22.5547 10.0586 22.5518 10.1367 cv
22.5518 13.376 li
22.7783 13.376 li
22.7783 9.8667 li
22.7783 9.73096 22.7705 9.62256 22.728 9.53857 cv
22.5767 9.23926 22.2729 8.86719 22.0615 8.58447 cv
21.8501 8.86621 21.5415 9.24072 21.3911 9.53857 cv
21.3481 9.62256 21.3403 9.73096 21.3403 9.8667 cv
21.3403 13.376 li
cp
21.6924 13.376 mo
22.1689 13.376 li
22.1689 9.44336 li
22.0542 9.26318 li
21.958 9.4165 21.7671 9.72217 21.7109 9.80859 cv
21.688 9.86914 21.6904 10.0723 21.6924 10.1333 cv
21.6924 13.376 li
cp
20.0679 13.376 mo
20.2393 13.376 li
20.2393 10.1665 li
20.2378 10.0938 20.2334 9.85059 20.2656 9.77881 cv
20.3193 9.66406 20.5464 9.15186 20.5464 9.15186 cv
20.5752 9.08594 20.6387 9.08594 20.6685 9.15186 cv
20.6685 9.15186 20.8979 9.66406 20.9512 9.77881 cv
20.9839 9.85156 20.9795 10.0967 20.978 10.168 cv
20.978 13.376 li
21.1548 13.376 li
21.1548 9.90137 li
21.1548 9.76709 21.1479 9.6543 21.1133 9.56885 cv
20.9888 9.25488 20.7856 8.95313 20.6133 8.66162 cv
20.4399 8.95313 20.2349 9.25488 20.1094 9.56885 cv
20.0747 9.6543 20.0679 9.76709 20.0679 9.90137 cv
20.0679 13.376 li
cp
20.5386 13.376 mo
20.8447 13.376 li
20.8447 10.1655 li
20.8447 10.1655 20.8457 10.0913 20.8447 10.0103 cv
20.8433 9.9541 20.8447 9.89063 20.8301 9.83545 cv
20.7949 9.75732 20.6802 9.50293 20.6074 9.34229 cv
20.5386 9.49756 li
20.5386 13.376 li
cp
19.5977 13.5605 mo
19.5864 14.1445 li
24.5371 14.1426 li
24.5371 13.5605 li
19.5977 13.5605 li
cp
19.5771 14.8403 mo
19.584 18.2329 li
20.3008 18.2319 li
20.2935 14.8403 li
19.5771 14.8403 li
cp
20.5537 14.8403 mo
20.5605 18.2319 li
23.582 18.2314 li
23.582 14.8384 li
20.5537 14.8403 li
cp
23.8418 14.8384 mo
23.8418 18.2314 li
24.606 18.2305 li
24.606 14.8384 li
23.8418 14.8384 li
cp
31.9883 13.5605 mo
31.9771 14.1445 li
36.9282 14.1426 li
36.9282 13.5605 li
31.9883 13.5605 li
cp
35.9722 18.2314 mo
35.9722 14.8384 li
32.9443 14.8403 li
32.9512 18.2319 li
35.9722 18.2314 li
cp
36.2329 14.8384 mo
36.2329 18.2314 li
36.9966 18.2305 li
36.9966 14.8384 li
36.2329 14.8384 li
cp
31.9683 14.8403 mo
31.9746 18.2329 li
32.6904 18.2319 li
32.6841 14.8403 li
31.9683 14.8403 li
cp
31.9121 18.9292 mo
31.9067 23.5229 li
32.6226 23.5229 li
32.6157 18.9292 li
31.9121 18.9292 li
cp
32.876 18.9282 mo
32.8828 23.522 li
36.0313 23.521 li
36.0313 18.9272 li
32.876 18.9282 li
cp
36.2915 18.9272 mo
36.2915 23.521 li
37.0225 23.521 li
37.0151 18.9272 li
36.2915 18.9272 li
cp
19.522 18.9292 mo
19.5156 23.5425 li
20.2324 23.5425 li
20.2251 18.9292 li
19.522 18.9292 li
cp
20.4854 18.9282 mo
20.4927 23.5425 li
23.6406 23.5405 li
23.6406 18.9272 li
20.4854 18.9282 li
cp
23.9009 18.9272 mo
23.9009 23.5405 li
24.6318 23.5405 li
24.6245 18.9272 li
23.9009 18.9272 li
cp
28.73 19.6094 mo
28.2441 19.6094 li
27.7578 19.6094 li
27.7578 21.5322 li
27.9268 21.3027 28.0894 21.0693 28.2441 20.8325 cv
28.2441 20.8325 28.4463 21.1436 28.73 21.5273 cv
28.73 19.6094 li
cp
26.0903 23.8193 mo
30.397 23.8193 li
29.604 23.0557 28.873 22.2046 28.2441 21.3022 cv
27.6147 22.2046 26.8843 23.0557 26.0903 23.8193 cv
cp
31.6333 23.8193 mo
31.6509 23.8193 li
31.6509 23.8604 li
31.7271 24.0332 li
37.2188 24.0313 li
37.3623 23.7065 li
31.584 23.709 li
31.6333 23.8193 li
cp
31.5083 24.0039 mo
24.9834 24.0039 li
24.9429 24.0898 24.9038 24.1699 24.8662 24.21 cv
24.8662 24.3521 li
31.6211 24.3521 li
31.6211 24.2002 li
31.6035 24.1895 31.5874 24.1753 31.582 24.1636 cv
31.5586 24.1094 31.5322 24.0557 31.5083 24.0039 cv
cp
31.9434 24.2188 mo
31.9434 26.3447 li
32.1265 26.3447 li
32.2993 26.3447 32.1685 26.5771 32.1016 26.7285 cv
32.0459 26.853 31.9956 26.9756 31.9434 27.021 cv
31.9434 29.0898 li
32.5771 29.0898 li
32.5771 24.2188 li
31.9434 24.2188 li
cp
32.8999 24.2178 mo
32.8999 29.0889 li
36.0005 29.0889 li
36.0005 24.2168 li
32.8999 24.2178 li
cp
36.3223 24.2168 mo
36.3223 29.0879 li
36.9565 29.0879 li
36.9565 24.2163 li
36.3223 24.2168 li
cp
24.8662 25.3789 mo
31.6211 25.3789 li
31.6211 24.999 li
24.8662 24.999 li
24.8662 25.3789 li
cp
31.6211 25.5122 mo
24.8662 25.5122 li
24.8662 25.8687 li
31.6211 25.8687 li
31.6211 25.5122 li
cp
24.8662 24.8652 mo
31.6211 24.8652 li
31.6211 24.4854 li
24.8662 24.4854 li
24.8662 24.8652 li
cp
19.5317 24.2383 mo
19.5317 29.0898 li
20.165 29.0898 li
20.165 24.2383 li
19.5317 24.2383 li
cp
20.4873 24.2383 mo
20.4873 29.0889 li
23.5874 29.0889 li
23.5874 24.2358 li
20.4873 24.2383 li
cp
23.9102 24.2358 mo
23.9102 29.0879 li
24.5439 29.0879 li
24.5439 27.0278 li
24.5225 27.0161 24.501 26.9985 24.4951 26.9854 cv
24.3423 26.6392 24.1436 26.3447 24.3545 26.3447 cv
24.5439 26.3447 li
24.5439 24.2358 li
23.9102 24.2358 li
cp
24.8662 26.002 mo
24.8662 26.3447 li
31.6211 26.3447 li
31.6211 26.002 li
24.8662 26.002 li
cp
24.8662 27.0405 mo
24.8662 29.0879 li
25.0454 29.0879 li
25.2207 29.083 25.0903 29.2959 25.0156 29.4688 cv
24.9688 29.5981 24.9106 29.7021 24.8662 29.7515 cv
24.8662 33.3975 li
31.6211 33.3975 li
31.6211 29.7681 li
31.6035 29.7563 31.5874 29.7427 31.582 29.731 cv
31.4292 29.3843 31.2305 29.0898 31.4419 29.0898 cv
31.6211 29.0898 li
31.6211 27.0405 li
24.8662 27.0405 li
cp
36.0005 33.3975 mo
36.0005 29.7832 li
32.8999 29.7852 li
32.8999 33.3975 li
36.0005 33.3975 li
cp
36.3223 29.7832 mo
36.3223 33.3975 li
36.9565 33.3975 li
36.9565 29.7832 li
36.3223 29.7832 li
cp
31.9434 29.7852 mo
31.9434 33.3975 li
32.5771 33.3975 li
32.5771 29.7852 li
31.9434 29.7852 li
cp
19.5317 29.7852 mo
19.5317 33.3975 li
20.165 33.3975 li
20.165 29.7852 li
19.5317 29.7852 li
cp
20.4873 29.7852 mo
20.4873 33.3975 li
23.5874 33.3975 li
23.5874 29.7832 li
20.4873 29.7852 li
cp
23.9102 29.7832 mo
23.9102 33.3975 li
24.5439 33.3975 li
24.5439 29.7832 li
23.9102 29.7832 li
cp
32.5771 40.1899 mo
32.5771 34.0938 li
31.9434 34.0938 li
31.9434 40.1899 li
32.5771 40.1899 li
cp
32.8999 34.0938 mo
32.8999 40.1899 li
36.0005 40.1899 li
36.0005 34.0938 li
32.8999 34.0938 li
cp
36.3223 34.0938 mo
36.3223 40.1899 li
36.9565 40.1899 li
36.9565 34.0938 li
36.3223 34.0938 li
cp
19.5317 34.0938 mo
19.5317 40.1899 li
20.165 40.1899 li
20.165 34.0938 li
19.5317 34.0938 li
cp
20.4873 34.0938 mo
20.4873 40.1899 li
23.5874 40.1899 li
23.5874 34.0938 li
20.4873 34.0938 li
cp
23.9102 34.0938 mo
23.9102 40.1899 li
24.5439 40.1899 li
24.5439 34.0938 li
23.9102 34.0938 li
cp
24.8662 34.0938 mo
24.8662 40.1899 li
31.6211 40.1899 li
31.6211 34.0938 li
24.8662 34.0938 li
cp
26.0503 49.001 mo
26.0503 49.0117 li
26.2134 49.1909 26.4546 49.3496 26.6475 49.4414 cv
26.7339 49.3291 26.8716 49.2783 27.0239 49.2676 cv
26.8594 48.9546 26.791 48.5884 26.894 48.2432 cv
26.6357 48.1836 26.3755 48.0776 26.1641 47.9102 cv
26.0015 48.1606 25.8657 48.4331 25.8657 48.6401 cv
25.8657 48.7583 25.936 48.8833 26.041 49.001 cv
26.0503 49.001 li
cp
27.0771 48.2783 mo
26.9326 48.7319 27.166 49.1553 27.2427 49.2773 cv
27.4214 49.3022 27.5962 49.3667 27.71 49.4395 cv
27.71 49.3315 li
27.6343 49.2598 27.5869 49.1587 27.5869 49.0459 cv
27.5869 48.8291 27.7617 48.6543 27.9775 48.6543 cv
28.1938 48.6543 28.3691 48.8291 28.3691 49.0459 cv
28.3691 49.1646 28.3164 49.2705 28.2339 49.3413 cv
28.2339 49.561 li
28.8672 49.5601 li
28.8853 49.5127 28.9258 49.4385 29.0103 49.3853 cv
29.0786 49.3423 29.1465 49.3086 29.2183 49.2871 cv
29.228 49.2715 29.2417 49.249 29.2578 49.2207 cv
29.415 48.9404 29.4897 48.5991 29.3911 48.2832 cv
29.1167 48.3262 28.8408 48.3208 28.6123 48.2559 cv
28.5513 48.2397 28.4771 48.2114 28.4214 48.1675 cv
28.3687 48.1929 28.3101 48.2085 28.248 48.2085 cv
28.1841 48.2085 28.124 48.1919 28.0708 48.1655 cv
27.8896 48.3096 27.4614 48.3105 27.3369 48.3047 cv
27.2534 48.3003 27.166 48.293 27.0771 48.2783 cv
cp
27.8774 49.2549 mo
27.8823 49.7339 li
27.5366 49.7339 li
27.5557 49.8105 27.6006 49.8853 27.6416 49.9487 cv
27.8823 49.9487 li
27.8823 50.2031 li
28.062 50.2031 li
28.062 49.9487 li
28.7651 49.9487 li
28.7593 49.938 li
28.7896 49.9214 28.9351 49.8262 28.9351 49.791 cv
28.936 49.7759 28.937 49.749 28.9282 49.7329 cv
28.062 49.7339 li
28.062 49.4287 li
28.0566 49.2441 li
28.1362 49.2134 28.1919 49.1362 28.1919 49.0459 cv
28.1919 48.9272 28.0957 48.832 27.9775 48.832 cv
27.8599 48.832 27.7637 48.9272 27.7637 49.0459 cv
27.7637 49.1274 27.8096 49.1982 27.8774 49.2344 cv
27.8774 49.2549 li
cp
28.3354 48.0122 mo
28.3428 48.0083 li
28.4131 47.9731 28.4619 47.9004 28.4619 47.8164 cv
28.4619 47.6978 28.3657 47.6021 28.248 47.6021 cv
28.1299 47.6021 28.0337 47.6978 28.0337 47.8164 cv
28.0337 47.9341 28.1299 48.0303 28.248 48.0303 cv
28.2788 48.0303 28.3086 48.0239 28.3354 48.0122 cv
cp
28.5649 48.0454 mo
28.7031 48.1177 29.0649 48.123 29.1421 48.1187 cv
29.5029 48.1025 29.9219 47.9956 30.2158 47.7583 cv
30.0674 47.5479 29.9077 47.3545 29.7925 47.2261 cv
29.4268 47.1577 li
29.3267 47.3232 29.0249 47.6255 28.6245 47.7085 cv
28.6343 47.7432 28.6387 47.7788 28.6387 47.8164 cv
28.6387 47.9014 28.6118 47.981 28.5649 48.0454 cv
cp
29.2275 47.1201 mo
28.8501 47.0498 li
28.481 47.3047 28.0073 47.291 27.6475 47.0474 cv
27.2354 47.124 li
27.3516 47.27 27.6245 47.5098 27.9683 47.542 cv
28.0396 47.4688 28.1387 47.4253 28.248 47.4253 cv
28.355 47.4253 28.4521 47.4678 28.5234 47.5381 cv
28.855 47.4946 29.1162 47.2612 29.2275 47.1201 cv
cp
29.0181 46.8926 mo
29.8872 47.0552 li
29.8872 47.0552 30.1289 47.3164 30.3501 47.6274 cv
30.3779 47.6665 30.4067 47.708 30.4351 47.7505 cv
30.4326 45.2295 li
30.4497 44.2451 29.9097 43.2852 28.7778 43.2852 cv
28.6938 43.2852 li
28.6704 43.0488 28.582 42.6719 28.2441 42.6719 cv
27.9136 42.6719 27.8198 43.0283 27.7935 43.2852 cv
27.7095 43.2852 li
26.5776 43.2852 26.0381 44.2451 26.0547 45.2295 cv
26.0527 47.7407 li
26.2329 47.4707 26.4429 47.2192 26.5952 47.0552 cv
27.4683 46.8921 li
27.3765 46.8135 li
27.3047 46.7539 27.3403 46.6479 27.3696 46.5781 cv
27.3735 46.5684 li
27.1836 46.5898 27.0278 46.5005 27.0923 46.2788 cv
27.1113 46.2446 27.1289 46.2026 27.1025 46.1689 cv
26.8672 46.0024 26.8989 45.7705 27.1191 45.6528 cv
27.2012 45.6128 27.1787 45.5527 27.1445 45.4932 cv
27.1382 45.3682 27.1865 45.2427 27.251 45.1367 cv
26.9482 43.7319 li
26.9482 43.7319 27.0366 43.689 27.0776 43.6748 cv
27.2759 43.6079 27.499 43.6079 27.6401 43.7969 cv
27.8086 44.2168 27.5532 44.2964 27.6294 44.4985 cv
27.7222 44.6587 28.0176 44.7095 28 44.4585 cv
28.0278 44.3638 27.8867 44.2666 27.8286 44.2021 cv
28.2471 43.6758 li
28.6611 44.2021 li
28.604 44.2666 28.4624 44.3638 28.4902 44.4585 cv
28.4727 44.7095 28.7681 44.6587 28.8604 44.4985 cv
28.9375 44.2964 28.6816 44.2178 28.8506 43.7969 cv
29.0303 43.5542 29.3184 43.624 29.542 43.7319 cv
29.2148 45.2339 li
29.2422 45.29 29.2739 45.3711 29.2744 45.4468 cv
29.2744 45.4683 li
29.2744 45.4683 29.2607 45.4951 29.2568 45.5049 cv
29.2383 45.5615 29.2476 45.6021 29.3086 45.6294 cv
29.3086 45.6294 29.3359 45.6411 29.3672 45.6646 cv
29.5562 45.7988 29.5503 45.9897 29.3535 46.1426 cv
29.3296 46.1777 29.3511 46.2207 29.3711 46.2524 cv
29.3711 46.2524 29.3823 46.2832 29.3857 46.3135 cv
29.4092 46.4961 29.2705 46.5737 29.105 46.5508 cv
29.1113 46.562 li
29.144 46.6304 29.1855 46.7334 29.1191 46.7974 cv
29.0181 46.8926 li
cp
25.8667 53.7598 mo
25.8682 50.2793 li
25.6284 50.2759 25.436 50.0806 25.436 49.8398 cv
25.436 49.6011 25.626 49.4067 25.8638 49.4004 cv
25.8647 49.0796 li
25.7544 48.9448 25.6807 48.7954 25.6807 48.6401 cv
25.6807 48.4668 25.7554 48.2598 25.8667 48.0498 cv
25.8696 45.2305 li
25.8525 44.2129 26.4082 43.145 27.6309 43.1016 cv
27.6362 43.0757 li
27.7046 42.7769 27.8896 42.4863 28.2441 42.4863 cv
28.5977 42.4863 28.7837 42.7769 28.8516 43.0757 cv
28.8569 43.1016 li
30.0796 43.145 30.6348 44.2129 30.6187 45.2305 cv
30.6206 48.0596 li
30.7261 48.2588 30.8022 48.4629 30.8022 48.6401 cv
30.8022 48.7944 30.729 48.9419 30.6206 49.0762 cv
30.6206 49.5581 li
31.3867 49.5562 32.1934 49.5259 32.4932 49.8271 cv
32.3428 49.9419 32.1636 50.0884 31.1538 50.1206 cv
30.6206 50.1206 li
30.6221 53.7529 li
30.7197 53.8193 30.9175 53.9521 31.144 54.126 cv
38.5742 53.3047 45.0557 49.3491 49.2471 43.6201 cv
49.0103 43.2031 48.5908 42.8921 47.812 42.8921 cv
46.1899 42.8921 46.0708 44.3647 46.0537 45.3354 cv
44.9355 45.3354 li
44.916 44.2021 44.7896 42.8921 43.1802 42.8921 cv
41.5581 42.8921 41.438 44.3613 41.4204 45.332 cv
40.3042 45.3354 li
40.2847 44.2021 40.1587 42.8921 38.5483 42.8921 cv
36.9268 42.8921 36.8066 44.3613 36.7891 45.332 cv
35.6353 45.3354 li
35.6152 44.2012 35.4883 42.8921 33.8794 42.8921 cv
32.2568 42.8921 32.1411 44.3638 32.124 45.3345 cv
30.9668 45.3345 li
30.9668 45.2305 li
30.9668 43.9741 30.2002 42.7627 29.1138 42.7627 cv
29.0313 42.7627 li
29.0313 42.7627 29.0054 42.6484 28.9854 42.5996 cv
28.8589 42.29 28.585 42.1333 28.2441 42.1333 cv
27.813 42.1333 27.5557 42.3838 27.4526 42.7627 cv
27.3735 42.7627 li
26.2876 42.7627 25.521 43.9741 25.521 45.2305 cv
25.521 45.3345 li
24.3652 45.3345 li
24.3486 44.3638 24.2305 42.8921 22.6089 42.8921 cv
20.9995 42.8921 20.8721 44.2012 20.8525 45.3354 cv
19.6963 45.3345 li
19.6792 44.3638 19.561 42.8921 17.939 42.8921 cv
16.3291 42.8921 16.2031 44.2021 16.1836 45.3354 cv
15.0649 45.3345 li
15.0479 44.3638 14.9292 42.8921 13.3071 42.8921 cv
11.6978 42.8921 11.5723 44.2021 11.5522 45.3354 cv
10.4346 45.3345 li
10.418 44.3638 10.2983 42.8921 8.67578 42.8921 cv
7.91943 42.8921 7.50293 43.186 7.2627 43.584 cv
11.4565 49.3247 17.9429 53.2939 25.3569 54.123 cv
25.5796 53.9531 25.7725 53.8232 25.8667 53.7598 cv
cp
26.0532 50.2412 mo
26.0527 53.707 li
26.189 53.707 li
26.1841 53.4424 26.1704 52.6338 26.1934 52.0635 cv
26.2568 51.5654 26.1382 50.6436 26.5405 50.2705 cv
26.6226 50.1948 26.7095 50.1465 26.7988 50.1206 cv
26.2139 50.1206 li
26.1704 50.1724 26.1157 50.2139 26.0532 50.2412 cv
cp
26.0493 49.4365 mo
26.1138 49.4648 26.1704 49.5073 26.2144 49.561 cv
26.4746 49.561 li
26.3433 49.4897 26.188 49.3896 26.0498 49.2695 cv
26.0493 49.4365 li
cp
26.1084 49.9487 mo
26.2056 49.9487 li
26.6523 49.9487 li
26.6143 49.8838 26.5898 49.8086 26.5815 49.7339 cv
26.2095 49.7339 li
26.2021 49.7358 li
26.1147 49.7358 li
26.0752 49.6436 25.9824 49.5786 25.875 49.5786 cv
25.7305 49.5786 25.6138 49.6963 25.6138 49.8398 cv
25.6138 49.9844 25.7305 50.1011 25.875 50.1011 cv
25.9756 50.1011 26.064 50.0449 26.1084 49.9614 cv
26.1084 49.9487 li
cp
49.3799 43.4365 mo
49.6538 43.0552 49.9165 42.668 50.1694 42.2725 cv
29.0332 42.2725 li
29.0991 42.3545 29.1528 42.4482 29.1914 42.5562 cv
30.375 42.6094 31.1328 43.8843 31.1733 45.126 cv
31.5459 45.126 li
31.8726 45.126 li
31.9204 45.126 li
31.9438 44.1802 32.104 42.6836 33.8794 42.6836 cv
35.6538 42.6836 35.8164 44.1802 35.8398 45.126 cv
36.2148 45.126 li
36.542 45.126 li
36.5903 45.126 li
36.6133 44.1802 36.7734 42.6836 38.5483 42.6836 cv
40.3237 42.6836 40.4844 44.1802 40.5088 45.126 cv
40.8647 45.126 li
41.1792 45.126 li
41.2212 45.126 li
41.2456 44.1802 41.4048 42.6836 43.1802 42.6836 cv
44.9551 42.6836 45.1157 44.1802 45.1406 45.126 cv
45.4956 45.126 li
45.811 45.126 li
45.8521 45.126 li
45.876 44.1802 46.0371 42.6836 47.812 42.6836 cv
48.6157 42.6836 49.0977 42.9956 49.3799 43.4365 cv
cp
50.2871 42.0869 mo
50.3813 41.9375 50.4741 41.7856 50.5649 41.6343 cv
5.96777 41.6343 li
6.05908 41.7856 6.15234 41.9375 6.24609 42.0869 cv
27.6738 42.0869 li
27.834 41.9819 28.0278 41.9248 28.2441 41.9248 cv
28.4639 41.9248 28.6641 41.98 28.8271 42.0869 cv
50.2871 42.0869 li
cp
50.6753 41.4487 mo
50.7607 41.3027 50.8452 41.1572 50.9277 41.0103 cv
5.60449 41.0103 li
5.68701 41.1572 5.77148 41.3027 5.85742 41.4487 cv
50.6753 41.4487 li
cp
51.0308 40.8247 mo
51.1133 40.6758 51.1938 40.5264 51.2734 40.3755 cv
5.25879 40.3755 li
5.33789 40.5264 5.41846 40.6758 5.50049 40.8247 cv
51.0308 40.8247 li
cp
6.36426 42.2725 mo
6.61035 42.6558 6.86572 43.0322 7.13086 43.4019 cv
7.4165 42.9795 7.89258 42.6836 8.67578 42.6836 cv
10.4512 42.6836 10.6123 44.1802 10.6357 45.126 cv
10.6772 45.126 li
10.9922 45.126 li
11.3477 45.126 li
11.3716 44.1802 11.5322 42.6836 13.3071 42.6836 cv
15.083 42.6836 15.2437 44.1802 15.2676 45.126 cv
15.3086 45.126 li
15.6235 45.126 li
15.979 45.126 li
16.0029 44.1802 16.1636 42.6836 17.939 42.6836 cv
19.7144 42.6836 19.8755 44.1802 19.8989 45.126 cv
19.9458 45.126 li
20.2729 45.126 li
20.6475 45.126 li
20.6714 44.1802 20.8335 42.6836 22.6089 42.6836 cv
24.3838 42.6836 24.5449 44.1802 24.5684 45.126 cv
24.6152 45.126 li
24.9419 45.126 li
25.314 45.126 li
25.3545 43.8833 26.1138 42.6074 27.2983 42.5562 cv
27.3408 42.4492 27.3975 42.3545 27.4663 42.2725 cv
6.36426 42.2725 li
cp
27.3862 45.248 mo
27.3643 45.2876 27.3198 45.3779 27.3159 45.4468 cv
27.3228 45.4639 li
27.3789 45.5996 27.3398 45.7363 27.1973 45.8062 cv
27.1528 45.832 27.0342 45.9131 27.2114 46.0347 cv
27.2114 46.0347 27.2261 46.0469 27.2397 46.0649 cv
27.3022 46.1465 27.3008 46.2524 27.2534 46.3428 cv
27.2524 46.3535 li
27.2476 46.4233 27.3169 46.4063 27.3687 46.3965 cv
27.377 46.3911 li
27.4692 46.3457 27.5869 46.3696 27.5874 46.5034 cv
27.5874 46.5264 li
27.5874 46.5264 27.5493 46.5923 27.5283 46.644 cv
27.5195 46.6655 27.5127 46.6851 27.5093 46.6992 cv
27.7227 46.8838 li
27.8838 46.9937 28.333 47.231 28.7798 46.8877 cv
28.9785 46.6924 li
28.959 46.6323 28.9253 46.5762 28.8911 46.5234 cv
28.8828 46.3804 28.9751 46.3262 29.0928 46.377 cv
29.1025 46.3804 li
29.1528 46.3882 29.2236 46.4043 29.2153 46.335 cv
29.2129 46.3242 li
29.1567 46.229 29.1514 46.0923 29.2388 46.0146 cv
29.4111 45.8838 29.2803 45.8062 29.2354 45.7847 cv
29.0913 45.7197 29.0469 45.5859 29.0942 45.4487 cv
29.1011 45.4316 li
29.0938 45.3691 29.0527 45.29 29.0264 45.248 cv
28.2441 45.248 li
27.3862 45.248 li
cp
27.0352 47.1611 mo
26.6904 47.2261 li
26.6299 47.293 26.4468 47.5029 26.2686 47.7559 cv
26.6514 48.0605 27.3608 48.2085 27.8247 48.0776 cv
27.8462 48.0713 27.8911 48.0581 27.9258 48.0391 cv
27.8818 47.9761 27.8564 47.8994 27.8564 47.8164 cv
27.8564 47.7817 27.8604 47.7476 27.8696 47.7158 cv
27.4551 47.6426 27.1406 47.332 27.0352 47.1611 cv
cp
29.5737 48.2471 mo
29.6655 48.5718 29.6108 48.9565 29.4512 49.2598 cv
29.5962 49.2686 29.6807 49.291 29.7715 49.3472 cv
29.8027 49.3667 29.8413 49.3916 29.8784 49.4199 cv
30.0645 49.3257 30.2847 49.1748 30.4355 49.0083 cv
30.4355 48.9922 li
30.4492 48.9922 li
30.5498 48.8779 30.6162 48.7554 30.6162 48.6401 cv
30.6162 48.4385 30.4854 48.1704 30.3193 47.9116 cv
30.1216 48.0654 29.854 48.1812 29.5737 48.2471 cv
cp
30.0112 49.5591 mo
30.4355 49.5581 li
30.4355 49.2676 li
30.2983 49.3872 30.1445 49.4868 30.0122 49.5591 cv
29.9888 49.519 29.9546 49.4834 29.917 49.4502 cv
29.9546 49.4834 29.9888 49.52 30.0112 49.5591 cv
cp
29.0483 49.5903 mo
29.1016 49.6406 29.1235 49.7192 29.1177 49.7964 cv
29.1157 49.8506 29.0859 49.9023 29.0444 49.9487 cv
29.6821 49.9487 li
29.6958 49.9458 29.7119 49.9419 29.7261 49.937 cv
29.7104 49.9424 29.7046 49.9448 29.7046 49.9458 cv
29.7051 49.9468 29.8604 49.895 29.8687 49.7979 cv
29.8755 49.7124 29.8779 49.6289 29.7212 49.5249 cv
29.6045 49.4463 29.4746 49.4375 29.4229 49.4395 cv
29.2881 49.4453 29.1758 49.4551 29.0483 49.5903 cv
cp
29.9844 49.9487 mo
31.1533 49.9487 li
31.4648 49.939 32.0469 49.8809 32.1196 49.8271 cv
31.8735 49.7231 31.2168 49.728 31.1533 49.729 cv
30.0488 49.731 li
30.0542 49.7813 30.0522 49.8145 30.0317 49.8594 cv
30.0171 49.8936 29.999 49.9243 29.9844 49.9487 cv
cp
27.5137 49.5366 mo
27.271 49.4287 26.8735 49.4077 26.7783 49.5786 cv
26.7095 49.7271 26.8291 49.9419 26.9424 49.9419 cv
26.9424 49.9487 li
27.4277 49.9487 li
27.3828 49.8691 27.3423 49.7417 27.3564 49.6519 cv
27.3691 49.5776 27.4438 49.5483 27.5137 49.5366 cv
cp
29.6187 53.707 mo
29.6763 53.707 li
29.6929 53.707 li
30.4365 53.707 li
30.4355 50.1206 li
29.6841 50.1206 li
30.0298 50.2617 30.1416 50.749 30.2031 51.1592 cv
30.3115 51.8877 30.3081 52.6475 30.3311 53.3838 cv
30.3872 53.6563 29.9731 53.5527 29.8589 53.5146 cv
29.7139 53.4463 29.4927 53.4014 29.3447 53.4268 cv
29.3071 53.4326 29.2144 53.458 29.2778 53.5752 cv
29.3569 53.667 29.4966 53.7031 29.6187 53.707 cv
cp
27.1802 50.1206 mo
27.2388 50.1343 27.2964 50.1528 27.3535 50.1743 cv
27.7363 50.3179 28.1162 51.4619 28.3052 52.0674 cv
28.4092 51.7061 28.5083 51.3232 28.6177 50.9971 cv
28.7534 50.5957 28.9219 50.2168 29.1841 50.1313 cv
29.2173 50.1206 li
28.2339 50.1206 li
28.2339 50.375 li
27.71 50.375 li
27.71 50.1206 li
27.1802 50.1206 li
cp
26.373 53.6064 mo
26.9541 53.3838 26.1948 52.6016 26.7212 52.375 cv
27.085 52.2021 27.2954 52.6182 27.4668 52.8486 cv
27.6235 53.0596 27.7544 53.1924 28.0737 52.7783 cv
28.1182 52.6475 28.1631 52.5146 28.209 52.3838 cv
27.9219 51.4736 27.5781 50.4561 27.2881 50.3481 cv
26.23 49.9521 26.4478 51.5146 26.3779 52.0791 cv
26.3579 52.5869 26.3667 53.2822 26.373 53.6064 cv
cp
27.9434 53.168 mo
27.3755 53.54 27.1768 52.3594 26.7959 52.5449 cv
26.5186 52.6631 27.0605 53.3857 26.5859 53.707 cv
27.7627 53.707 li
27.8232 53.5283 27.8833 53.3477 27.9434 53.168 cv
cp
28.2607 2.06738 mo
42.7598 2.06738 54.4883 13.7944 54.4883 28.2939 cv
54.4883 42.7437 42.7603 54.5205 28.2607 54.5205 cv
13.8115 54.5205 2.03369 42.7437 2.03369 28.2939 cv
2.03369 13.7944 13.8115 2.06738 28.2607 2.06738 cv
cp
28.4214 53.707 mo
29.1465 53.707 li
29.1377 53.6973 29.1299 53.6865 29.1226 53.6758 cv
29.0044 53.4688 29.1016 53.2783 29.3135 53.2432 cv
29.5083 53.21 29.7456 53.2607 29.9263 53.3408 cv
29.6816 53.0264 29.4766 52.4805 29.2808 52.4873 cv
28.8701 52.4971 29.0425 53.3486 28.4214 53.707 cv
cp
29.6777 53.8926 mo
29.6323 53.8926 li
25.9995 53.8926 li
25.9365 53.9365 25.7993 54.0283 25.6284 54.1514 cv
26.4946 54.2393 27.373 54.2842 28.2607 54.2842 cv
29.1426 54.2842 30.0142 54.2402 30.8726 54.1553 cv
30.7056 54.0322 30.5684 53.9414 30.4985 53.8926 cv
29.6777 53.8926 li
cp
25.9517 53.7998 mo
25.9604 53.8135 li
25.9604 53.7998 li
25.9517 53.7998 li
cp
30.1436 53.2949 mo
30.125 52.5771 30.1074 50.7471 29.7573 50.3965 cv
29.6128 50.252 29.4341 50.2446 29.2417 50.3071 cv
28.8677 50.4292 28.5059 52.0615 28.394 52.418 cv
28.2598 52.7998 28.0811 53.3447 27.9697 53.6738 cv
28.9404 53.585 28.5972 52.3184 29.2759 52.3018 cv
29.5464 52.2939 29.7666 52.7061 29.8608 52.9131 cv
29.9189 53.04 30.0503 53.2002 30.1436 53.2949 cv
cp
28.064 44.1924 mo
28.146 44.271 28.209 44.3521 28.1792 44.478 cv
28.1841 44.9111 27.6187 44.8882 27.4678 44.5723 cv
27.3491 44.271 27.6089 44.2104 27.4839 43.8853 cv
27.3975 43.7817 27.2417 43.8096 27.1528 43.8379 cv
27.4214 45.0698 li
28.2441 45.0698 li
29.0688 45.0698 li
29.3374 43.8379 li
29.249 43.8096 29.0928 43.7817 29.0059 43.8853 cv
28.8813 44.21 29.1416 44.271 29.0229 44.5723 cv
29.0229 44.5723 29.0132 44.5918 28.9961 44.6162 cv
28.7993 44.8999 28.3062 44.8809 28.3115 44.478 cv
28.2822 44.355 28.3433 44.272 28.4233 44.1943 cv
28.2456 43.9619 li
28.064 44.1924 li
cp
19.2686 33.9082 mo
37.1528 33.9082 li
37.2959 33.5825 li
19.1255 33.5825 li
19.2686 33.9082 li
cp
19.2686 29.5996 mo
24.7603 29.5981 li
24.9033 29.2734 li
19.1255 29.2754 li
19.2686 29.5996 li
cp
31.7271 29.5996 mo
37.2188 29.5981 li
37.3623 29.2734 li
31.584 29.2754 li
31.7271 29.5996 li
cp
24.6406 26.855 mo
31.8413 26.855 li
31.9844 26.5303 li
24.4976 26.5303 li
24.6406 26.855 li
cp
19.2686 24.0522 mo
24.7603 24.0508 li
24.9033 23.7261 li
19.1255 23.728 li
19.2686 24.0522 li
cp
19.2241 18.4189 mo
19.3687 18.7437 li
24.7231 18.7402 li
24.8076 18.5493 li
24.8662 18.4165 li
24.7998 18.4165 li
19.2422 18.4189 li
19.2241 18.4189 li
cp
31.6821 18.5708 mo
31.7583 18.7437 li
37.1138 18.7402 li
37.2349 18.4653 li
37.2563 18.4165 li
37.1763 18.4165 li
31.7695 18.4189 li
31.6152 18.4189 li
31.6821 18.5708 li
cp
31.6875 14.4932 mo
31.7583 14.6548 li
37.1138 14.6528 li
37.1973 14.4624 li
37.2563 14.3281 li
37.1094 14.3281 li
31.751 14.3301 li
31.6152 14.3301 li
31.6875 14.4932 li
cp
19.2891 14.4756 mo
19.3687 14.6548 li
24.7231 14.6528 li
24.8149 14.4434 li
24.8662 14.3281 li
24.771 14.3281 li
19.2241 14.3301 li
19.2891 14.4756 li
cp
28.2607 0.83252 mo
13.1445 0.83252 0.799316 13.1304 0.799316 28.2939 cv
0.799316 43.4082 13.145 55.7549 28.2607 55.7549 cv
43.4253 55.7549 55.7227 43.4092 55.7227 28.2939 cv
55.7227 13.1304 43.4258 0.83252 28.2607 0.83252 cv
cp
28.2046 0 mo
43.7798 0 56.4092 12.6294 56.4092 28.2046 cv
56.4092 43.729 43.7798 56.4092 28.2046 56.4092 cv
12.6792 56.4092 0 43.73 0 28.2046 cv
0 12.6294 12.6792 0 28.2046 0 cv
cp
true sop
0 0 0 1 nzopmsc
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (fluri) ()%%Title: (logo_uzh.eps)%%CreationDate: 4/11/08 9:03 AM%AI9_DataStream%Gb"-6qc4XtdPuPZ_!bY:%X0/j]h*bL$A<1;&-sQ"J.i2r'AMlArV^_BjZLb4Yu=Y#GH7obA'^V4GLkWPa[!7;.[B9O<NB*!G$d;>%pRP[Am_;h]bM4R"]<%rF:2sFg$Dl2%rDC0KBk*GdK5&;9a";)^FJ-$IenlA`-p,YYi3dn*k2iSu)'&@]2sl(/epZoYqQ%U#A*`9N%:o\?$=3^W_G-fqMC(6&<R3@N)=4NZ7a4pQZVsAME[:nb.K(UX?qkW-GeQsiUmfL/X\TrS5D')*:mG%"UGhg=Ep(dOTg`?k(AJgX6%5./)qS_?_dd!_Vu<f='#iI@pgG?EPuI'DKV8kb.in8;mc.b7@1oC>=m'%!3IRCbFpp%rTn61:N'q)0mfqV6OGIV]JI6n6H$b*pUL%TW(t(NYqr?GCUBjZqMucQ4)#]f:Y&RLQu_(6Xt;mjmnC]]^<K%g](F\XDdMgK5U]a&F8ib7SpYD)][c8&(&QU[%cfR!daM0f^>;P%mK\>)Q#0U8[b&3056BR<]?SA3;NT9:&,m:Q5.>jQg&p8omc2LK^>"39R!]$P\D-klh$XEHG]%^hG>ANLS@tt-7Djj?EjM\\3O__-%gF?qR&_D,L;)>n*3K;0Mf@U[Yj7R?..NQC#*VAcLh02nd3HrWSTV64J7(09WHhXuM:Y8ju&c^4*b)Z$WfDD1**,%#CZo`:P^neBO%THD1rHcLY%UN9Z*52hY)&!j54^]_10Z270Vo7*YcnG:>7QjiqA[GQ\hY^Xr3@@s,N=,2hin7]/[I<j];r9P3]._"7"G4Ddo\-"I#%GAd<L70sWW(<%3mh7`ih/R[\krUYDKJ"M)/3PUFVf>$'!"*drMK&;SqmK`.<*?F#[R<lhen"kM8r7p['qY5adq.NAS6*^CgN\M%.%L!DtS:c^e'C_.TnUud*^.*t#'"F0^V\bB:nnaZT[YP!9eJ!2]S_K12PnSElp5fS0<i-kINqu7XPq=i?\p[Put'QBfK3Ge?mpG\0#%j1kJDp=&NflKt3O()=+e[*e]MrRcO!ORs]uc>E)EX7r.72(mA(qp$ca#g%-Q`pV;3>5.%H?0f$qkRR$LeFGR()aCblX^7.JI[@!^%J:BkWKiO:dq43sUTGU\Z\%J6)'D5hBUHIE"[;PG!gTD=T2VX;E`OG&7]G,R9mJHm1+TVdn?7T&p$Q"Nk"i_Ar>,F*.RET+uF-t-#%XNG:Zc5Ne+)<Y8b3]FRj/T,Wb]=c"]]Z09M_4)@l\>EuOAn\&RBm)d`1fp_k<NW.K[>*8^REfqLf6'G>F\B2d7sFW`?I`h;?#Sq$%K,NIk^qVT4e$'88E"(?s(fd>Ce;]41/==ZBVIo+j@@F')g84t\]4+gcRTVQgB%(3)[kpae%*Q"/bI/D6[455-W`aJF@5Vn6F'Gtn%gTXE,ZL*82fWJMbX*2ajgC:dZJDG?)7s>B^F=bIU*631O:=Z=(Ff41T?060/F286(:"OE&f5Y**i`=m(>B_$(ZVY'F?I:6K`Mf.=%X(#/#MHd&ZWg-ba?>3B-<EA3]Xf>H^W`ca0G1ES'eOm5QX]=];7^ZB/2."aHHHiCV261=*C/3$U<GL&fX]DV_C<\f?o=@uSlUK^3%>BRRGeD5GI?EMiEom3CiCp4+^BFVX`1sC^)YT$?TD,_G(7]fO+1`FV*',Ik[CXFu-5d2TZ\`l!QYpT,!Cc%W8F^Tp1-&sXa>iYHV%VKFL:/9L_ddpa]+[BeM?aE"10G^RX3'p#GA_-cj,APZNT>5II*(MN'^(-d6C,7NM6J$kB\!bk>ic3D&i9iaemKK(I^qY6ZjdfI%r%b[:`bNj,$->MtJJ_mb-t8;A*[U^FHJru@\p%CC^U"0)A(!<%G;$8-C--m1$J%0QkJ!3)YL&02MkaH%ig^iJW]M84WOZN3'g.@b+3%<j%$;6Y$&?._roiYe7baYgC1l2T(6(jTjcF,649c,leNZ>2TBg'9a8&#M.:QJO%bR9jjk'kRaDt=Y8P?!Gb*A#1g,2!J*mp'nPIt%.7$$69jl?Q0IeUe/1/^GfGBVR7`N/:"96i$_)5VA<\Tot"MSdSpVY.**$G&^S09#7,%?/.(a(RV=!0VuK!cpX*s`SM!f.U!Qj]YN%JA;36"[E2Pf0L$8,AR]6'BBi%![JMJ%+YSrm3"8ONWEjU2s;+tj+!#=(''U0S-06*Cfpa$%nmHO+63S3JobIU#hT8n&$3PR]NDbF%p:s^:BYZ;KY\XY7+<obK4p7MX.f!M\?f6C3KHS:I(Lh>s>HRe2d'IH.B'uTZ!/lSd%IBST#P9AQ)uI[_rF=O_IFc@:)Xp\'T,RW,%l)+SIUrlLq2+cu()M,'\#:(?O`ZGc:-HR4K:pY\#O\2b)&'P/Q_B0m-+G`6I?U,EW@&Y'?CJ]F9810Lnk4F9Mfdm\DfU)@DL]]KL%+/!\Ge1>?0debr&31q&dT]+Db#?\9,\q&kR=hm$A=uGTGLAt9<#F5jc!.TM,^t.ES0N=&(+KDjgkpt7LY]feolCqE(K&I[Q@b@%B%&%J<*-31H"Q#nm`?XO0;6*mK<%gYpqoFrtgWrR&]ooWW=7msCEI7_oJP5,[o#YgC76>2+,+[T*QN"MF%1e7daPCur9di>F:2N`->%l8+Is.R?!>49=j1-%#uqZjf;kd:1-TGQ2FNrWe\>QhLCXqu;0rMa@Jn7P*=;eu]S.3lIsD0ds=S,CZ^-+'+3pCuRL.G`<r/&TcKY%V1=s@`()0E%rr.)G,Z.E</<PN@L@`iJKkQLg=L#W?!:s#elSblAHc8^3j#.>3`sgId%nk3OR>G(\dFaF'@9<YdQa[%hnU[3a2!d3%!L"!Z9f`C?$<Y^ad%gonOOh/j/\eOe]!1u61APVQX4#SRda%0q`fl+[9C)"<bAKqQcD<h194RCaLMKOEXpZ1D(;)9%[js&>ko4Id%%<bGaCI]:X6Q0Z>O;8c%F%)O09:BG:1WbM?N\N.b(m^)p'U-^p1[-<-.&C9>ISXKfA-<5orr<,FTC%XI58?H2.3"$-((H?YLPao*%X)%fc0:qCTce74Jk=>=?2ZWkX1l?Y!Mf5\A9CT84pckUYVr1A;Y.0C>ZP7rKr>kmD6TlM_GK(b)G2P"oT)X_;F5YfIr4aW,Tr!:D%PN/=0VKn!>Ad!oHdd8eN.\V#,/CN&/AN`)[#E(FHbd%ms7t=,TDT;SF@*ts`Oo>UtBk/'#b':/S<1F5.#S:]\lZ(?t0X'_4Tcs1B%1Wt@X?cC)2^Yjts\>_1Wqm"s1XR(&?s6@rQ`RVh1V:,Tc?eK?\[>R\3Q/hb>kJt%*PSF]9?:+[c&7YKHQ7%F-G%\:<'p2:<="(6$%gHXZs,9pOq[.WuLpm,E77`->DaR%tWL?CteGgPa2[X,F_*GfD_?tFt%)S4LTXiE?h&Ku.=>tE`06Bq>#fZ)P%%D;530XnC.kRT$>%!0o,8o]A/8>@YW8ptn+0cYm*t:%<gI8q?iooGVBU@%0ad=0E!8gp?K/Xd!\'@eCPM>cl#Z%Y#H%<VS))CT)rT1)m'H*UeZ^cd?XL%q`mP3C][l"T,9=p1P1XTKTCmfJ<Fb=E8j`bn6`S[+EKO5bb20YY6lT^9o(+>-Tmloa[BaXiY,bc7$=G++X4,sir]6KO=?YRFNc^.%!i[kG[Mcr=a)StG(#jOK;S>FY-Y0G;adnLspI$Yi;\kj9FIM`&`hphO1M#G^7d&qd^4M7r?7I^^!<RAe,^^jJ-n+mhVVoBmS,tED%Z&1PV.Y5RbKgP0F`TPl(MS/MI^iDS(@'urO`l+<J8rnh1mR5T].P>1b1$RjU<<>];N2]6f$/lul9og_:5UnC=ck2=41-l=)NC#?f%e?G=W%&.42`T8p#bR.4bJdO:>.?C\a#eVB;cP$uuX`\/JT;Z2r,JE=J.YQC,NiF<FRq,(0L=o]NP<n2^Qjd^A+nR)2N:B4?ET2\N%AtX$d0e1M+b(1pR#Bd;p;>eZaL$#?>4[D:\Mp9/'$oC@Oojs7Bi6`D4`"5f4USc(*Zonc&`b%N,&Y;JE:aq:;9_9cCR)Xg%lS+30%9WeH_(W/$Y><FH@WfJkA_0P#s!hC*qL)-COT[uO%ck@c>-oY-t#XOF%W;'%c<0K"qM-P9C"%;0I(Nhb?4<p$0,E`je4E;&sWpsa@%0pS[+=9=7(bTj.aBHf1e-OI]N]GT6E0h_[PN;=D(7*S-u>Y`3nOMnB@Tjk"B@@5t5%N`LYIi#DO-:1dh<Bme\!k;+EpYG`G5`M:$%JSQfoUt2_@)K7#EM)-m=c2T*+cqsq5d^_d$47u]o%9eJ6eVa)[`7+M5r='f7D"[d&r*-Xf.nB!X@r^qIFaH1\+ZZF4<iXt.J=]sC%LBsjOLd!bLCot4Q%AV/'52V\1aHVdUmUK$XhA,3'gVq=YTNaNno`sm@rVs5L4i0==c`QARYLpU>H?j<MG+o;0h-l4BDfFNd,q.X.%M+mGej_SjZ^O+^1S/@4_n#+294C2n7#/0p"QU+hb^/F4g>*9m*i@ZJ(^XDE0mf)abf9YLfkjL[RIg1Be9DZrImI[U]CA%Glk)1bJ%QfDf":t*0_O"XgDK_JF!F]qRXIkbNPV>oSTF+$hS[s8JC!"k:HK7+r]E!iSH-cDgaSR\SP8OHXOhdcECTm`DCDI1Km/cV3EkF&[&%[BB8+lc4/i`ZMdTs!J-Ll<h(j*Lm%p\JV5g6T#5N>tt$bj29Dr$^9L^^Hm#'A]Oh\>Q?DVMbs6LK9Z(Zrp,'=2?#7e63$KSk5TO/%bUqYu4bl(8UAqg>*SfaZ?J4h_X+,1bl)oI7lRn7,n6>mY-fkLRBbS)G%`%#h[XScTrD]Af`S^L[:3%55qismr*4C0CkF(/`s7PX/%0%36,i/md44.#C5?X`h'koFtTH8f]@-N1+eIkXb"D%rSqK@VXL6K@(aNetfG>FA%(_bNg6HMM$RI=)"b<"-o7^F@u<[Q-#;GoA/[%/BWReG-?/CC\QS9@Ltp'lKY(KIG!fcI*h<SYso%'p=4O^6F4RU'3hmLpXf/#pOg4jknhX&5Q.jla*-pTG-UpG]D%9KVLJ4H2im^Z%`LAJ@Yl??Lg:mWW+`DI0#*8MLG-O9qFW]<t)\:[&QD?C+T,%dAlqr4Gq60M:T\Cu'[iSbERip<NDhR?FjmN-1m]b=AH2lORC&aaO%ZLN%m^5]S>jJC?nTuP,+f<BME/eIFVF'6<eM6!C.YI5Obs2o(LGZ5_+WO:WeVI[do%j@!^H>2>Q(O+V`[3+Eck!b>>Mtb#\X[0RD%NO?#jj%:_erqs"`]lsG$:Z502:1<P6mN4LGRg3'8i\+.=LJ;n,lMTROn-fc3]3"/Ukd<JMk8&mMc/6n:rGAh.-Pe;_eBQLe@?JGi%?h-,ReSBNc"HRF]l"r;SgS%>3l*fb$>_XHg\)a6:3:nKm1Pel4EI0o`721;#9ehp?gZn]_C&Mc_&%g0Ed_3PP]BT$,gUG$lW]i[f%A\U;DjY?-\85<7n%.FU5",cF0F79*BYLS!pU:?1(`_#PH6/M%g/"_5iTD8O^%nej:\"le#<*R'8n>8_C?\h".QJVQ9@FLW,^/4Qh%Stq!N=rGRD_0<^K-l`JD0r23d:Nl.f\&0r;Qg3CVF[Z'MGUFFbU15%HltJiYUf"G=g&t.@V1"?\6Q"Ys>J^@"QT&s/)/TgrbKkAc%:Y2/grF8'nS^LOkDLU&s(J=V3U>q!gFl8['`B'hR%ZCmcW8T.ejk6feU_1heXjtI8qf__J'C6g;$TYVs;Y63_p#kaahPNddbqZ"K%7W6#JUpiM^q%F(elTTkVri=e##i7?mLpGV9>BgBk[1d,r0XK=1?Ol.I53>bR"tr]UW&Y%lHAL;,XOU!j?]k*\MFDh;nib7AX^.[m%jdEI_^RO@WUoKn@KSQS8`+@2bAjjCn2UBIf#p*6(V%df5jegYCD@ONs@ra(IE"b[)EZk;Ocb=at`C;:0+&a:9qWg!E4_c233242U%FCAgE45._(KaUm<>#7?=4?`&eGG91\gtQ's[/M*5@7^<`Vq3&=*)2^oWcb]#'K%u+MlPd_>()H?[iZ]!+EVG9ZCs&^o<#ElKhHd]%=f/_;V,^AAJk.(.ps5"<E`2Y^L`XR#D!!rXMK9\ka$n+j`OHTb9d8Qg&AL3HML[F0ljq5th3Ulk-S/K<s08lh&.E?#e*R-i3?*_d%WS&kMX_4/(05&>P4Qr<#/Y9mQl5R5":>a[LY#0AD+BtE1cHfhocV*1sft;-)k0T55(4+11.+G-grL9_"ZTOjV^Q4#:`uZ>%[5Lou%IAGGK'Hupi<UK6U-Ui(*Q\0,,n@&;Ymbm8$k9^]sH%%C.@4ojf9s/GTP!]dq3=6So(`1q`$;l4]F=u]Q0'5p^cjb3O>Ih;3O2Ak`%,VJ4(EA8PlMg5XGb<pkK)4?Q$aF#7&f((W&(1uWDp='dGeq^XQKorb[,P*(;XG%O[-bDZZqZmiGD4d;G[8GRX)i9!NOk<_SM1)cG%p-!=Y;K@!f7qs8fY86*RCiu`?k?^<q^"GNI/)6WQoSAg.E3C>A?=((H8ZtXPf.&Rl#fGt*"s-6U4g$QGq[]r!cIR;*qMZO>HC3fB%[\OGc%cp;giQ@YmEA&Ol[!A;UhFVp<]CSk;UXMYRZ/Z^AX]X9M4ndpC4fD2X^oniGc;#MXn*Y<96]BS=;_YK01Dm)4bUCB>`b,1)%qr_`#=<GuC)4U<Q+GB^%+u/Qa/HID^rn+p(b]fFJ?IU1]T=tQo(-C>[O0EldTfp2/s5'7,n/Y=D,1!Eif,!EFU($gT8*X-MD+62q%>=g=h\hBq7pKhY(],1+a8?pX/*mo<fm363$pH7slg05FLM"bDsS2:e:dtnWSS&j\@X[KMN`"L<bV3Z@A34W?=>L1X/Z8`el/hu#@%<b)2@H32YN6*"BTji!GOVRBCK0I7)_[Mkn3DBe,;2nBs6pI1'T7s(,I$)&(%kHS*;lJ?+sh7G7_Hb[^k36O40ANGCpWdiKDCjUR>%D>.*9k1&Vj0l*OP[(5GnZR?,s#5=2X*dAmPrH`c<pTa@'8=ODM:DhOBVWT8[P#2/2)3f%]6VETpVZ1\mcZ$=aqrPlF+b6@(fCp\;%R8#a0?`h0C?Wm!gU['k3Z@e)oO8O`U`%mOQd&qlM!n4"42C5fK'-J<77P^.As*cSUc@[AS)qs4IQ?:'=6211%A$_+4oJ<@>%;oNB%cLA\tfok+%m/\5TV_Ye!C=MNj\s]"F>,`u/oF75$l-gmZpBQbN*e"m:oN?EHCY<N+84-+DDc'7N41S45^)be&TRu(J82CMF\7Gad%QFV&R1`Z;dFZ-%,0@9U)PF1#0g0P<E4r*dg9A0'5(+7N]dCm20p[<TS>1pM^jON6F?H^fW6Q=GXF,kFGrq66JWKeX2fMo6Bjk(A:%lR1^n%+-h,`Kn7$HS$Ea9%2F,2Po.qIq]1fYi/C)5^2&@s+j]IWXN*oS"84K)4,LO9.)LJ>SnXDo760F9nB*mqglLG.>N,G.EED'%Sm`-W),UfhmPE2I:bt4=86\-mVbTaVY19j>.9Maq#&[M\2b2mok37M;gYS%P#N=76(aj)(ClY-TlA)Xid<Lb`Ynq<4)mYqLDB2S<%.?;Vnmq9+n-!94l7*`0:Zif\0[en20+2DpjU;EP8UCJl*j\Z]T-3u1XaP?=rg@^`em8W*dP1;rr8(`&(.=/<1#P8b7[1^p&M[*.r%VpN;Gj4KQo.*(i$HWHdK=;?G(=lm0%^$V20kk>k-j&T>g2h0J<)lM:<Ch7U)@<(=FT]9sZnc%";mQ^L-s$dOUko66"ebW'co3pt0%d9<UMPF\oS:US0L,O95^?JeqU>$dU[.[6eGf,rjFc0p.)Vj?c=iR*^Yjf-4ce`3X*]sIRb1>C:1b1cY2%<#"lk!'`3XhP+^eK9a0%K-0E*e^5E'X7c,XrUQ"]fD_MNgYaO8\n]h(V-\(gmCKUq]`7N>Nn[ob[bcK_2nNFVdmifs/$"/:SptX\<Ru'_6H/B6;=p8PMm_Z#%,8b@N8t2uN:g)[uB7OHr7_AV*mp5rL%'m7b<fCNCN<$<!di=lmhn'D;g$N!=,9I'Ep:dg2Hg'40=^9jSH:npLFf@Ti=8L4>iV[uq%)ueW?KX]:niB],DhtAZe,nIS$IlCH<^R#T=rB@R&>:;pp%0j6.G;`+9K>*tHlh,P&QTXIT^GMgqeV.DX67Eb[5J+;3S2.$g2qOK]%D^5j.S=d&5>M)RgFLla5'hU:UdJSIA>Zp[iQ[6fIesk+HEM\gVkRY,tk3GSm.*P*tG'!Jsm.PSt/<R`7^K[!DoPet36=0WHi:3*;%"^\iZK\,i93;K';E?Bt,O0<<o_H>Qn/]+/M2o\JIh`"I=2'3@+#Jm&6-];D;^$fl4V^[6VDlh6cV'cc,YC+gJ#2K?<FYD%Pa`Dkp%4kH=6htE3;mCiGUV>7Z]Mf21>ZDQAY%gI_b_Q,_=I+iq64K*9!NA\If*@9!Q]%MR7H<<0j:)^K9@[g"Dq^HTohTWEXI5jccl-r>/%s*QeYK.b*`ql.-1@=OZuK0enf67FtI?+YD8#<cFcM[X>@mlm8!5oZ.$c-T/!IUKc(%5V_F6E*2_oqu^m]_Q*cYgGc2(4,_SK78'T%W`;q$]pNHQX6i([MEDXtnBUUdc>@oBO>uIoe],5N62*%A5$!jO7EoaUeCa$PR?L2"l.n9Oa1ncqS]!fiGBl,id$)_>bsr\Z:eI,@%%Qf*i5GS_!0n9&ubE#9TTO0U[(Qnt+SW(Hm>u_)9;@%YaY\sc=kE?/,5PXpKXT!YlER8WVng>=im7Vi0:PXjHcdE#7ZE$cNhBrh[%n6s%T;<c[VK>K#nCub8qPsSkkC[0),gD,@LV?`T!U"SYCI(:qMd)DC!*5$PUs8D'D$Dd7dm92/(f,kAj1NLhIG9LF0hQjhCP6TQL%fB9TZK9gl_?Q\1`TZb0E0T&g@]B-$82c^RrrQpV)_TT)4#2PY^/4IWA<G<MuMF"ud<^2>[4+FR2DJSVaMupo"`)Yb&?ab19re<_.%0@<(4pD`^Ed+(qRn4^;dWhm2nBi'6<A9X@E`DOQYhd#ful\e+MPf3p@n%P>V)gp@o6+*)'mT$DO-]9;LIIbje"$68UAG>Y)iq&Mf%e9eWP\N!-*3kN[ArPLQc:LOEq92h\P9HB`PBpc$gNb(.^3'ND.c1KTCZY.FDSp#GR_7)!Po$h%FXhhg3lX0&?\$t6iI5q#Mplt>k%n8;n9j-tMgdiJ.a:tf2[1ga.P>?C\DemE#fT'lM=>d[@o';%>_?b'f@[A="`mBRUZ/XPKnXg][[MoL(ce+[p][J+#l7%X5hgT<)U%RH`O/;r6A7\uJo*09`$r<LU\Sk4SQ2Vu&tlOam,/)N-&jc[J+Cr=ppGl-l9mnjD/'IX;"\coPnnMg#g_p2/d*kO/-"=+<t.I@0N2%Ff)980A4T,MRCe(RtKsXG4OBPfseTHhqQV::J5%Yh4Dndm;F75mIf&54r$]dLJMu4pq.SrY#VqA5#n6EBhSj+.T]FEWGf-9`2>7Q%<p(5jn#(W]dhp'^q:bb`LG'%;i9g4#q=i3a`:lqtC>I^7q+]S$D>cGqq4X4I'Ul"``RMcM4$L&O5Pd.CFS[$;b,a:C;f`cH0DO9F%`h0Z<jddpkL!C`Un_3hCpAqKYr]oKI,HpGoSQQ4gcX&$PTd]0gH[j[,/,*i2oAJS%2^$mY$1#jmZo5O>\1E9'RBC:VfAGejr]`T'%@-;jukWuWRlEJ;+Abr(Kc0riTK<f+>3_1.<H37#B7t5^t$l^,Wr-QGVRo<qqTUVFaF+7",]aJCRBC!ealfHP6FRq4\i,@nR`po![%hG55RPX06F^3pY'$DY7\4P:7"N=Zr;m5]Ggj8;#fd-9[G(6Zi0YS90p$jtB-`"(C5K=4Y_7;mR;XesC/4He2[d2tA?,O\MaW:2FV%F5;9a=]N0=^'5$B^WD2^J%<hSmbgf$,5Wf@V[q@UEjY/G>Wn;cD1Qd%[H3I1)\LJO\!Q4mX53chi-tI'LAp'g&]UTI0CbM:7mQ+J%-2Gjk;pmUh+2YP9=?9@Al0p:'a4ZB>`4L.k"[lG(ld'X]T;,O6(r!S%f<1J0T/Z`L$^!94bk;$#(NmGgrS>C]]'(>7HgC!WP4B,s%`k^JtM(GLniS-S''00>_G6'+uO(P@Zrua+N!Y(">JNne`iqg'sV%?IsqrZ!Dr:q*[f?45T8+Mh'<'Pt6"JqC\2lfUDO.`Dlf2++$%X$C0N`>0r80>iWAruA!mH,BJ;ps*d*r!F`mL@e:-XIceN_><C8Vk<^<Xl%Quj;3c1ON6?:"DlsIA.pKnqJ@9t?nNZ9/#0H"FCm1j%Ej0mU/G=/YcWOT"$M_cAR*&Q;hO9kg)N"$!FC,>6H#1W1pTs*ja<FYQopd[XU8k,2=aO0Sn7NhD4b_>2ebJ"ZNGnbi^C*2mJ=AW=%V,N[.Q&Wt>5pedkgR%E%$T7/eUKmsHkaa!,SM$3!WDh8YhX0Zi1psP&';W?i1Rus5Kaae$_V2,mP@.E@O+h1's-@8^X@CO&T#5/L%aFmGJ9]NEb%VZbe$q#Efg5"e!@:*;GVY/3W5=?8OTDUaer*5fiRV&B\q+S,jE:RI-B=7;!Nm<g"!iZRh@+VTiDH-%-e%:*MaBc7(%&LY&VI\W.8>\YgHJ)jf':,6$YldJGKM4RUi61H%r"Y#;!^`0E?4eBe8.sKgg[0U*WafBnh0[p#7eZ\D]j@Lt(k7YG3k`UVmP1C_F%kK&h%gF'[.?(4pgCna.;387+]9Z)7t&22mXL:+$jQ3sH#fD!+,);TX3Q@2$tH7GCd35:`P.(ReE[PGWGLJ%m4h7ZBIl%>6!]ITB7%dRba3oeN$$o7p@cQqNcqrHc2WdQL>HVmG.2<[/Qe67Hhc_r?\-]L$u)e6*^9O$:\$X.'+._O>XAMM3qAa:si+/]h[0p$@&d*4Tm[%W&.!<NWWN8c]@i0eq[oK`M$#WA&#HMh<RBVk$TS6$<tnKHjm"P[AA:uWU>]V.#Zp:pdu#S8c`d>,X+83nqVWY)sLSHW3^dEPW+S`%17.Z_TG5i8--%cPKm41tKVt&jatPE/#Ebs'q'qgA'716%01H.AC-L$5<R7h,d:..$V<Onf6YAr=XO8HkOdb!qWt.Z=+=4"l/Tu@t%7o19V!Wlf_F=Kn:dRZpB;??PTVMO$rm0P3AR,?Xqj8IL'D6/3?b9hKX-dh74^fSUBcNngeC9CA0f"^7/@4Di0F!]Wblq;N)1G'sR%^!2#sl15nm=W"l)og)mr:CVY]P_?t1`urs>W\T%)%3bk6HAm?$aUrY+cRsX)$@#a/,V,2]Ie$/j2Q?\&/46/XXC@o3=AYM4-2TFd%h`X^U4\Yu`biMQ;T]T$.66B]Lq%`.RViRq8J+uniV;rom:?^_2NZ;>58=!#CEW6l$$'Rss)WdtX8e**u?N\eLbL_D-=j`_49LIHt%`hUX,lq6_7?0O'5$`+igZs876:N'Q243nu^pn[@M%J,6?[!UX9RmB1WMiD6Q=$KDE??W&$n.g>bqIthYMZ(]LAu#$YPEMMI6A95N%hh`2`="/[_*>g)3mp8MOlssNJDX(,I=eq'@RN:sI=lGEq:#5a&@efj*bj+OS>OJen0$MG1KZDrA^uYB5ABqGcdCf9)ltdu/]EfS%%cF77qCg<N9,<bbZAP?F,<Qd(Aar]I0I_pZs#hT9,imc<,&kK]@7W\9\:*-7(&ac/&mjE2mhB<l\LkbU.aW_gNU*1i"-FL`VqoBA%%oBO7%igR=?PJ5)(k!Y_fc:LXIr@F1ricAJ%/L5#:PL26k>)!/j@fdRNrt+"gcL8RsFI'Z*j4VSF4%S"l2SQ(gK+R!dH<f,f8^_:U%OStBj2-NoGK)-?lURb(jn!3a[9&2Q*^tOF)'k3e%C1ccSZs`?)C'5R23_]6EI,@hr1(+-PqEj7>=5JQ?3R1m#SYcV>q7#En3Ko]/%T7J(YbsH'<-s;`3<&K%%4Sn;tW%e7ArF6O6@ll)`jBs^7L)J]@e<([V)jlQ8ce(`1W0]nJ0Y[-B[%DH^8Ti,gG8$p]&[Qph[W"h#%0#H3/b;fKLLe09"O=_G*ikl%;L]R,?fPkU3S`L/";f,qkZ@L6?cFMG4L"\?C>HoiVVmI)=fU$UUqbSro(62tF^*NOK8\Gg16i4u:%%C9oFVdWcXHeLI10ObF[8GH(j$freAZS/LCNeF`'9<s8&X],g,"ii;pI0%.LHYPMY+sfflG/aT9KcqLK%St^*aj=0CJ^!*;6<E<R%X?ree%9'?,b.Eg'>GakXB0#'9C\JN2!V9h"LG()[Ie[oo-q_TJ.QBGDGXW$>3Pd8;VjaI3Huc5q]'a26BdkF]dc:;tkZRa=;W\NC%Lr??,&)"3bhBQqrkitsnZmb5qdd@Qf2TX.]6Re<KT:E>G&7.rhjO!GObg'*kN*:KQj7"X>"J/GT4L(%OWN<IGL2cr(=lt59LHume%:Dcn+2Tsn'N'4Rjp\PdXj*%>dS`QoJ$G&Q<1,X1,'m-^<Ti]glAQR68k]QeA]'Kd8XD5RKC?VrRkebl%YHOYCY+R;0-<!9u>sT:+%(4:66?$6BWTer/U]'Kbb3o)NA)S59Y<;eY))S58B3].:(:(:KP"eG;+L=ae+%j\&SQougBgR2^4djou5r##g;ZqTrIgYT/egM>D^%3U3FTYA_XK[>/[US-[B3klj*gNcLFJI?3i92Z9H)89B_jfu-[T/`\Ge>Ki3t$1ICqFLF%"r5aL2?9+@%IcY#/P+1Ztc(*`@V,ohj%8V:TI'JGllm-'6oF89q&q2urQTsHnW'i9m/'L^#kg0p*3NQLP3M6it6`C-Iq/^nk::YcF2Fpjpq*%`o/fp?\7`a5oSo!V7L8fCn"%p8Xl1@;Q=(ak53F6dq`;#^5<21C1TW@V=XE=:hfV/r"RdRZWt"U%0q9c>$(GAKPngK&/iX)htU$D5J):N`9I;lhL%:0Fj02Rn7t[%ME_kNSIJ@70#l?c\!oqm7'G@MH>q:?qie%qkc@*c*SA=RgRT1XN\C:Y"hDt4h/9*]0NQM)"\Gced^8\``lAdX10j(>$p5YtIKnY9%\m4Rac3uc:5=-At-i7*MDap\c)d3o=c4$Bb?J4"OB/5tlm!PU1VMrr+fW'm%Z-+:fb=E=?h[16HP#A'gQ=AgkYMG*WF;h7T,Q?=G%",L;g6OOa-W2Jc01[=(rg*3YO5iJM>5(;YRT-;WGfU0bm`"_bFHa2(<7^/6MN<lY455fYp0!Ga70ksR\f3kFRBVLg8]lJhd4!WuE%:O7lPE7l=.Nq=pC#hu6i6i!n%0QL]L/mI#$4Rp10P0]3=^@e\Q@6\dZ=B2H$(s8rQnLArJUSKJNTp"RfAJW?5BV"dQW2(/QPs5I$%Q1Ce(I"*]4:4p*iigO.b2d7,N<*hUSGB(JNi)SFk@Y%sQEN(?TlB/?AD5<+a#"n`*<\1;g/mh([f]i#J7<'1n7DIZ`_*@W<)&[kB%I3'$MjiPS[n=Ah6:T8cdOcf2.pkFG2:ERX!aFs"#i&e:*:G!_7':eL3?\UIb7OFg4d/ERi"2a>,`@=bm=._ED7OBG-O+\BodQV;`%%a`5<`Q@pN8UPc>'q2=TRMpWm4HHiH]JGD5`/PG%I:=<pTHUU[4-N8$d+"4RcA!okShd[\q9]_p7I84h:9L?"6d*Lo7i0UR"c(XY%NHUUBnV$1&hXc'HF`i7pbH)C!IR&RDldA!qV/gUjUO"WbS(YlfFb%_JT?%Y"Xt]MFSs-+.'B`eYUrCBWLO7;?a%!7f90NMBl$BkE%:8m<XLDt8#F[Gb?Um&ib^gZnTM-gB[4WjIQHFW0Q-u]!$ZLr/Ch]9\]-<q(Jj!t-DW/"=&76T'XiHi"e==e#f#;[g4h4T\UM`%gY%./0.Na<u_kIEO`c,%IMr?75Utj-SAm'$>J4EbI[?-\HL/n7"VEi-?#QI".+O)7RUloFd4SPL%#Tf4ZP"$*i]>B.<_G@[OBbLF$ci%KfC5!oPab$Y4S/R7F]/H0YTpCF`s3+3@T8*<=Bh5kH?9]NHjJKmg4g/q=@"g##+u+M.+-^Q22@c%+SZL#flkoNT_a<5<\gX>,fQD%Z*WpIAqk^C:$jG([76\F@O-__YbA4A<^<cdUje_"7I'!,$!*igB9TAe^&0[;MGucV:8/r?28-J`h+PJ><9RsG]rBM>jnc!u:i$c^%VbnsBo7$sJ%>g:pooXc8Ho,uq6Upi>S^k9IQl*!O%9\L7GqE/+Q`A(Q=pg&af[(9piCUbX'J=6.-<gg9<o,TU.GSTVj_INJ,2XNS%lMX4Fi=`I('/,&4bE(bDcbP"l;$E*N-YF,WKb$_5p-nbT5B]5q&#s'SR?p+_rq9`[">Y-9rXelB50S.6r/osc2Aa6\kdBtRXt?0&%UC12c(X(4*UZ<h@NhDW#,F%P.JpEFqTMORu\3tN6>X,eBe,FX_e#n1;SfWA`),tf!^$f`<CS0o']MPV.=$D)4^M/0[Y&>j4IpVI?%=L@"qbsQ/)>AKg92K-"Vp$''W#q=]2jHE@QMV[tbe64CSfV+j(YLr6el1q$A^'^-UXfp;.cI7[,c;L^gn7FkU;.2uHC8VJT]tm@L%^SM[W%B6RYf$alCCUI(G`CmUgV:B&"LF_^8`GUI.V@4@q!Mc]mrB[3tDKnJ0@p4SW0qV<O2r/;8;[6mYSbImgKAq<,-"F^h,H]Vc%.]_3=`_%=po@'24_4\(1pdtecH`aY@O#"eg^N5i).-Rp*j.mQ!eJ[nn!q/'nS))9)g.JMkHAtAI$$hB9A3Ui1.lho\>jW">Ja%hJ%T,UWt1l.<,'+AV-lcf=S,I^M\(<C79L\HVi3=\%1/+$JtHrX[H9>@bs,p#-hQ&\g\aEc5#Euof&3jG18P4"H*r2.V=2p%&HKo:BO%m+'XJh*Qr-q2T^p>[QV>E^S.F:$<5#eG5rrqj-iTmSK.&hDLCakW+Z$L;'MXqYT=Db=d'3p[XN.]B6_UDHNc[oP1thk$^`[VFudK%Jh5]QWp,[]l&rdl1JTf5;GJo3?H0(D9<+g-U[iDXD=#c9p91WrMi]5g><SZp\tlK`IN`7_C:^465+b7bV4'#NT16)N'<7p&WhkX?%N(fn5/h,*Zr[utOWp,[em6UA*WG9#'mp&SkRP(S*/pqha'%M(q7[mG.U=F?W-q1me4FT.ndeX\N,Is^4Wp,\t0C^mK=OhN`Y(kd^%r/,7#FPh,%eT<$5m+'X.nZM@cC6PftHS*3+X/8OIYR2&IVG$3)C9&^c9pa?q@H,gZ8\6:R1[nmUdj<Pm7AJK)X6Geia20n_PGk?O%WhkX-Qgq-@P)'^]/ScQ\F?(h]-;[F'<(iQt+5choi5T$87fd#YI^*6I>`>0V@T*lM-eut/YOF!M[Lh<7V!k?W67LBqGh%4bRGL@r%3XrdU2T2CTQ(iE\gGp73Hn8)9"9f.3<R8cX`DOdS$?FrT2\J>$Td3BWD!.apcV(13K+qH,-A,(\][@b!j9eCF$%'uo+2]EKiL"aW%AkoU?kni08:pZI8c!C*+=8?+ldBC)Rf.\:fljr9mjt<El.pjH*Y&Ao)T21ahh2OFgO"Wc'EJn%A>]Z5ZU\Jj$l[D_fMA[5djf)7[%AR0B?e\7#`%QH<rUi2bS^.Fdb8Dgt(hO.K:`Q%2@>fEnaO!qio<p.K*ja#_)FVY)Sdm#p_>Y$g7\q8o=\KfGl:S<eekh4i[XpW)=%6QCBPdZ?066k5@HUo+-cS=Jbs/^fdOHD8<T<(!#MD5ai?*\:AC^Z%S6k\7!Uadn/IT&aUaj.*$@L)b"nI**se6Rj2@a5./s?;`um%?7:facg+82-q^4_`g&gS-)/$#.YWYMm%Vd[(Y33R^`G)/ofl<T8C$VW[;7@as/U\&=`#jULR7H#@qSuJPMqDd8gWTfp-OFs3UV7=%E$EY5Rua/6#$CM\VBM(Hl5AlNO^.X>S+7nLK-AskM,eA`G#Jbd7ZmZK6`u?%L0$RQ>8Yt_W5ZMLr2SRfl=[JMcBN[W@\5&tmB!&V%,`[*]:IIIR$Q2FhiC2X>+]cZ<qe'SR8kq)\l\<$E^,#ME]2shtm"W.(hci7d%<i]H38JR5M9<m8ie23l)^7JVDp"P?>uKAsG9bE`%n^H@"\thG)9oaV=h2qM?Qf:$,iA]QRrMhk!;OL'aQTVF5*kg\hXDL[=%B5%5j=dTO9j]9F$uuKETutC^'\6Ui8ZHYMofH6LT2Dpt%8`,>SIO7lnMnO??S[)b1iVfR%(J[+sUO3_1[>a@n8G2?V')`g,(&]l%S03Q!A*:7aHf*79//*%+EYL66ocgYAfSU+i@u=9>jU9h.%F\*%tcc//-V+B]NXu(9m,,VDI,^+Zc>`"0+H&J'f4,)^P$Rg=iY*__"$q3U"3H#d60#t1s?B.""3(g;8`0TJ+%*qim6TTEGC5m$%%ln7s(%>iuD(LLiOXU#jY(?OAW&JU/[dJ1ie13SqMS:$;,'0Er`FE8VsDSbkHHbAd1aid]W4C"YPB7=8=;Y?P[iu1HA>A7Cq-]R;S%RC-hDh?GWi'"uU1p3E?2s4TU8>lWOAIAgsbT0Lo,jdTGU]!?t/300[p_c(jiUF3B@OaG_USf]VKlJW'r/5Egu\ENA0lCl?mTmF5f%G;fb@7<mtN6L"GJ=4PFOK!"\!^]&?HFsV9-f)/eOPVd'I,jo)>X2L`brlD\5DV8"o%9JDZqQ#O&-$Ks7kfu0"gO5Ddq_p[)>+4#h%q8!`&n:4t9i:l]3PWS%PAU'?lotiMuaK#/bdR#tHB^K1$oB4UhhsRrADUSf,-Oo@sqr[6p3_LbQC[>DEV@;a+Ke>$;%f2"d<@m\[%&l"2_r?dFV=(A;'h!SH_4*fE2)uFY7=-(B!TkGgujK=d+FF&PnI!L\,rKN]trfC[XZAqX3MQb2lDD?Lmc$Omjb;N_W_tsdENXSL*%8^a6D.#A:e%&??R$BnNCKR.H$8#n9-W<]K@3S5=>Ur1mL&[WNNQZP%,7=DP<<>bsJd4\;0^++!P#u,[T2A\T#,L#u;ZT[tYNbf1m%.En4enrfL+q+k^%4uoYX0Ki2oU:b$,e+t3VM4]b:X/g8"[X!;8Uth<)>fi7,?%$YPh7h+S_:!Pf-M#]s#-RrYWfb"S-EtYq;nF#6%5PDcFJaYM6RO;rTO8*#H=([bnB1Eo)p]rJ&!9UC")]H+lBBc>$o&Rh8LISGSDR=/e28,JBkI__q>'lZ:N1;+5S22&<9Kb0ZFqaFO%?Pap;?M_^FP#?HkZ)h_PkfXO2!sG+2^Ub!L7oCT%gW^/e3*IJn1DkRR9(#$On'USD"KOV)NR]`G/X27f:l<l>bc\?P^N5LS)como%SPpH%'JQWW'2(>1hml?4"WV=V6?O'MCT#>h@trHQ`9r]:fh)ae_UZ%3SIN:1G8,oD^#(4;,dg3A9V3TLN7?-^jhc$+0T_XQ;uu-`%!K<W6IRSfiNmQ8PW^^/.6d(L2eH"Uo^V1%/\pe?NJBA2K=&]34f5S\%`El[N(h&]Z#W$o>2Jn/f\PZ.!m'TiDTd@gZ!K>Q2V35>Y%)tfF4q%Zn[kpV7,-'A-uJPU)_&asGp9DM&gOmU\cnqD#*qG1D>Q]tL;r2"eYDe,?UV0jIVSt-:\;D7.,S]&on^jF%sHq@JNa^<2W%GsCl<0'19'J)qN6nqF@VLt&SIR=`r)8ZpM"P[")5nSK\ef5Dju>SHume9L`aKr5\<CjO'7gVeI;ZElk(2--olf.Y"+O^%cjqe`:q%]meX;U!uV\`-_G\<_2*4QhG9p;=F2$`Q;WIl^*#T7*/\nFg#/49!/KUlR+0mdaG\?I2VW_^[.r=n#q,p]meYDqRu.uOG%uZZ6tla%6?VpIr=YGGqlAk_\CWD2`*(6lTYo:$>CMf?I&)"8A)6I;D<PZ"B*.i(A`)c3iYSOkn+Fj6F]2%$O*n-<d]'5(<kkp.j-r<YHiABj%Z?r:qT>8-hfc)E`M=.Y:ouetX9rLU2e\-FR)_0^HIZ`A&?@B"ar"trMX.OT2l.+lEnm9(IAQFW>Y1MOrQafiO]+?/Y)ZO-YliYku%MU^88lPHSYMV[P6qp*_Bn+FjNTQ_X8\G,i2b1[/Bng*YrbMF6\iBFt1^>]a=O)Os-LZD\<7^(rF^=P#bM`C[Bm:c7jAUF!Bk'd/S%rN^A7RnQi9Yk&`ddU_e=bMI/tSg&FH]meYDqMfJ:h["uoZL6`lqdV\dXaUqoO)J\_S`B#FnU(4(\V`&7@E,q2032m$]%,-1(`N!P%5G,V%DtSHO<SHYS:+D<aGctJ?RreB1ir+_hlSj[3fAZK#jf<_KpKg)!Q^i8p^[>FCdEYuCh!=_2@X.oR^X2r#lE8RV2,@AaqIP'9%CnuFV;Y6>u"(G<tQ1t,d+*<D%P[8X=?Wq`F0oTT;CS"Sink%rqp\Kjb=2+B7^Q@H4h<HrEks=uK^MJoYj@o+S]@S^j1%]Z&a1U"W%]-'#9aQ)+BQ[PoAJj8t/Hi:7?+Q:43ia0C450S9GqLr!+HE1CbFmTJ/qILV$+]Y&Cn+Fj^%an:mXib\.4R<t(-k!Wu5Of?]Y*;-1%5-,%%YG?>U(Gf']ZOboJb8)=KbZHn5n(t\dM>c4nRdqZAlsC#bAHH0EPbTS;UF1l%,&D#^@fBqRH"D0&XRE_V?DH>*YG_%D;[^?d%T2q7NX)IYaHY17((Ai=1/)?QClrMk\(H*mX^.qI@&*Bc>c(gQgoC(8qbjh#Yp!Q4jG^$TEpUj`Z=i\.(Y3^quh-V6FIdGtZ[#\L:%s)RGOkqR\Eq0@A^l2L3`F(Oh%oP/Grmcpg\3</m2r-e'V\G5LToA\@4K3meeDRS0GB;VQ<mI!T'c.p"%s13Pu]'(d7c)q#6H.k^?%06QQnhT"j>eAA]>]d^(0n@88]`q[?<Ch'"n5C[CQbr=I,[X#*,fB_72/GEK=en=ld9Dd=#nL7UT\c/M3\E<-bi0$c2fc+^sg/kue%YE*Tu.M(6i$;%B.eX*H5#PG:Fb&2:&Z??md!@dFKS?;cN8g`+62id?%B#%41IHXf1;d]6B(6dl1B);(n4L=OcFETY(]R-`G%Z`P5%cMff[?8LBGHe+ou*"'l2fiY\,hu3hg=D[]/S(l+b^&)``a]Q?("K(:R(RCtf.R$'hO.k>Y\e?jV=q.>E=<Ee<)tn(K(oODPNA&gH%V]SqD$hZs?\6c-m[&ji=g\^d)kK2ocb*M^1J'g.*2Oa'Xd;A:*a#@3Z;ltA[fFVLd].3-9?fpje\]+DCl(pDL[Csg(hcJ\O9""QI%$HL-M1i=B6\8:9n@9L4r\m8bqXZt!Bj(IjL`%o%9#'6pDTPp>oQ`41b\%e?-@#1qP`]X2+'`6725?AZc:\nhTd2r@9TRLLHa7^/E%VU)o)s.aisJ$Hn?IfJp'_n4a(*oO`,,.b]R5Pt`ol@W:)g4+W#LQt@Wr76?s<Zh6Cqrp=Qb(JfDm5sdQr]JGiDsgB0I+TW#/sJcq%c0sa5s3\.#cfXgK6eI8Q$0FFhJu'j/AaO7-V^D8Sra,0mrj4)B>X*<-9#mi@`P0OrZcqD,0V?L^d>_/DIQfL_CcoJc3hS]K[l7YI%3/&etjh/.6Z?Q5>_pcq)oMh<h<dh9$/pj@tq&+s%O2n*:Our^B_`N$&UU$[sN[Z0r8G!gW3hb;n8>h0`FN]ndq9#3+qo+bC4_t#7%fWWrbDWaD=<n6?I*`#@&5/5Go:YjiUA`q7'*s&-No.RQ`*YH+;"\YcD\(8nRr$(o@X+/sf63-:0#:BBRS6UP+d3SAGi]E"1esLA]%`G?Z#2Pk/3mCB#@!+.pR'EH^sK*mD`!7Q0'^V0[B@AX":6!Br\dQ0K];ui'XF!WJgHkN+ZW9AN3@l4@7lm#*hU=\W$%uBgT):r7+%rk.UXe!7nll.Hi8nku&m2Ye=uZUm)b_OpOROT!c&YsCN_F9=R,Xp2s2'jIG/nJ*VPBhtsIqp9dFPipAVeVhB,#\\rcaX-pNpjb$B%hQ<Fjc\H)h*FR0:B@06F)^)Nt33Lk(s3*c6IBk"Rhtm$R1Tu!\KK`MI:Ub('*\+YW4$H_WPKhX'>b!s7P'1]8N[#BnDk>05YeIj^%,.hS]%Z'DW`8Z'1if;VkP<E#Pq+\R>?*)9(e)j8157*(Rh0tNAI''lV3]tp.qi,*^KC-jYZ5W7q]j!_3>/2r67g!j?:-rOP_PMM[%0]tm75&\2N*u4Ao$KU(d"<BmGhPlF":`!>S[fVm+Bd2j,EJ6[X0(!F^7b0jI/o<3"De1$!iko0?QB)!<G;5KN#tAEGjf]$Q]iih)%*e&@k1g!,1\_!M[F4W3<QbX``B(TR<kUaj_)=ubLIUpdZ_9X0INm@P_5'S=.TZ<8pOG!B&8Zk^/I`M18[_A$)J"Mg4Jc5p)rPL6r%;^d>P9I?ZZI6g\'[gsNj_7oW[ER<t..i2m:V`ej\MZ3j6";a6"RRdDs#-Y3?LbN35HMcMC6?tRZ"QPP=K^UAsZsTGQ&q!\Ni-f[a%gIYWlXT'/-K\$&!J-c"j,Bok0UQn-1];+1rmn4?t6mr;qIl>h_Ba?od<R3>hn\Ktsb/+a+^J"f!QnnLSDg`h"Aak9G_R6&rAJuea%#p)b*K!sitFck4jBpUkGqsrGncCY2qaHd'\?(tV0rY]bq=1t8ZFK*LNijtb+)Y+C+GSfb`R+&QlM6N3\=6=.qa/RIs16f1Q5<S>G%;S'OOcFZXg^g-GSEVV`"L,ln=;,V[@j7'XHMF4)%D]8$Bd+)6c;**@.rTT&[7b/+=`al*eLR7?;K^<>pd@D1Nb"S#NS+a7dEW-Yo%_7''_Dq(*9QTjl./(h/i\#o/uaB-\OA\#rndNmrtb]u9uI<4u3q-AK_`ArE=?X8B+1:ub_N$GKI2gXp-8gB#,bB,WPK#b/bjneh]%'(9s^f*ciiQ!HN5=jB^!I,,[!,Os-sT9n/5jCdse[cXf%E\[L.-K4R%p>CQjY*L.3Ih+t>XdQ([&J*3jSVu\I1XqYT=dFW)+8a1$%E6Ab;EFal*E.\B9bcM$UR;p]=._*a*,mgN8dJ)?Eq_'FMU`*aF)fn3;hq7>OgoC*VFWkup8Lo+;X2"XB.<qZ5DX=NQmki51K5WF#%5Bm]^=n!OHi_eL)NkG0rYtte+(Q8faR`iML+Q*PSQd+>$)-h)$0T:r,obmK1(hE5+_nI9VD@Kk(_-q0mRk2B?FpI2N\@q54CbH/O%,!+L2;^3.;%!_I7LnQ3?iLa?Po1X8,DgV`oQI]u'VEF;nJ$s&;@?_[[k>UaFTM2-E<C_8i[D1&fXPI%(KBf6'`_jWM>WN9[]b"K*%onHe5<`48Vq_'u,3FP3<f#cW\X`F"+h2g9\^%5M)>j6W%`cecT`PQhe\[a`4Vp#V?fOs#QV'"u+?LJ)7d=Pc>%%d4d&Z%%FnEVRq%ij[M2.:iUC]Z1E>\*@%C$Ssa)^bkMh]s!o7L_+*>.8go>s$F\mQ/Sb$m_c2<J[:,#:Sb_B>!5QG=72ssh[5Bo&@Lt<7EUu<Xe)(:%dh*-`To,q/T0hXD1V_Oq8GSDNDk&R+=1DIdoe0l;i.?6rY<pIMVnEH:H*8g2h5]TZgNr0K^haNLC=.DZV%o>3V.YW?8=`;GLn&?R%f'j0*rq/YOEOsW[9@#Irs7j=OT[<cNj@,Rb&hL8t[c#DKJ!!]4OAc+nf*f%1oWi)>B$k%i>;iuo>WI+UD"eEcpV6,X`MLG`_FeC/%o97I:\(PQ+5I^YUW-</dT%]`$EOE;S3Nd4;4(c0Se%KT7Kl6`q/&AJU6ZT9"[cR)jD[!2mJ%D*[>AoPQ>4nNSHsL0&de`S3ef&E2%JM!Kt>^pu_28B1ASQ`V:LIXRXQDYL*<fa/Ep<Mr%bA9t,./#cC;cOEdYL_1SpWGdi?2KQ*DA0=/lYG+;V<@f<+*QH=]!M)/9=`aS%C7I2.QX:VYSWe4p8BJfZrc[,I*A0(?Kl9\AHXR,nc_d"'^Gc/g05"4)bH5KKhadV-h:-I65D31SrB<)gs0t8#h"c%P[<PVnd:AM_%(o:&0rBFnY8:GONs.`&?KL<!^ru%S"NFA(OXAL1*jI\F3:DkH68TL&(7L>D>0IG1g2FG_fU%J1&o,B1;jKPW[Nu0@R)'Monh'ET(%Ck6e<D*>.2boud+oI0UNfRkrK6gaRZp"1G1rmoTIr5Rn&Z(Hl1^#20&GJ\/S/h=:J\_qrVd6)lDNEUfc)1%=4"3)=XF\u&?#0hn2%k=B%%Ch!9c)ftp]o-2*KF7p.C$3-N>`TEsSqdJcZgf^_Dl'l-tLJ(%:Q2@mR=dZr#V:A#gWmPJ92*N?-hLYpch[02sl,:g%T#bc1%FaIH&Io:I@f+pN6GF#$24lPLUh8g>W7.)g[++gQjM:FhVfO=go\Nob]e%fnK:UmL)(*mB/g>h81ghO'#n]sD;5Pl#llpL]W&+Rt0%`'=,1s6N,NZOcTP5/]\_&HD)ar3Hq(cT]93q[ichp*!b7ngTgClnMSa#P0Y>h2+_$HpkUhh49r*h?6lI`cidW]f/e:-1+H$H>gYb%E?:7X8a]<c"/4N4r2S/T<HfGjV%Q%RgOki*Cg^RLgV</<]</j&]`KjE*sOt)YO*+9jqK]%6i]UDmWDs@ES^&iMgW7K$R0l(;X"YU%pG[a%DPu%^]=<`kZb>1Ym<Wc[.,%ungNUUs5_iW2CNq[sHQ?1<i`1OE/+C<[Ihc8s$SV#(6%MT1*XYRb"4."%5<cq;^B*u1U/B\r%?@68%>C?+B@'VPs$sm0sgp5u(HL[tBo!3,%D?/B"5Sc=LR]_?07[]YE1:=FM'#6!ObiD4A/=VA$\1*e?fekXiZuO8MV`&kS[VQ[$%7tR'i:k4VGb-'l?M'.2nE-V_"P[3+b^2;>Bi,>NpESXGFP^j^CQ4CY49g&8SAm$opj_m.Q/Pa1'_U$*9$*FRC/;OEBGAPk2l38BC%CbflD!FWHoQ"cMo!GrBUF)6D%O_d97#+5:L?%d1A`\qF3[f?j?R(>Wbk[#WemFp'lX`7'WUZp:5"AqC\TtAJ*G1g8DE77+'>IHM8%!l.OHf#sM!/"ckB<&75`i0LqAC?eGW=f-7F1)j=$G6!gln02pi,6W$p7^c>+!+so,JOKQ-c#oQW!)nScR(B-$J[mkR9k:_U5VW6=%=#d?.ZN(1(poBY[o%#X"DB%g)fG8IYJYPCDCo;)(R"l4+%7%^EJp71fiXkQ9*!CepTfYFW;"'.\<Q=MO$;J4c&jZ$$?j[Ao>Iq[d%:B_!ag*#Ih0c]+3(PrM&"3EA&a8ggI5VPnK62l3`.r.fho`VBSf2>IeJ>\bR_D[9MJ?>l)kh.:SUB<(;Ud2#e_dHVQ6q@gj>gBGO%E)U^mNtK&`^jY"(1N[a@^rRk%!Lqh)^')l%&FRVTnFeJd1sH^WO?KB&3hRb.*iK_hgdV<A1lfc&VJ4aV)]t`(R)44Q!(YuV]``@k%0G#oS['59*HSPmPBpN9=.CW]?b+-"7,D6o:'J<3C.R]H,(*bStT,6esR%33hL_d_AOkY9qT]J5]SVucdQpAe;TZ%pO0OZR<kVC#t%CZ>j08:d]W!PfYR(*>YH$3n"[VLorA9i^d70WB@16Mei+Ig"/T+J//c%.l9eVm%b(9V=G@CmqTD#dHB+4m>#j!i"F15lahNFp5Is%$=ML&.Vp_,FO>#7n-i=.Z:_o%R]2"mdYGY*1K*AfQ)j4O!5egX@R-<dAqV>#fH&G1U#WDWPdu<H8[,_i",SK`_\NA/FVcn?k?p)O%C(L*,^tM&IZ=TuXcT)hka4+(Ci*;Id'XRpjf?c.f4LbOrWB^GJQc*!WJ]j_FZ2hg3mQcTmi3N.<!TTQ5X4)DBBOk%\3(OdmZHJ3;%3m"%l'BVKs!/kV"4FJ'([>j3tC?2NAn2MJ1,TW`",?@]HqQ1TL4e4Eb@j>W<_BD)GJA:.t\hQMX3Nc$1"#&rL&r;-o%#CJ/3]@+O%L?&J+bZ0XX$_a>p;-KYo[hTXU5_/5Y?r93>$.I9QE*?/gja*T&BZ`A%JGP!P8Ba=DP2]t_8&Ok92Lm>E^m?biM!%7K3=D5HCN)2U%cqQqk?p%Op1F+$_BV+mZXe5cS$R'OI@OfQbINa!E">3_8*!O>_NB>aB?Ppq1@,1pPDp8/=it0bR,LA.Z73`#`:!Qbpj+A&^o\W>o%`N1C_>Gqcpa>,b)`rHm6"LMfrP70ePd\MGG2\TT73Y%ABqCl;aj=^MsNoh`PW.>[=/N^nM0Vf1/W4#$Ze.qmtRCZ]5cpE4_'1*JM%!h',51^*'Q`Pm@fALPP7+f&LFH.>a"1fnMt)T1*ifLCFBdK;FthXb,)AO-97b=R6gK_AbI!,6#ih(VR:PuLde7pVnuGt-2.&g/o7%$%jjP1aHsp`H5K.Lak_6E:@,"kH`?cm1_7o&4DX&:dmlW"$$KkhdIpA\lL^C9(;mH'*'a[=5.\f&.h0_&0Zd^.gHX$QLk[&+Aec:%5i.?4p`e1'FaWu'('s0'*t_m8j;eb_4eWIo>d]hL'\>*.((cAf"E?$UdVKr'ludCP/AWgI+]/6AVM>rtL8;=59Y8Y<-u3@dJ#)=[%C\OX?d'D=q+p4?]f<>s#"tZDTPnL#X1pVjJX0$1HAkf*L*tl)H$Htc);[b_Xg"d`F&IKU/^Jus*fhlR/2puj0W6I3E%a@(cJPF#n%/V*VF5VVZB>;4E,2cO_3L\O"9OC6oG%(Og(AIfoTWX1!n.&6i=^Qf?"HA]u9-L@=u'f6=fBB&j*gNAo%dL60#kGI1f";%J!LC,f`%Bg;iU#n%Qge\LhZkETQ>`hbR+!gCO_"%PXU>IcXa2*s!qiMb_NGp!C_3kjdp5^/U4ZOPd0`!^Sk3YI`*+;QX8TjT8Klq'QUW%2^m%%8:SJ1/oo]$B\Lf]I%%f=jRE#N+>aMj5A/bQsr1*Os\#XG88e#rPDgU9a2CW#_]M#)oOiP3&]CoZi`hJ8VRBT0(+7"kGH'hF=D>V%4(q@?Q-h-#6dZD'0fK7ObU:1d#q"i/bRl'U8%O>U7d38D#'u?(([g9[Dc8OG#][CA?W]UMBd'8[dhcFR\W*7SFS,GB_IV:nINUsn%8(X\`L-E?8bBJOE-MfK7;cBs:&:c:F3HlHbXq[]:I:7$2$@1rtJYA:#0ZVO:JRBHM>[AKfYb)$b?/8$S@0Vr(mL*FL"`U.:n5Km0%=0.3Rn+o>'f*\Bkfrf;)R"_gb5eotS6@o!;!%WO.'0tDPX)*:m7@f4.m/Z9;gAnJe;[KlE^_L(1\A6g6@1"1!E-3JZ"pel&'mmbT%68[r9HbhVW`3b,(gN?q<kte(tY;$59J?-Tpi(f,O:e[nk$\E6I'aa.JfS0Da@QHa+%Nn'AmDDm]pLofpM[.uT_^.!Z2&=RnO'n>[%NC<o9+*e!m-@jTZ6t:t5S0/`dmYE('iWPnSoAIk===bB<+QbG$)*cc^Nm%UA-6Ymd[:+>;M!#`bX9$1Cck6Um]#t0]X:rU.>]qDt%@<,[Gq=jqDLX[$qnj"BO_-UY/-(TB&9=)%Q<X)uCF0;s'5qP`,Z3]tHOtfi^#d\W95T?*5V0.CS\rKH'0P9=6d^Spl%SbP16@0FY%n!>mh<7.'8'&olW%I"Wn3+g)8F!$..*sV=-!SsuF"Hu1.5RIK=c:kVX&BsZB]]^7:'*_TNQq=8'XKT5/%])86P;&+t@-KNqUI#L"%X2'=X$\TD/aeLQ523bcg%AIDaKJUSNbRI8T"&[fR)gMFOL^4"[IYJA2QlI;,Oh",:"ZmV09Q"Pm&F%(VT"=6tWi(c=OUL?]nd-PM%2&(k]Y7\Pa]KF=aJ3:]lFZLt]`OYg(fpBQr:pm\>EK1.d'fQC@`.Pmo!o,BOmEZRb68(;PJ!2tQ(Hc*R$_X.d(FU8L_#l$t@,j(\%/c:2*oO#D0,RCP[GD<^65&_C\Uf.ij[5W%<&QhYBm_RnbJZ!Y1MA=nY<juQ^fX8LLh^`(ec8#eo.aSsPnORQiBKVBm5p,(6)rQ#*%b27cqnj,1rWD'AVG6/H^\TE`.5T\j\Y`)='B*sU[%3_2,#K@5r_-d:;+r#.[TcBPf+6e?GTb2)(6L?oZ)U-16$P0TQb/Q-&QnZN5%!<A5>N*1ge#I?-(K@HfJE&SZ)+nF[k_*#LB&soBPog,g*L4^'<FTXJi!Pql%8E(jT;'lmE'i#Q4)2CO$0`R/f;oP::LE\9g?QlSh%4X052-/Aj8NPI3d<%>R0!9!O4Vf.4!0c\S1B=&iGK>;4`3jB!C/<ku.$G3eVTRRDT!\mf%64c[.=7H@J!liPcnH'9('>A+iUptq$%/?U1JY?>`K7%H,<`="qq\.1gA8GSY$jtfN`C8dMoi1!DA0h%0I&Ap?>+Z<.S>>nBf#T?:^8@MP(G-8Be"G%6jR"c_lU_$Isp0Kgl%XTM8q[14mEFgPsj#(+k7^XrQnd)[KT#9X-)!B5[6%#8-)KUO.!;?t[J:Y6Vr\K8g-9F/H:F(LeEZ`,l;jY@0t=C#rG\1\g%joh97%.pQ89>@NRCiJpPB&^<3B!MXBLNiAGTY(]0(^-!`]0W0ZI'MK6*dE5<1JO"hU1a"`J,_:YmQs<?kluOCBP=l_W.R]u'J"K%ns#u-g%rd>.LrPuJVpCB)G4XKU\RMC>UIu6Bp^tKqb0^.C!`VLb[Bt/Y$P6QY)T9Aq[Q_?IL+XXX7WK%u"!$,\c!"!M;?@^"sd5s`J)r4>[%%#/X]"p)f%U0TaC"WKTF`t^7IO\ZDj')=6bE8:B-dfL.BcjS]'VCcYDj'_R#RFr9k\:m"!P!0.*$ran$T[RT7L6s:Xc"4^C+V:#K%.g.V\kO8-k5`DZ#N<cX!V1"<loT<jAYf>HS1,[;b9cV4nB(CPaj%c=\LZeg_MA$Q^b)T1p!"9=.r.Stf,!*0#-*3CYgK:iY#65\V%`l`&\QmWR5M1PeYF/DT8*:^M595GK4DdXiA;mJ!1KJLD(`(U^I1Q6H1`P@-d6X\r9G@TVR+YWrt/0lZ*4!o'">CN*T,ood':fqK5%%<)US"KZ9F)i3)c$,ELqOK/ikc?4n_lCe#.C<(dFFBU(iKY?<*%]tsTf&Ybl$>=Z=1"(^bmb1j_:6*.10a5c*E_Ytm3[k$PPRBhk%N[IS,5sS8]0(m(9`IdUiNJp/`A&p)R99UJf;_g5R+FqQkU4]9snIgLq[Wop";'5l"(`'N!3(@ouL4C%:1JI<W/d%<X#96B1lA7cp%6lAH+k7/1;[b?_U-l:DV.u$<US1^=jX7608?DZ.A#\:K3!8.RRd[=WH!+=Xr"%C6B(q?eX\7H"nSbu1*a-h2?&SsQ6)[LDNUNg>_%5R[&/`dlqNZN;Q0e;K$M&E$Z)!Ya/u''\N:#T&9M^d).6lepZhkpR4F`@4+6dA:`#d(.M?g)1!GjMV?MFGhYV2,WfbJ.?K?>L>V:%![Nfe0+'nL%+2Ipe".7-1)Fep,P[5!+T?5fNaNaLP1'u2#*2$;@SK;B%PrrN@#k+m@U96TXGD]GlpE/uAKZWc(edJWL8nTQRk%TI%B.1d0"fH'4E(mq^,7Lk)$[M90oUlVP%5$?8U4[_]SRG&r_#$34W]c/T$MOgQctL7<3]3RL#m&E7#G!<<1'q/S"bA_`mj3L_Tn3O@%YR,W=kXHr\LF]#Y:n]%l>hcK9ETOcB4.RXcr('+W=t]7p(=L_YJOZ?;*O-U"c1I$k0e)b)!Q"=$.)"]*)?qrSbma+bJ0[MB\Jt=m%13>,bbg;8&F@hg<:B3+VYD\T(TI!.AE-R+M/O4[mTt(SRB(/?K,<>lAOE5@L6VNE^-RY6LkX.`/*!AoV@Nkd0QFAtWJp_:+WJ)4/%6bJ(1#F..e+[R4785&F([U;`1GN[@05uUAIUf0CI2hT0pp@ON%BVM3I*(FdeSU*R8U63L6$jco;Oe=GQZJgamCaRF5QAL`[)r>i`%+<;eOd/JR!/BGW;/QWbK#6\_+.4#n_:mBgW&O>Vd)U$YZ.7%U/d#1=(7^>EY1,*r<a//I*c#!MAiWoR`)G=19Xr5`Bc@n<T1b@TJ%?s:nhN(b]lU^$<6-!;\Qdk>giNYE?71>&RYML]f$a`V%OC!.9WKcmTP'(VtEa^7HkF@Qc#g*1/RVF^XM;?3<ldKO7qLkHra'YG9Z%TX8OP8QAa!+`\3Qe,[G:_B@p0LjhjUWJ?3rXm40Y#Dj+@8-d<mK_abbFG<IEn?/So7WU.RZs`Hj*&u^TE`#SGqaKUd;qO6?+N_99%6RW)TU>>Dr(^_Fm]'0PP^`CgS\5ems>>AK\`Co_#Jj,X-X.1&Z=m6nF]d'i4"EJ4U6$EU:!q)$oHm)_dW]SuJ06(l$lu5?2a<N+)%f8Zn+9nXu7Apf`6FCp-S.FX]XYss*3>TU(:!&k/`/t_&P*Ri1WKYSWq;G:@DI;1g'?k+mh-3A"\nGmN,#_>ZhfL;!N=CI:WbQ995%(5Xj8]`rdM(K)^$e1a>C(k'QcF[mihEO6Sa-AcG]i\eQb+t3.Sa%_&>I.T+QQLK"89Y_t9Q:RteL(k_3@RGqO\r]?2+<p:Uq*M59%?_VLG*JlP+[&=IU]Jd2Ef\PM\B*]G^iOt,J>8elu_PV`c"AkPJ4?#p9"M34k0HIF6[Otkmc+56,0GmurYq%skkpU6i1IU)b5:'8'%?UAVgW?,>Y+J=M.#")&e#cij(LfZ!B$H<jQP8g5Ul3gNg*2SG/MVAJ^!PgGOS.&[aqM*7*f*5*p&G]@$*b,NX1`9/HK1uKs%2hE%%g-GQe!00!._itae0(fpg>gu0o-k/+#,]]'43g[&6Q6A]>;[^1T7Dm)0H$1Ib"1-)T:)ZfPM:@,0M+]5<UMK"sZnqgA'%ql3IC2[[%c,,p8fnLh=&1*2M.82"plCj/LL8ef;kd`%Y8(paE':RP8hQ-igCeJLYdupkVUkR6L#gPd#b:/98c47n3-I9WW#-#LoOs=O.JKNI;%d#fR">tbe?A5tCR/t%UUYlg-'(:Z'R_E^%eQQ/de0&\>+`urG=I_B].M,''X<o4L2+m2LSYpPm/A'BVE2/(QGSAGdPJ>7A4@*/`-%Y2b<qd:`k:7%F/T&D01)+td*tNK/qfVdW]Unp(cU2kFaHJC<m[3"'78>lh1?,E8)N&02UDZc7]m,;Y8gRk8GLBM#"T"\K?T-8*qV%gCYKm@?O;>0J\mD6pFo.Dhc<N/`H;`qo6S8!.[X!!YFmU\Y2C2L_45_8DhV`At4m.JpoOE0+Jm#Z3_;Qj=I8/%s/H3PDM)mjKk<G%*Q+*o^L_BS''58f+D_M)j:Dh&j8g\5ihb,"'#@u3ciemc!tu7M%4(X@!+ZqL8@^H%g&S7sU5$c=m5LSkZQ5^N@EW>?G#')tFpuX+%m><6\=@A@\C:5A4r6sR8@[I4-1K.I_h%?b;F,Fg>fagM0Epj$eV6H,G(.BPV*>AO21$&KXOaY%]2WY>f;9p@k,/oNa;^Xdq*0*@9%%Aa#^d'LYpFA/;*VQE5@S9+pbS7C:g]?4ST>a$:g8Oo,p\ShI^@R;u!9_]tV*Ypql+TRJ<"JUKa_m'E-HD/sr+f=IXJkcC"Q3>iL%A=YO09`Pgh_W]&V(D,@j`blee!'iqg0l8sT5p0C\K[6BLGoJ@`B%/A_M[>%J,K\1d(E?X+r?kIi!?d.PZJ3UR*%?Ob:F`e"kp8\8%DOXB/dSR*f[X^DX"@OM>keIVO!;EW.5iP1qoMV1p\SaqWLC=ml>`s?CGXpnA>u>_i>R$E;mi<<LneEd/6#X;o/f0BQ0>b+C0&5BN%(].ld=`Buup1$\&6-W1*argeed3@d0!(;A+^iPtO*[ZK%'b8lf?84kj<+R4b@*3@9*D(G-&qZghRO+hJ8-q*^Dq7U<!?KW'kq*ST%&mSZ%?6(Yp'_J+BVdo6^qJ/\1?@m?1.KZBPANEB?MI[6sq^7&J;K;mK!ZY0&?n9;XfVV4'/`XAo8fHFu^7aUl[OGpm;_*\8Z9(bt%&#Iah%;9Y'p%si?_D2:49PoKtQ/Hng:.%eXXfGlde@Q)0!KKYsfMu=k#h(2aXMQYSW6%aM"U79'WJl@QB8:I1$Ogfnc9o)sg*%Vg%P!DM"Kt%e<`TU^'@Aq7&N(J.JKIil,%-(b5Lmr6O5aFMji=FjEM!3k!P3k;nne+lCH4<cW&k($EVY#J*EK1bXWIa6-bg>Q#fk2?1%)9g\(#Y=,`l.cCbco#B/D;9TG648i08q*fG!e!?`A\T%Jd`/kUU+:D8K:uTCa"9pfEJCGs3s+D`=rR-p*)*Ig\MoM#F-4ZZNinA<%(W)8J,#O1>c'0)eYsDuJALZitnN_J:#pMgmd&&oHNg17:r0/fDYp"d"2>li>-+$CcHUZ`ldZZE'jGQKU]At<-!Gn*1iZP+G%fl+;%G(Q<PnV@WcaM#u:EJ,U'ihVlW#_bZKRZr<0%8i:gS)TqR*aZ9?_r0F4m+^Kb/'u3i?mC16RWp#K$XNsl+lAMi0+//^N*hL<,k7+X%!Ziefq?Tl:?IY9<XH)K!Fj\23GsQt`@G]"ik>MX`0VkKY-&`DsU.EOUELG+)3H!2&XKh(h<o680=Bm??oKXTL/<hE[3/:`k;(R_-%4B`Z%BaLF8T;Ll32MUAg,5*sli;/)H#XVKGn-GQ:/(G%hHO:m7[ff3RL3AG8Kjmr$?sX`OY3'IK8#(?LFd8T@,S<=)3Ufa!8r=cC%W%$8X-V^HtG9S;m657K5p6&]N]0rT:<GBL;!\CF7."N#^4pZ1r('3*Qk4)CWVID+4$'YmCjI)l1+lP^UO#fV2Jm3+s>0mWYK_+N)%W%jF]<sH^^5K96Ba:,+q"PJZl__Zp3hS%<&Ss^7t5FO%%')XYb8.u->Qm1@f@L*UH)'PiURJnW;"lb4*Z\!U>dC"\#cVV_nbJ^T9%TIZ$e"DqD3q=/fOANUVKW&%T5)%<Ymjd?b_M=4Z%61hhkYB)8dE\.G>*CS9:Nf#$HQ.`1jd<0H_L4fW;fj]OX2h#J9>KmI0bTlGI%$l&uBO]3[1ZV2'qj%/&PO]b"gC'#O,$`5(j_6IW+NG=87N/?q%!R`77YmiJrdS6,1A[F%*)k%P<BQ<'7Q^KE,cu+b\Ga(+t/UN%D%g^jHF^_AHt+IfBaK2,[+8J>YX!mj#NoMo`Qc8bm?_%!pdO`;nI(8q&4>RUt/-n?W:Hp*,M:i.BCJ@iBO/M;4pCr=F>flG9WcaFFA%<f>7=:`dalD],u.o/[X!8!LDX]#`;FMBQdu'PUEeOf]96o#S6_p?pQfO=iF2n2iPE1ea$tU)cO*lk2=eLp+>@O/D;!9$B!E&f4am%Je([(0o:pli4t#(-:(W)U#bW1I#\$"1@7cI/:oTn>lb7b4Z\MI,'^Y)\TJjfKTmh,gRBuNmhgbT8XpruE(/CL&;)SJ'BmHH1;-=,%81Gb?9HRe90%1i/CDLJIPbF5@_JCqYTcu5[#%=DH>OI8eR3lNP=qFK0$R5HJ0<:t#BNp%6TsP^Sl,I,j5S[5Y+.:=S@:Z7YmoEgq%.?=qsmQIIX`2',4;agPp(GiV3/M*%mXu,OUY&^_k&;n_S]PV@a!&UsS,i'"$2gHLVV[I&DduXc(FJ5HFeq7C!FAH+9*\LoG6C.c\%HuVq_g)r*ndlYJp-VY)&m`8'<D+RZ4;l9/KHrOf`()sM`*$n\c%MG6PKG(T?Kd4/?>6OpZ\CR6e,!eLE*)CNU1'<LG%(A@(_sBPW%U+K::lK4+d4&Ss*dTDg6^`n4Bkdk"099_3?-W-bnbp21$>tYgIQ7&L[NLV@hADJiJ6]SO?C;[CT](eT-mTeb7Tdf,%rGiHcZu^?9%$145`?3?X*4;UKfL3nVf.o",t(h/6d.04>5#ePh,.rEW;1#[_'r)AYN$:&2W%#STbb5ddWp-?4mZG!T,G`73f!?`CYl<*^<jPUr*%1rr]_kbQQq]''-cE*@p5k_MVRq*TE+8fcX/_tufR(X*mukuR>n]V.(1DQ.K_:hBXQGa@!%6:6ATEm;tXbR\A)ZcU,W%c:*\WgbIC%k45$Pd)JD=b*<*"'4Kj[S/`EA,%<?4PIW%Bm=mkOJr^6E5AMRRV56q\:U&20Su3&L:Lha0JHlc)6;(pK%+D$9^eZ%L%f%cO1E=4f%?4KUeA9:;!XG01ITS,?ohi?,S'Ap$g3.uZ0eF8n=?mAUZ\fQACa]oamdL+L+jtK;n[L\Iq+k?"5,QZ`,Q\GkJ9HMESFhf\n:="29%V.N$SC=:^31hFYr4<8X)J0dn8(AQ=1gRo_rpP6bp'om&5A)fimVKAm$Lce/D@kiuf\`dL;NpE62FXYcC;6B)_ULOq\(<>rtnIauB%_K$.h!9kJn.:p)aS=7B*),3e\kPr<2hIY<%*Q\rkK(t*_8O.#5!q(I5YkrMM&9(h$5UmmH66_Xoh8#""+fg]Vrk<eDN25ojD@OoQ%^?K`'N(1-bAiJ-V;rU5)J;eq?])egSI4f5A.@KJ%:>AL=S7@`o%i]'OTtcQ;p[4PJ35@.)#e-2)6TfZZd.=F4)g(:0`.H(W/9Ap$%4Vf'u^/nOja?1Cj\h>Zo=[jgoAXduq7s;gpVWFRm5,b4"&H[T6@r)oDFOV\#WeV)(o=3l8.eb4k40Jj0l2X,'#NRI2Ulj/*^-e@@%jedp1R:J;ELNZE?Ua6g$_pFlrBn1)<GfZH&gB&cSPjL+H8rH%/&ILt/<K\K-C^;B?[1i[_XnA3nB-8*ZqiRbN!5*R(LRCdS6pZo[%2k+*mrNT_a8)`Y]Faa&*VT.N2;k+cMMr]UjB1AbFE0?c[UdU_;AEredajHGa3_(%NF-CerGf9)j(&a.S?7*d5&'9a-S8<;^Pjsi[%17!fk<U;-EF[V@2A;Gi^Q)UG7J5Nr!O=T=4fIX^OinR[A>froITNO$U]pal3P.Z?@<Wt"[JD0rGg!YVLQfS!YG-*H8!=<=\^PG^/%RWAJ4#\&nF43\JP,)$`IX#)uW.!0e7%bm"9p*Y!@q3o:0LMO20"dH(9aZO$('Y*5cG0Gt,.&Y'I<JN"+OKV<3lNVnfNbAeL:0Lt%%DA`^,dic[WRoMXe$D6/=&-UW#?nUeO^T",YbVh%sj_<Y64HjdYq]_hlK.LKp(n5PUmnbE]YRkRh-L24jMGS29Cb<I[RF:d]AEA11%#2oT^Cd#LD5dEGJDp%d)Dr7+Nb\%D[2J&=E=,QDc7sPLrZjt4;-8jmK.:i^qV$SRi2Sj[=m0O1+Qu+<LJ>F2W#m$YNG;#t6T]h7%%Om`kV6u"(E39FEGSDi[a/XZqVdsh@3U5.A-%DVbdX-t\0-(?N-KPS78Yq&RfXoe@nhaq*6I6'/=*e?\]5V?mD!OMN6$**qYI,DS+%nM>r2&T_C]aEHOjYqH&hR0#]3_HS_JAW%F;D]J'MWKKAkLF(>-9X=DT`I"J]@2:YX:m-HsG8[uZ],7YMc'YKfrL.m4RK%7b3dAFI%cZL>CD2>dSGT9$YfB.4Jb2F$*'Si+PNQ"9L]P>@AjW@Waf[l%G4\*T]e'o5?#u:($a^-us@pO2Tjtc9X\5f!a;kkg+jr1f21]K-&%Bcd`@$$qJW\t2LVH+=[W(58LQ:#QP!nKT?+aX/AWU:\.!Pr0%39PCFsVZsA]6Hd/Z2&+A5^Z!t=nV$7e77;&\8:eo3$'T(:E5aE(%<ro^cp&n+8du\@E;D5VA?25J_IDi%C6_m.3m+H$9ZhENpVU(W.h1p>^Eh\AY1IYLWa"%BH#GE7;gCp@#7N5a@c\?P\dc<Ru6R#So%8(0haaCp-4<H*b26T@I7iu1(m8%j->-`+0HAc;/nm*8#aTiH(ZF.+@m[^APS>1ElcQCbo"c#mf5"")-(+rqV:DhQ:'rZVF1h3#b$%1X2[bgVMX[R,lc&WJ1XE`.*Wn1-*.d=JFpN$0AC=Zr8fdgl=)2T9hJ3)'%!AOUL91Q#%kl52oDPF*nG!+6"+gf..R%el%qKg,k$W%"j]VAcs(r"Qs7C>Vi@74(/b.p<f6R1X-<R<IIQ:E^GS7i,1g&Gl!Z^>&K_dSDiPu8HR(6[nYRWu2@im0KK?cNBVJNF>/^qD^1[[X%hHZ-[rJ\&$DQQT?]kKf7Q9V!cHhR.]UA<'a;li&Df@-YMMS@Q1Mut;-;5qXV.:!#G5M7MXT*uTKa^[3@Gg>5W1Ct?Qc6Q?Y7CP5`%np9>JdX@T)VQ+5!a(7CDOr<.^o)i)>0d1k`3&IPQ]JP>KbV:L'M99[^-3nNS>1nFNdftr\LL&Y/^o*OXgql`[g&?1DHnJQg"sPW1%41:NQ=!TS+m#+S1DYAs/EFe[GcXIBN!X3R#RjMuBcEZA<7R0cl=6-E7^8]3H=Rt:G)=JNM-S'`9hV'#W"F&m_HGg0%7OU8kcNN4/%*Tj=NVf%g`7[EHZ?CFK:'[ar6F'+U[3mK;ad&sJ]:Pf3'l'%@5=8YT6B5qbGkDCtN8@,TDZ5$ZKA^]\0;@;r=Bid"RJf!,s)3BrV%<\<8%Bd&'TTVGeRXV@koa7]nmX!2VI;QdLuV$.!;fr&+SK!)/45TH<b'-T&KE#mg(WV@63k5+-g5K/B):A.-0&!.C,.kYn:O]$WT%\]G>06^FpQeJQRE\(1@?eH7:NS7<:.90Pr4dZ?9(/.E'2K8^m,=X=P`$dSrbrsgRje:abm0iHXK4IK!#]?AV"GTU>TO)V[gf&X+9%[@iOSg`d3J33Fp.pu1C_>Bg/]j'>a??SJ2(g;OWUo1Nc)p=:!c!,_qhU[83u>-/r*-=]T\J6$H(D(1*jF!K!("'KIUB-;Lj<_KX`%T^?hVGK&-V+KM>\3WnO]ct_mS-(],tH1;tD1SLp*XM?'1$*De8g@>V`nm;=ff7LH'2M]8#!Gr50[B8WWJ`aj\3Vt!k39$Q'jULbk%5Mt4AXr_7\b_NSZ!k5TkPrEBbp=@f)p!!-=Fl9^:[IT4!Q<r<cDAEcLCj[=?\$aQ')`1cGC[85fkNHj-b\c`_nI:pso@ag]hc:VE%q.kWFF)0a:^2@^@?MW=+6b$,A?Y@mWP#3nb(8Z3nZiWIbCE,e=JpG[n;;fgZnD8or,;j6:H)h0_oiC8AQF-pgcD,VP@;K0:L=T,V%b:YP[DDo?-"srE/1=WT7$E%3OciO-C@C4_'hAf8bPMY`$<mIAt?-Y#[BJ=&`beAUgmF?s"hSc@A^(9jWoS3JeIm'B5DNJLHDifJD%q;0[i37P+<`Og*Ajt\3u4,!$66V,Rh"i4`!""ju"o`<oiP+rh]r%:p;AJ)S;;XW"X0U514hf?Pl!tRZt59K@fpFaPEnbN/u%p;?*%>RsuV@PIHuR,4Oeg07dnXBP!eWAA1:8u=OX[Ii1uF#A'ie,$JsZ_>\MPcj2tq?lc=rpd7*Z>;)hRN_<.7P/XRY9/2oq1m;Hbj9Dc%*mYFEp4%VAqX!Vh1k3#GD7(m&PI5Jj0#@AonTX6OA8S^G:^*lDm@,T0(<Vf7n'Gh:Xf]WH7'N!U/:),L19W%s4,FI?g7BLZAiMRa%'-9$O,,8mH<r2inZ"0jio];$(:<^$NCZG-ZOh,hX52qkZRg7n6'HcoArb_XBj`*OH2C)bNMX)S+*#Ob=([*@RKGQ>+R7ft',^`r@%oI##KQ43A=4VuZc&03pgWIW!NW+$eUWW71D@tCgJ4I2]c!'2"USg$t:1;:MNk_JoePm)c>`7Zd+d3eG[6tVn(iG';VLLQoeEeM$q%)Ch.[D+]HN\WY&HR]->^*X!LIkOe%>`N?B5]de2Me`uVH1;#>5mV)cYo&(7NF[Whd$$SRSrZLHC2Y-ENgO0GCSCBqZr3$j>AOOoJ%Zoref+O$-crbr7C`Oe0c!]P7%[?-5p[Hds_Embt&O'ErccJB6j`r=r!IrV?K2cX^KqmA^r9K]R4YOdI,_Emh_52Vie1T\/S$DR]K%L=K7trCb:UA0RNs=O:mOXY$/Rj6Z<eC5#m7g3Q&9/,t!N#$a(XLS+$PKq,;YhFD6F8-RH%L'BC)!l:/3IDK,l+f_lt9mVTq8WQ,P%,Hb]T[iOi@1>@+ja`>St/E[!6+uuI1!2-,1H,EF6Pi">:Df*Hb^kC++`"egF,[fM**BDhOBK2[t&@]0!p\EO)Y70Du&?EAs#Z467%rEqAp6N$r\GFre*`J#T7F4f'I"jP(_j9]@FdFlhe3NVDa]X8FUj.oqj.0i^k_4&dd8b4CJTojB/+T0pU>=78W#6a'*R>J"/>g071%p5tcir4ppMZu*.dHKM"Ic:Va/r9+__bC!Y>Z_c8sZt"0;S@*+D5hJ0cWu"H@&:!#<='=`FD/HtpjOS*ZcJLYIBV%L*CXc4eoOZ[!%aJ8[aQ6i!ZP=nge%ucM.=9JETTHr9l+GAq[,0OPIL&lFHk;2b4(HALWrcj0F$7>\kl!<YaqY5eMClB#X\/Uak&6t"59)+l9((dUe%D-LgGs4G$ecP6'@jhipF:o5:@$X'K[hYGrYP0C=ckkt[,OLf[B<0iEJ`Dl&%g"d^N2](-r$49l)lSDg+h[AuegfhUfZ(_qG;bfcM%<Ouke%MU6sSj1*D2Y**@L:`$Nj4tRK>FB!P3qR?`J"?,bqLY4D0NB%+P3Lg=[*ALp$H6(CU)Wq&#>u/a=rBE^*l:pp37:/i:^iOe%=r:CKm+GkHA;[6_'I(omoclGDR,.ob^T2;!']s/UX-LO9dUdnAM#P@dQ+^>D_#<)?cD6VA.g=+o+ViX4pZ4bZT,jBH/LW%M2\]&B%4g:!s)j,[fj;gF:Us)@Nc'UJ4.GYrPBkfYX-TO^kEnrmT@%fNO6J-6"S#l$(EK<?@H`YO)5B$RZXHG:7<s7ReF+RA\3pB8ca;dh?%jF&aLE\V1S.ZX6!M&n'(+U1.gr2;,g1DVfbH@NqJ0L6`r4ih`haZ0D>"?K3)`K*3sFi6>;CGjlZ;g%d+o"X).XH-`o!K^C+:T+?S%'?n6rcl@uSVs88M%@QDTqZES?$36",Z&9FT<^uGdHW4+i)H+=p!@-]?O(e6=8idj=4B+#=\>0e8oj5Y5q3co8cc>9/OZ/;jNasH>%2dtF<4@3uK3cK;P^\L;_hc:(b:IfiFj08mpEgi<7Lb3;3(k@LU`"QX1`[:s5Acdr*@t04\`dlWY3T^ub0QiZ"&$Dsc$pX]H'^%^<%c^^_r@Y!lRNO]TqA_[BI1X<"QGstQ^Uff*b09/'X;p5aDToLF2L\#56Pf;P@T.VS)TP_&j'oO`<OKpr7WARce1G?:n$HEPi?a=T8%$2%pc)`$bJDM39:"uh9KrMYK84B*^rT2-lgaB'ucW)HhY#G\-&7iT`bO:N4B]AtnAN.^-Do"-+^giH!]NU#2l5#.!\gkFKsZBh.R%@L"0nhc?_@*N4tS=ti</fca/f#+48Q1:*+'hi,?>-+qbAl2Ejf>d+V")&<[n&$F4A6%!;_3fe@5LGRHqI^D!fo27<SfokQlKKDRT%.eZ_LQ`K0]<<5_2W]YfV%kOGOUns?Ho!8:k.&@`hctO$L;5J9W^T[#0OES*BH4ET7q]tIL)2,.;L7LY1)%Y)T6CCt,K,WD8Jba7E%#lC4CD!u4o@Y869d,E94L'BaSMm3dDR&Op4m,22g9Itr0L593[nEq;Kr&`mh?2H1&!B&Q&E9Bcd5F4`?NINN._hU!&GMRi^G_.T2%D`WM[:4WjgM'p)iD4.H.0RG/iVK.@_(Q/%_gm'B+_i=^p!9@0haHCXsqa[l=FGJnOVCHD#GGAVij<:9IhIGf;02^no#+=/e1M]@B%hj@RBLbGbhh[IJJJ%cGI"T<Ylrho_*&XJC[1&UM3n\[#Ql!hKVQW]_e:;DP8>oI?;X)@3d3:M`V@D"S6&I]MIo1ZKS0Chu%lCJ=d%kGVdK&h2'F4&poFm;JNGR'qX&o-&]D`ZI.TH19rK=oo4@AZ/bX'P0=`<a'%*=`;19SD@V.@mY)XZ\Di_#*ct`)-Tu02I9;DeoRFZ%rAbD^%XC\?++=78=fSorXnE^>[ScRbO6r#JgOAmWbgmFUc!sZmBXD/rOA0gMBPJ36g/99k8$#AqZDp0$Jj<JM"TIfi39V%7r[f^-%,)Jb"W=nGl@:F!b0U<^O>ae&i5(h5$ZL`"!2O5ZjbLmI4Qo'Y1@5Tp!`)M=uW=f?fj2/6t2,pLOY$XMh9'cfocl6@^aEb]*B^)3_%!+J'$W"O?%o51)1"@()eBjH=FWjD0*_ul/TJPg&PWR)sT\+-^r>lrL%i[Bm@JQ+&!Eu2Cji_kR#H.4.E\>jlq+)r^ji;Cm2raI-2%5cVcW&e-Y[\/niC%>f,?Sm0QH[tNJDE!_cL_BkHD>.Ao@.Os8>$=teo+N='\Qqd"`7>D8W$1*&`s1Z](lQ`:[jR'SSYsWLb0daXV%#`%e8e<<t7aI*/+T@6!tk7D9Jc4BcAlZSaf+.M_RT&gokf9%0$0E]DQ8nqCHj%W?ZlD?9;36.mXmsq9\+oCm\@.c$`g4flmd.r`s%*p2gk%$k>"LLT[p^.a*,+V?Erj?tZU&-dcD]>>6bJ<@#S0\#2u)`iaRVq(95@?=45E#qXDD_TM!!q\h/&9uo`(:;(j/qPaL&2b0l%N2KgVHlu)*g(5`:f\9)U*(j6m'G/$$X:p;G>@0GBl*@6da#YlM-f&kq4N$Z$lWE>HLk)I8TiItp?:l!+X"5:Wrqf#?[]*a;33KXS%=;+k.p$4;N@r7;&E8;T,+h8a[8GAa)!R8Ls?^E2'kKm"<.9M7<>7/r,3RR@pYQ3'WD?UF.fWVXr/-(V6?>@f3WPHhZNDAXIS]]E,%3>?ok=Q^tPom-hQlAi<\1*$>*]a=KeF'/hcSiMh<'W`ZI"`$G?6Jf`*_J_X$3SL+s@.-ocanEV*TJ]Bpen9KF?oTIUp4<a2f!ZZL%!A,>X5.LKona'^*&h!b!8dm>f9F'\^KmERsj:XrbPHt?02B=Ik3h8nZ<WnZSJBuO49nK8#@"/X=1BGOB)1MpGEs[`E'bKhV.K,X2%3^S(GH@FgIJq(+%'`K`/PRU/=ZE%@:$E>sJK/fgC<Zt86O%2p[E776o*fs!E#D?aN%)6G*<Gn!VQD'%?;<;4+cur0HP+A>gAL1bg%5]W8Wf"+e08d[4bo2+WVIR'a>A3D)X0UYeS>lU=PW._3u3PWakE!HGr3F8O7edc"]$[2U9%gt%,A=r)3"/<bF6?n5S,gcIN!]rEr%7pO#2gn,oK.=E0b$HWJ=Ecrg\]fV-okq)$3qOQGN!nr0f1MX1,*\Q#j43Zj#28,s'\LEVYLV!(K[gUd=NhSum0ATkND#o!O,=/0*%IRa`N"1][Q77k)a:lPI0mjD,?]Wgj\T'45Gc9h4s7h]s)^+8h!Y>0R[hGWM(o9XluFJNtgY)a$*EMcb+AV6*82OgYhOc0n^p`&Xi%qsuQ)k*I8_!Qc8*[#pE3ZmE,>JGSm-C/=JR-3nbf`mEu[eE>js]pT#QeJg;@=*I?Q>2>STeFi6$d@*mSOgD/O!R:%o<gD:pO;`7(%"p^Y=6t=R2"=n#+-NI[g3DP\E2Wi)SD!k[sLbFQXRIq-QJ_,f"hCqJGn0sGTQ'MK/1%iNp<7_Z*i)YfA]\o`c6-E^;+-/IYp66d9%QMH7W:i@pJqQ;-E\u-2B9;pJ(:!]mB:aP2=.0J%Tkp-;ZVCob&P68[Z<0"2%XNqpm^`F#3CSp]o,pHRJ:F_;5P6$%?9fI-'*e5o;%:nMrbB.WYRpq"OF(fc-u%0o(rbNA+:,oVJ<P)jK-&Lke4BX?s"C3'cOWWU\I0Se!+cnt&./._acO;4bnLTf(9#OE!SX4&)<.soK<%#!7-r*KOo3?sVe/;<r.eI#s+8X5NBEfVt*/`kHkKgS+MQdV6L3111-GTtH8gOl=VLY6Vi_AU*m"3bETDdM*e7hUIefAUeuHd9\/-%UV-R5iQkoJ4.%XL2U,^%B3m7K!I&L<p^sQlq3gb"&&lSu*Fcf=?Cp4Xi0]go/c_%k39gUkf:f8aCLRKW%Ze!Z%TbSepcZ1bhjf2o%`mAUmG,"-&+g8ESLL3<q=P]7`i@E!l0jS_Jh@.KS]D#sJbbuHk>$B(_j(>UYfTft,ODs+FJ99iAc9)-$s*T-pG0$rlpF:p%ILT!U%:cQn#DTo^g*XfP]3CmVC3Hd#]PV!PI<Lc<URB+c4(#YP*jO6q[+YiZtj497b3n0@njo4Vn,m/!LGl9'S[pZaQ,a_/uVAN9V=R6,$%6j("fM_10'<&M0&0n&K4nHHL>*,)>]%H]ORR6F`G%].jP31(0&(/T.((*(86IO93'BkFQ>Z[4Z!,S1Z!:^YgkEncCZa^jK+DFuP1%Z(+MH8A6U4_hc9)AE2B!$0_Pc3OkY)Td*f(N>S.3mf)2"9XRe07?9.*SlV]2U#RTQs%rKlZ7^)&N$$=kFIc[IebQ`Un,ZKpMT#/I%j:P4#nOE(>Mom;^J$p[NpHkm\5:[>h%?t?u2%kGV],AZ%4d2Zm6n92f0A<)U<K9nT_b-&r!H/n.nFr0g8&S<Ppu\8/WDXrG7?s2+%4'ps5J!f@3A"2qTid-L0cYsr72+&IdT#mMA%,kLS4TChSkFJYmcMU(&S/>p0*(Q5YW\/"+MAb8ccDjilC6:6a\O4EZW^_tY='u[V%\>k]=P*_>0'W[Y$fBP*]^?!1U]d"^s@,nJ):ikm:i98J]XT040:l_tMVWE/K>?sDj:[RS&9rD=*&"(.jJAhf^o*cR//9MA\p10P@%gb5@Fidq#,=7L$;BAT#kW3=i[BYUCX!1@QEN1aU6CK$g2mVTGWm56qkAU[0X^p/+HVKU8A/_-*!ZQ<l3PQ;0jQ$fVurYes@DC(_I%$4>=*7sMrakaQ;o@#W,lM=e-e)2Dr6@+]Cqr-%fnQQSE%&FtL?3=JDPqa5%b_m5ea?UA2pgOAo)/_+ruTY8_%AkOl/)gFKjRWfM1%"C!<\90%\,O<m](S=YPRZXRM-FGHrf_C3Phc_7b;_`:@VYM0*DIQKsrE4'-aEkQ0:V`Q/('Lpi`Hjtb%\^:*KBUIYGrRDR;mVS%L%@C?dj))%GIl%W:pV9PY+HRkttK,;#6KEQ6$T)#(Id\(Ji"_S>5a.1__A,k;@l%CsIri*PeIfOc-m6CLM$60"%d=)*j`K\AU=l+a5%6sHpZCB_$M5+(j;_:O7QYFq=V<".iYOl(u=U3"9KD.XC25rJbmbT]<r;J[ZlN;(<:]D-a>A0fH%OYAW$#h*pbIq3^7%-K1m*pb)r%?ncn^HpMifDsS[XA=NH(o.o)i9O\t-,5UNpK=6J:B*uC](L\5^\R&e_/]Vt;Mfp@\!8_KEofn,R/ioP-E"^@Ph_UOc]JB=d9m1[b%iQXI0k[9^'[$^n`/*YgTs4!3.m*b$Q^6Fdm(Z,l].2gTWPQrZ5N824fUgu%b$$]8Yn>^*;Th3@VEY/"Kq$Z"=bjkleH1c*]P2Ehj%^9F-QQgZW(1Il=8R6ujJ^OhVSW@$Wm&<1l:No18f(%k2;V$G&JD;*pPH7'F;k,.CG>!uW:eALlM+td.u^'KmXMnKmDE5)\&8c)iD%R1V<qU:V@P-LQJ/?gEo#*l'%;e(rN+m<iNV_9QGR2kNTP!1:!Ma[p[7Ea)pS"=MWND*WO?ZS)Z1n]l`jI4>;HrJ4r`8+:6KE!q\_%$/9Pb*ZJOWNlT7%Y6ImPB"#%rd(\;K!Zo])9.)rRplF<mhu5FT&hsts]>R'F=X$?(!b-<V(tY2K*7)DrO5`lu]Bs(LL7^"*-$R46%?7.kOS*Bl19u*]a`#IJ@0K%Q[]P"GMDo7OO`dKAqM3_kWUg*B'!P)&H[S_3?I-ne*FLk.%SQRMHb&ksQo'.9kh/\C[&/Ub[G^4>t%7/R<Sm[UB=i<qD^lSEBr!uiA3_3im+<FbY*1kR_PUMAkBD3U2c#_:!aC\5\RHmUST\LT=D:(c:;Q24BC3eX"N91S(0P+?i]$BkH>%>n&OLOH:s@Ys3P;j11%[OBN*cTTfOGc5qF7@NF_lP\cq0O-r+0A3a3D!9nOO*p*69QQ/>:2(rue.">o"a=<thk!,1\ArmHVAbRQQ%5]64#Fl&@('H4^cAdq;\^LH++JAEH"W$FiJHQ,*=;*(h%os]GeKV_ea*(U@uD]"H?LeL@@BI8_S$:,C[/C/Y,$.dC"'e^WJrI?f*%B2k)a:o.*t;HY4F]I>F.2LH*/V>;E4jqbmY;Dk\f9ulO[>.qmbf"p$/%CS_q('_4Hr)ob@Nmg;K*:h*-0@c1e+SRtCi8h^d;<L_e%<G-O`-D+lhe><M)HKTLjQSQ2[cW&KYrQ[\#XDLS=jEJO70Rs-D,u5#JS_?ibs1n:GR#Hl(,h0X[P-GE=WWFrNV_C#&kdHqsTJCd2%?Dl<#LU^R4)*`kQVHhr2rXSI94*$[mKH;US1/o829*#&j87=`Jbkh3m=IO[gZi>f07qrI:8p<$\RDh)3YJE4tEPZ+C%$U-)b_kVQ%EiFVj_ZCg5lA)$XZ"1J3\IXYi:f%@M/o??1%HSOIQg:P,VCArh<JqiWk#9GFnq7ZW4'bsU<^oPFZnSC:[N>,3cMWX?]7u(V^1KtB%l@LM#-SAAN`WY<VWq:HZ\o,aa.ZgeLZa,!\$/"5XfA0J3b@Y]<]WZVKK_mCPR5>_C/2=FK"4YF6J=n1"&'L:j%1#S3m5boc8Uf%K%_4D@kWJ6ARb_q%D^kh=h_?eU[3gr!_^9c&tm(?FR"I0qll+P+ei[X`Ei(L_gAM9;mYC0Co>XPIK9C0_P'fdOIDN"hgNR?uqjd9X_%,9W^m"1dXB5*UO!IU<:WI.2?Zfq!Ut/_\XH=-]R`:``oe+%)kIq,7bmosL#;W7_I+I:s/ID3:Pf&S%_/.ooffP?/#IVj5?TK9^E&%Lk\j578_*I=K6G]8N;"Tma3b0+%+]fb%Ogj1"8q"j,qiH*9e`iE[0C4l(O6L[sIR6Z<6FU(S>'90s8/a)l7R@0sBLgG"oLt)i@rW%0e&^c7P&"p#cm$h2#3`RbO1@CVm>nBFsQHf[\k,,_Dp?+MTkZt4=@TBXat$JEWB6lBBEb+T_pu%`lhiQSFFCh/lF.KP#'mZI[Df(%M?ekUVd:o*g!Gi#Er;fSL3b=*jN/Cn"IN\OCZ+&eeEZU0@gE^pHHM6TjoquHEA4OoL^6`mk0+/@mmGD-6!p+E3Up#;9+]9rf1QG6%eQ:paC>9#p%tf:`1c,)LB5?Y#Y2MEH@NH7:F(;j#Ef6<<F5DL1`f$Z9)U!]4q*s('"7'Z7;sKYfX:!4-Y.9+/5+&%300JEFYj<aB%2+Q2=+bd<9EQYAj#0]/<@5bgif$jf6oT1@0p^?aMZ),!FVYC'Rkfm!9RS"anLRCfc"j&>Hi"s>9MPc@LZ:$S^ZEh#a9/D_t4LONT%6'D!?)Mf09hRggmH*uDNPciD;LrV.qQ4)^DI>u1^Z%id"`:N5Y6Riq3m-0a8FKlOKGp8752U78.`JYVR5\*OMdD[I`'LN]GT)RZ/%?2F-9'&s]XBGO1fKG]p-@MZb[h24'Z>5lCaN+F(lGA3_KY`,MV[g#+\?T1-2RJr\EQ4*6j<<L?u%TUKaNbF4G'3a@N9VbY)mo&_=%Fe68qP>Nscg6:hufC%.t\+$+q<2i&d<'@:f-:'lJ=s=p#C>dFl6RM#A@NqpI$:n_rB,rU^K?n#,FlqR"9ne+f&HQ19')=s".%0aa%`S=8siQsDX\)Vcu'5s&$e?!+IYeDp:prmbH/X[Lp<XoHT&]4cHZ6\!'/pp`_`,VJn=;SW],fq_?%.'o[ob)X%P:BBH@679Hbk*Q@%B?5!,]gDR8LjDO+!Lc(6epUoN1aLlnGV7oD<YI)(.B@-0@S1\;aATDQEi<#"&e1fk,!LbRX=U^(GD=>io8<ELi<m:Ci2P^>NU=eR%2H8m;5R7T8e2Sc(b,d5;T-<pAYRASmG"#4TO?pkUV<8pY8pk7Q7*^-[[21<C3_]Ts.9[1ek&a5&?McNIi'L^%3et/o?.^[n.S:XW%M[V[`DigRrm*`S#-9`S(:C+Xb<gm3fTMag\jg%CGpM=Os+Y?Gm['BU0eH+#/MsXK*>t"d5f"AW,8fB#fjoN8TB8P)@AN>lN>IFBd%i_$"A.ea%VH>(+7;#7*LX5Xj?cmh[Z?(l_/&mVKe4t4QDFi]-IDb!B$9ODu&B%H*^p==C&ImDP$9"UnVE=WRc_C>q.8-u$ETpAeQ%KZ8:30$@:8<1P_=_IjmH>]P.qXSXFXg4$7UR#g3Cl$V\aiS@WhW%=Xo3>--D6)GGZ&>g1t-\+UA6PUnrEcYOQFZlO4!APniJG"Ge%nrSD'%b+)q"D#M[.en=Ie_B-4!C5b&^m#>,\^eU[pk+HMfV`jnCGL%gLem2g4'XoQ,q2t.'@2p0]6..Dp^/04dkqj:bJ%>PFD0Ai%`+Pc$J\OPR+$&9n\c7puPpT]-dno:eHpK:f\>)7W]/VL-lu#'`8t)3MK3$$-!K\f5%ln3`b:..@<^o`T$gmT[mn-rTjMI$Ii.(Q)%k<C>>F<RJQR\-;rn-]sW=QuU%*57%/$SX7[fi@TW1jBhm(pI#eFuVJlQj;ID/+q$QbcGGX4PB4m:tg+^H=s[.hD'VjUKZTl=$e97%NZ67f]BL3VUnt"D6uXVXfkJf2TJ'_KG:lt^.p*(TIs-]qcJ:0r/\.69#75L[+VU.2!Yak`jXUi*j\jNTo!MlnVM,-LL`S/SMpT%j%F$3CLdNh98QqOj$5JPjD<8q<HA9<+%8,!gW$3m'cO<2V4K<X`Y,"V8Pk3@frd$=AqDNSq<_l@Q\B`6CFFBWK@3spldq?D)F.-,&0%iV<;7i=a+..]O1];2/oZ\g!'(?H,)E>0Jf?%k[4Dl"WN;c*><Io(>'uj#a"O`19^?1RNWsZZ\&-S5gEpRo.Xb\SB*-e<<cG.3u,D%c%lNYMOn:i!sl]$Q70'nebe9G9#+`rk"tOSn-`$`>1$n0"m%,9,`^>M;$]LD.U<aUG8Xm*J`uk3#%qJPoCS!B/`,55RRd<cqD07k%<$o=9gOh"'cHHlg:+?VD%+4fOUkik6eaG%APK(%);o^Q7iR4!hWr@TUF_DZN,-9j$[dk&hX=_WJ;rUa]lUk.Ci6G;:"'D%Z#b+hO%k6D37QnQle#icS#A^r=)[c!H>7p<P&9kY`)?Am^3dFQJd9l1I`p>iAej@mM"L_3L^qKp;j$+?+n@psqM[ds.HE$?=8mdT/QBI1$3%bbQZkQV2c;/scpo\6Gnu/iLa\>uo_\\hNoDrLccZj&XiXjC>!b$6N\q_6>8P)s8a>;bNYqP6d=R%]pkeIE-V+SHK5$kTB^`fne#d%?e4]1e,I%AUr)VaR:N2*nD$SWMu7M&N,V_CZ)/'5%'`t3bn[JNK1=tXZ)C1AI=XKd\(,ocr?30knLTHX9,2EM>gF!X*Q@"-Eoinb%K;tgV)Ere+MDpF(p`40?AtCPVS;'fk7+Mu":qWV%Yu3@#C6\9V-&E+$C)u:s1A2"J@Hm^+5^ZoUbdWI3FZK?Xgqd1),0YV'g99C9%LKQ'j%\3j^H2inti7(otpcJ7!lm%o#gfq"IWD$!1Zgh!f&S-s/7mF]K^u6D^g3aE6f?K'TRh5hb)5Sj<1jMG:Zl5Y4=\3OG<4+r]%'Sn=M)m]OEkY8uFB>tcXb/L0tk!W:$7\)_gd!b[Sem\4bmudI$4UH`Qfb8FjEkLkWc:r@H9?kMdK,K&pAd'OflaaJtX$?2+LH,H*%H.MJ[DY#8':?KqK0%tN1C8II)1G35=]r'^PkQAnXk[$KkLO`^*2Ba%l8i)R"TcO%IQ3:\Ri2PT19bK8R?NAArd?,0`%Uj5N%#Y7[%o4Wj4'ntUco*g?XW#GT<ZU>_/0tLH\ku:O5arXN?/!:r3/tqP1"&,DU;@kaG27:ON.=;QO9J(KRJkh!(Qp+Id[>u-4_\ke.Fc#ft%)Dcr[U;1Mf3O4H_(>=EZD'g#Y0pQUpRZMEBi>8W(^qs.Nc%g@9*o\h^bpLi[8-ul7N$$f;n[(jM=YDEK3ar_>BH07(JXPUD*4q:U%S['E4e7?u9(GI[DnI5^'DL)W24aHU2>_Yd8Wq*3S'm'nOJgWWd_fY?3FQb+SRS(KLe![]YngStEh1`<uZEo:3_eOuQVB&Wn'&;rt%UlEM)H@eZ&=nYfdoL<"0eK?l+&4u5_WZa/hPPLb@)t9P`\!qIf?9duViLS4$4F8>d(,ko8PU4s)ZA+H\or1D/03lIY*T#o['9j"R%.,iP_qS4aL]Q*5p]f0DP[bE&Rk^Z?js&0aIK#U*T8Q&+!ck&MC/]@r6\:[.,!toA=ktq,T3ObR@`"J:mYtPK;_I/alLk(3qW:A?Y%LqkJ+rT:Go0Lb`O1R6MDE"JcV`#g6Ho1GG\LmB9WkU38ojG`*8P\??0FYR(dgn8L(9265EnO_:'.@*h(__oo#=V(F$Z^_S%aCZV>%$!G>n/!jr>&r^oqVopA#930S*^2)(RJh6tG(reZYg*HE4OT6eQ"$\8Wllc_%eQ"t6iR/Hd!/u?eN_c`]XoU(5.P^5=H5\*N:O[Ys%2Ge?8Vt%ZU79)Mo9K/l0fh1f"b;U@K.1.*dWuUtC'^#MT3jc7b9ZN2(T0EQd_*CQh_:#J;<h9iTl.L)g2X7bo*"$I>Mi\r\g!^A]%f;T]'$rHfrTU&\J2U83nh;Y_nf^jKFSEOEmrC"ih3ct,Sd?7;I(qaV!Viaceh$XJni[gWoh<I.rL<J[01;#<RFZ>>KkdDo)Q\#nG%--hH>VH)%U&#CY`=&AEp.<?/g66M'T.>&#&?e%]`4f"[GbE2g:.!O&J0EF1PA@V9.bDqN#-n4<68IS'J9!Ke`%4"4g,XWiKjrK+O%(\JQ0N6]E0mss0eILA%?mJLMkdnG7@#`Ka0K=p_^ijtEE%LR,dqJU02\1qBkM_A>'jWa1bQ?[@`T6pk#[J;3Q]8K-lW6m:1JK#oS%(OjCsDNk7M6&$P2&X1JH*Z,@]_(uSjllh%&SIZO\_i7^IO"no@#TF&g1a&6D$?Noqr2d-:,65%0?IoAs9g0Qu%tbDJ;-Yf\[(sn`%>BN,Y.!$N(>eHJ(Xd>p"U-[#3;\^9Zp^dU@gLWg"enGL'r?(*aQ0`D;oM/^u<cAb4iAppW/i9p4fSn.k+f^g[:'qXrU9J8_cJ:j/%AN-=-g(',nb^=TU;iXH4gZ1@D8lP>t$"B?;)!Q-bbi]M+qk25>?2N"bcAWEf48.<)9ROL61lp5c6T8l%V6Ni(G_B>On1C/uA3$f9%H8()(qdQ(,aA0\uUT5q9;W2^omTQo1%pK`i3dMaFg!=3]>qJt)j158sjH[/d^k3$4Bl7+X+CWD69!:?kRSBYuhA61=W)5?ff`$l1%Lh,a>)91Oa$s\1B\>oZ"7pX,\\-+X\NT;TL@WM2WbN"q'8eb`Y:R:m>Zolsi\8!@o<$b4H6`0)cT+0=Pf'$>4@khP-*k;hhL/iPQ%D>IeA*0r>f"(Q"^AXF1OluF0?9\etYo$G6Y;@k#=e=sO,\Y\6oh[Kkrp*@sBoH,O_ImhF859$.bP2fXT,Z%u4:pK&<Te#SK?#d,L%<KJNJV:K=]r/Ijal496eIOB`HRZU2U@HBej;/_TG`"d5HMo$kZ%DFt*b1M"BFRT4IO(<r3OVDmZJ6#RuJY/tU<=iin(r=a5rZ0"$%?Cp`b65>&i#J$6mENi]uhb'Gm'J(&'omgdTGIfbUR,TN)<0b@q`!0qe$Yt#Br@i\%1"%0T(V^sa1HaV9&P(EaZ9oA,j3T2sjQqT\%i#Z/t:3V*CIG*-RQJ'$rHaAgO:qJ,"3QDWohVfbi+-DRVLK%,F:jTUY6#b.oZ(c6c_Nr=AG"CVl"#3C%%#5jQVqeO9,Y8"(boras%l'Sg-$35oc\hM?@OlPn,Q"_e[dgf4*X2Q>7o*0e8#>*]<I"i8fi*Y'7j^_lW><9.!GdB%?n7[HV!J#0goOrkM>Kh/`4'TS7`P*05%9li0NVRo.CR(;"(E&of\"I]<0;DT!$'LP=6F;jQ1dOuA<U]>rJ6XI>IdO%cO+OY/%%L"7p52$NG#@3l:N?=Jn4cgJ="=$\IQYdW]%&.>B#<<k,ghPdM4Mfri"h6`#;V[*<T>h"gCJU%'7l&gXc+BGWA3uC3(<N`<=Upt`mW(%i"8seFb'Jk#>0'iV,AR=@U1]?oD"FNtn%V'MIr>8)&,--"g4mj`M?lk,mC%5!c!Y;J[Nb1e\W=JX:fmgU0U"lho=!!m.V)4a9)I?Di=1NdO]!KBSe,ohQr!@@No.:.e$+aFf$%%DK8qE\s:pX^@rI>s&+k5tp,sZsd'@.N!4(M1S+A(Ys4QB?_b6ieEG(`h8Mrkf%+p"8/0bUlXj6&&odJh3mB'Rm6GoruaCJPi@%-%8YP$t&odSG]/Q34b1'7A@`i['#[4pS<kMIINhlT:=9ZLfc.`$R^6K8)A7@B^&a)4>PbTfZ#!pVh75C[&T27j6#,.cfdMQX&b$S*.%L:/nPX0RC6hPOBWl[tU*^r8ZOc-LYr!75@%DWD@L+Zq^<L^B_!YR\@AO/Ppt[=fU=@sZ:##6fgA*/k(S@8M?GS7k2N-0=+,rZp2&%Y`a73Bf6N1X,BQ>BX>jUSn`[sBl;1HnE=iUI&>>pf3H%[$^RLm`NGGb$?hT,Q,GppMT\rAKO/<l6QFKXSZ;Mq/Ql>,<tE!=*WFU!%!d\ZEmR78dM-'!]ZTL>\m6'P*d%QcLF$<S'NMhoL_fQ@iBUiUXiX\Wm'e]e(=uJ0Q2/tM<B<a-kT&'\N%)8*$+2=Ob$t'3^)X0!P%\IKa6`d7JT3DtOkS8"RJB*@<1cb)9Y*>t6CX0VH1EctaBr5/L@8)+r=91M=O)Z%E%=sseedO19CYCURN\-HQICJD>I52Jbt[ZKQs%E+aStQ>K;N;[?:?8!kpl;p%KO>1'18K`i5)0k>*1qMJUae2kn2`hIUu6edA?FI>[pq+'8+j""&Xh["/g8AC;/<Z6j0"[H6;IcEg!%fFM_n+XnoLh(sFj#EET5R%:jn4n/RF*:b$tTQ^\4\<U-OM=I;l6T&`LbHqaArf.5XcP]dYZ$htB8aFR!D!b_rD*s`/QZY-g!R?S=%gF".Cb?siT!ECk:RCoa]f,sH3,*iNfV>s7Njt\sI'ZmH#=5puMVQ)R66jKgE"=5oJ`$c11#/H-?O>Z)-qG:3+I4&KrOoHRRUl5<O%l2XSg6F+p5Pt^fQo?rMm`Vfep:j6V2=0o%+7oUnJD3Usi1@UbgQ_U9>3t,:_M.PQ:)cB6^%#9V&hDu.2)duSY^5.FENq&B9rPj:H%T_3H?J#]*9C0="n/1?o]s%k@YAsRN(:3Ls+XipNq@u:+`=a=H-BA:&(%o&@BE=H8UFilSW=W&^_8]WLegmQEC5GERVD]7m]_\EIl%06>s6\3s(TdUP^2MXqKEPHh8E$qK"%?FE\&M_hDSju/kLFC*P]TZ7LTc,t+?4UKB&NeSCr!Nikb=Ih7SL'.Ma\<G2eD+nhoNFtl;%h`Rt?d!s[[`cXfPd*ht;A_6Qb#TBD^jZ."1_;G$ddpWai:?LcX&jEUm8_aNWR@u!2.>!q`9&JYl)A9NGU*l>NZ4F5&plhka+l.l+%@0.\sTS8mGEfbN-ptA,B+%>+,a6jVSX50q+9pS48rZj[Il3YbKAGtbI=mCs"=bf0HNc^4FZg]::?)a0JH^>:UbhPV:6NZMiV47CX%lgu6,,rHgd,`BF`X@KRmY8hZJ8WTrDMFM!'<L-Xo6&t['r'@T6qXBPlnji9/#B1/Inu_Hm!BktlKg7.Ha3J$GP/j_4c:as1@Bclk%dlf"]A+0R_E\oZV@.4I5R-+->G@7aO+!C.e!#UAq[f[&_n6Ig;@#4"Jmr!8gY(/^.ONX=a@IimF_+IG"('.ZpGC]E=](laTOtFF5%TG%o%W@Bd.!+[IKmllu<jl>)*d6Y(PiX:9$,,D?eL@;%u0-oL>?F9^?@<<^mK&:e5h?NOL6N-$pAGY99E+5J(hFCZ_b,YS/##kQ&%"?N(3)IjhD(RY=PJQmt="Y=[A-GZ^88#p2e4YhKs-^@oO+dtC],VFlZV[t=CX#btG6oQ[@CTP:5M!g@!59RHAZ=a>!Idd]d\-W/M%aW.,T)23++&TF3^bYRuo31.8o@0E<#)u=qI-9L1A&:k??4.=d[2HOi=LVn:)E/Fa:#0(]OcXcTd3Au\BfE#RhB&t@,VkV#d8#:r"%:1YGr^l,U-0'>oMp<8n1lr#1.NO:QPDZeprdoS=KA>(HW8AHIt$)qNp6;HCg(6q4r.^*pNkD/&72sg,>dnU.=:8o2Cl8qOCh8H_R%ljomYkm"t8@eYmT?-FF3B(Q#Imp&^8H9K&J^r<$Y!]u$gjEQ%kMLka*!\->#J@Ngp&NSJ]'Lu'Zg6s[fhoogmf=urP=?p%(V^$iq%&G)(4';iWn5dWb;1Glos#bRc1$62a7RmUdnAAEb:EbpnuT<Ws)*^((41La.<X+q(<f,(315KO713okO#XckC<9@B#Te_.VK]1ZCL%!+L.(+=k(sK!6ONnrN7dh2d;_N>eN(bNc?I2.ph83EQ>Z0$*M!Qm+rmf*7e'^&%[.2=Q/qe10WC_82>#aFAf.2H0q2#k",2ImXZO%Iim\,,1lC;ka5)g>d6lD'ZDkpZqR[OP%Eu3/PhOS?GA1-"Xb>ZO$igG@H9,tQSQ#T"POObS?[!UTW/pO6k60l6d8<GP<G-M@P*@[%pKXFSU]VOo,^li%hnS]Ud-$f,/Y'fZ+GXsUh#R_p@@.-XAK/V5U1JftS3,Zp`/2Teq03u3<W/qgCmfDcP?a\;H!Rt1dQ2-*\d$rZ%m5Q^1:_jV@?-T+-a705nEP+Y$NknaWj-[bf>9^4^S]@\;Hu-iCr=PgH[0*Tc^"I1L+ccR`a8ScS,g45B*(a)[@1;$*YC,XihBAN(%'u!O\:(tdMZ4_q4Ff\W6Z\;6uBg7O!/^`gW=jO2BcEha#Hkr&c5P$F\*L$u_3/_4mACTHsMeVpm,ima4=9UAO4D.:iXKAh=7PaUd%mNEZbhp14"FSBnn^F_"')H>MX>&?F&Hq07U<\/At8M)-'enTj-Zh]$&TK4l5HE=OYbgj-h>\u'UT>XVodR*)p>cWiE#ub,+BB>Po%(/p8,o4u1eS-eMLU9k?6i+?Zk>&c^"*S-,&+YU$Z1d<3JTe+)eXLK-L)9Z`[=^F`2oITjeehcX!j-&-t0=eN^5[8@!^L\qS>]Phc%Y0+K>g5l%Kc>SV+^fX<j$,<q1`DLQt3u1YRBV/CH4mFc)(&,/HS4HNM@7)4pOWpdj'&u^^pP*g1dS5kSY?N(l/(XC%RQcZjE1(iC%f'VZHhN]XWHX<Ps[Ng0T,_B/TbU`E<.*k#PASQ@YI;UM0RA:h('51B+IWm3F?5Y2s;^h^n][uCVAdVRm"Un=Jphj?E#k@eZ8le7M%nO!<$]D17Wr;kj49QiK0*r!ks4"o%YVN^G9D8:>YMCcQK>Q"T`!J<T[[-aYo_<ni1<+aG<<#"Qd(c2,l[:pE:?o'quH`>S0\]4`g%3.rU\qRg.@48!T3h]XG8?t.^b2%\JR=#T*<>p.%DjjcG3`LK^pAgF04YSpG>J1`Pc'n?m;:(&@Z9(/ACEVN;P/',I5E7=`4r$_En%Eu6T=B]+cT*/p$5+:Z8tA)@9I%#`AqS@=ed;=.oRce-k60Je"BCZ_&2qn?[rf]06?dp[:r1i46+BkUl6ea;-c67Phm+g9"GeY<'T%b-M`6))j#4!N0I4lZNA>?ggg#%`TPk3UQ.U%d@h;?]p9C^:qhAh=`]M,""\eWgh%4G\^Z)JG8_kBO>*n'5ZPO-Jl27GK?N]b@:>n%`5;a'CtqlI3qa`A?&b?orNW=T;:"r14]G=&gXAhqR^YFCGfAM4[-aI^b2&`.8W#$nn@o$6:W&StpF?=c*\%*iE5dK+8=THR'#CuV%08GF$]DAfPHe[);CK&JPr9jZkX*;W**:o?2?&eLof6<;##3j^FmFO:)m:nUf6f`Mo-TMXeY"gI:0Y<-eEJL0B?(Ip]4E`SQO6:Db%KW?]t\Z:q"Nbk226Ym/pm9onq-qA;k`cB,jB0EjdH'7IW9u(!0!SuK;J#Cr8f[=I*MN+PdSX<XWZ)&+-:c>k/9;=9"\Y&C?#oM*L%>C$O]V0>>IhUB3Jm@0]EhYFX9jkpmD&"su>16mH&)]@0d%[4j,A(l@ET9FW8m:Xut5/K?W,=2&97rW[tB1_<kJKKdB?YagPZpIPc%]>"&%%-skR0X_&o5j@A@J1ILC6JTcbWZ1)4"u+hXDe;\XDImlFZehDM2tuaT$[=Hl+Ee<!U!pH<\J"d\?oCP#Z#.rK?u>&Me=::`%0RQX6a)+uGOI&C:I]Be,Z6HHZ/DssiJFKd:BR*]<80/P"oZ!]uA*;%ea)7!QD19J@5V.R.l'Pq&Z*q\t]P.H+A!t\aZ>>U\*`<[4%m;DP5<:@NPEH^\XNgj/[IYjSbC[cPhK+GD+r/cR"R'JUE)\@WdTf)TaUqn\o*h#GO?bQ_oK/D0N1VNiun>k#\cbZe;7kro.!AX?_%>(aRU)Z8l@0lujY61s0NNcQ%K:R!FT.1h>f(qR,JTt3:WJ5ef$.gUDEBQr5CVMdI\8.OtN&uT$^9S],UW#[U#8FVH44]5rJ,7^;2%gp$i:6G!g[)B!Rf5Mn[MZ6#P!&(0%F.V?7uAFa3'Q[h7'Fhcr^)ctBt\liT5Ut/*3g&\+hF@q>?Qd%h!%)H!5OC.G-#/R:_$ta-L%-LWT2k?@l`!Hm%^c_=BN)J)kU!irN*VbCdpTc_hQ@E(*W<^I<Qb$Af`GmO<[,=c@L5Mn\9%PqedB+1eTZ53``"nX5lD(dW."d,g:%QEnt4PQ/Cd?9NX`RuDNGC4bH/:^H::#$jh7NDar1X.\b_W<b8bgNM]uS-T0Oami\%lVTJ(m<u,UTGTD6@WkIV'"44V55,:M?aBO$%@(hDi%roGXcd_[OgY8=;^d.&&-kqfkp<VD7IkrT95/r<0goncEeFr([gL:SYBPdBM+nKhhKH>$Xjg+?U$O`DO=?ha'^:s&7`1hm=%W-7Bs^Es8`\X*+!p9u4GBV<B&FG>C1Is#T.,?<f9netXKmRp*cqgCi)kr7)QY'>.k6*EfQIYOX`c!(E&E&7M,NK_%8b\9Yk#g$HY%j9&S9H6>81OJ;MQ&hBC&mRr5o)h&,%+++Bc8cs"13T/oDqdlsEEfp@pp(\[<'#dd-#2XSoG`jdoYBj`6[2sVcnI7b'/H:Oh.Tk=P%WfQD<X?&*I`-H7OcO^q4Uut,0Ge=Gf-re&mr[Nborck@_0>Q7>H2Qr,AGu5KWVgE?KIN1Y5N@m$LD6+p.XY"<OTdI+$pX?0AF\tg%B+=1'PEen;d@mssjs\P&!sG4<0oTSR+W'V#gnig)PgXj<+F!u*>HKscBEW7^44m"ObKp*2F]A-?WHD>I&FM?'`$M];^#b1Vd[F[M%&dP/A+<f4fF1?Ot?LbB^W+UC,`YhRs+"F,+H3i<<X1U]n;XV:ubeWfn(3J6'*+;"rGG$7s[-g*IKNn[sriRYdh#7lY6S0sQpIoVe%MB*9lHY(B4rP6gQ>OA\(k?/>hlDSd6\<3&:&<S82S5(\YatHCof6+1jmY;i8=`R;sZa_rD.PJoMq6`(lo1)G,c$MbSj0fe#`B!pT%eMt3iPL]mZ:f`B0>UP/J5Mo[bdgYMe1qbg$R,Yq$D7-!1k24pC2YHDtni>!e-T[J54\npLHhAAXOik#rC?=.?eT,bZ2*X1:R\(VX%Rt!9fS5X9hkDE^AgjMe=dHW/TZX2K];pTI*bdA,ePCl<1#)5!4d`]FbS0-eN<h9E"2'!pJg7KUrg>>A3[f:1/3AM?Rqp6HH4ZumD%ITC`-Z4lH72>'!e?(;iE%=QIHT`O!:0f5<Raj9]^?AE,N]nRlfhhEK3T0orms(ps\1mW=^cnL[*F(k9rIh%H)V;@Ye.*@@.7!4Mq%;a(oQYcGDUAA.a<%D-H_6<BF&FT*g0s*T=R6W[Tb=R,7#j3i2h1c==HM[?M'bTF!3^:ho+.@_AI0FpaX#o,m3SIDPI$hueR]!u-`%4Cc1or-<Xd+lBaFR%+'VndhKs8d:d(RfBc]fN+?(X5dTe@Mls8CFLfDpO(,Fg\Q;9*q+blL?]-jjq3XJCP*`:Ml<]^MpHhYq1kU2%D2H@;F-SKrct<_5;\sWh)'A?4`5jD)Ht)NQ``+,XC=W^d+<RGU2BV1GrA<6lb`e7AHU(XDnV6kZ9Aq*f"C5"Ci6U<M-IQ<(qIK&.%?@"l)Qd]X4mA'[Kqb3!,3W)Cqf8c/eNe?9qGc!suC]n^\+!D:Pj/)L!&]0"^b4>4YkWOljONj3]Lj2u[D`YHsY-gl\,,GE)0?D7S%3>FHQ<UZ^/P+Cf3F1QKY_pjl[2=gIs5HR$ko6%54H5>T="\9fu84R]^ih@8%AD@.sF+&F6?im65Gt?s5&5AP,cA`s?O###U4o!GL%PA)V+%`^Bt6mG8hj_inp\L<AORgI#Wkc-8sba.,".d"K#D#3cgW]iB=($,Z6q>iSJaqIo)n/J3r7d:RThX0,C6on2jf,MZO&Mc0#%(h'.F(.1U;&oNTJS*cYUSB?a"^48C+-nFhD,^f?6ZBfGg3N$JWNW7sA$ecoX!6IpGY],>;J'9+YD1$PC?@$!Whd>f/mr/S4/qrKX%`A3&<4+#:YQ+?W*7#rL;NJ&seO09`,nFO=F)WjgC;-n9^5u[!`iAR9JE'[Fd]sSTO@o$a4YoI:;d8ZG@KBl]TeKs9Yn^9d<3Cm&!%;i]lMO<>gtg]i9C=n3jDPB(J8l*VS#Efb4>%lnl(%?)[!d^`P-ql&-P+GZ37Mr_'9$r[\i`+Rf7U_eT&mW*:8Q\AadWO#[)f@:K6%Pu7:foV62g:S=)ZYXQVe3pVj4K\Sch(5/S;R-U.PFipJEf.W12N(To%Bm;08=U;NC;i$"]OIQ>BTlBVpV^,f\c$V^HETVF'E[aOs%PD"INjPTNd^H"1ipKR_7HgGapYL(p5lJ#BW.tH-u,m[WqFVf]6Nb_3QrasYc'(4S]fK1>:h[>[p,mal;&J1;1J5G&3(IUE@:N]=I%"\hPo86&;6$+W`MhF6CK\Vd(K+cEPLC!?N1N>@4][Q:/uAK`SU3ft(eiTgKhFTfOM+/3^?;sp3_f#JTRP^@=c;,VPgR&ig="Ip$D%W@OZ%."I6_q#ZEqI_N9+Z;t0*T`feY(<"cVdg)DLmN%0,I_N:&=mKUWc?RIMa,5Pk!68Qcj+iiqJjDG&?'s=5OBaSP/MEpk)4&-'%l=qUcY3?u\U0(:$?DPuLU,XhSO*VX)NG8`M:N^l1<WH3.D7k;D[`_':i'5p0.T##alOR,rp^EMC_8;`EWeqNF=4bKf:P?7IB`rm9%BTS]8!@[iWn0@'iFakZa`_\k5MHgN:]nHM)FZW)7_q`L(;k]+oA=/lAgN`\b:!0I=/aEb6flDjc=HjD2Y+o:9RZTl2\,#\FV9k\B%*X2=WcR<kZCumFu/De<@<U,rl.16Q8.gG>]_rpB!Q$d$GCO:b;`bW$TqH_h_(ec63*/V/3d0JtuKd;@@"g&MZ^oA'E$h2rWjQ:Le%&E7e5AWhC,=V0#us$e+;TUVMQF"N!:Q;)W<'euB-#Ga/Ge^$CtN4GZZm@#rq5GXh2-ZW+Pn3MmZ<:HWQO,7C"4h[Ajqdh/r.0hCq%'JS"pgBbf&)Gr&/af,RuT`dZ1oWOr7Pht,GS3e,3)P`UgMF9-A@2`(rUa:Yd<Y*fVYae&Jd_cAhq$adF.e2FtHJIDDSE^O.:.rUr%R9`SX*ls8$`=faT,4Q.JSjg*Xp-J"NF>cTl/3/E"@&,&b$u@n/'@+Ik7E!:\;gXi^P</:;eQ5:AceMEZS?dTDB<od;o]Rh5^Iads%hbe5h"Kc[9;G)o>F*lu4^9lU=q<E)QcHPji8LZoE[SX[\B#DS`\<uEf0-Sl6E8Y!I+A*c%rNd*eDK8WV$RsF_/pE2IAJTr%6>@TT%9;E=H`=GKtR:tjPZe"ab=*^0"$7VT_'_?m;@LhV1#q5jEb.EbhqdkV;\>8K/CkEr-/7]G&XgCel9jl'k";EPOI`\N/P)M^?^#fAX%PYk8L<,H*eW.pfKm929Fc'fFa;Yrjc8@>Z^Koj0%SX+@3;K!eiDT6N/fs8%ETr"1m3i]rLQ>6-EQ;+eh:<HJY$phW2\Vpm5$U;+u%Opg`mr=4hcL]?\p30)nqj57S9hu;rNlC-i/;0:1toP6eNn(e3"+PQgerjVq'\,YsbHbYRh-BF;jK=8pS$o7W\fN4,(0[f"W!94<V%s68:1ro=#^s6p!Yci;>S?iL)?rpBUWDh%W4s7)G*qWn1W\%hk8huEP^Du]I5J,/tKJ,@DRs7=#'gL'sIYQ+(iTATY4Dh%`;J,>SI%rUmXLrGV`,rrKZ[&s*(W:]KO+s'NM=&'1T3`;~>%AI9_PrivateDataEnd